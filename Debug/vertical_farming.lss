
vertical_farming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00802000  000034a2  00003536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000329  00802070  00802070  000035a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  00003648  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000136bd  00000000  00000000  00003c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005bae  00000000  00000000  00017325  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a8f1  00000000  00000000  0001ced3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d48  00000000  00000000  000277c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00034281  00000000  00000000  0002950c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008fd3  00000000  00000000  0005d78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e8  00000000  00000000  00066760  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cc92  00000000  00000000  00066e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__vector_11>
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__vector_14>
      3c:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__vector_15>
      40:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__vector_16>
      44:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__vector_17>
      48:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__vector_18>
      4c:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__vector_19>
      50:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__vector_20>
      54:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__vector_21>
      58:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__vector_22>
      5c:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__vector_23>
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	78 c7       	rjmp	.+3824   	; 0xf8e <__vector_39>
      9e:	00 00       	nop
      a0:	a8 c7       	rjmp	.+3920   	; 0xff2 <__vector_40>
      a2:	00 00       	nop
      a4:	d8 c7       	rjmp	.+4016   	; 0x1056 <__vector_41>
      a6:	00 00       	nop
      a8:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <__vector_42>
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__vector_47>
      c0:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__vector_48>
      c4:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__vector_49>
      c8:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__vector_50>
      cc:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__vector_51>
      d0:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__vector_52>
      d4:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__vector_53>
      d8:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__vector_54>
      dc:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__vector_55>
      e0:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__vector_56>
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	70 c6       	rjmp	.+3296   	; 0xdfe <__vector_71>
     11e:	00 00       	nop
     120:	a0 c6       	rjmp	.+3392   	; 0xe62 <__vector_72>
     122:	00 00       	nop
     124:	d0 c6       	rjmp	.+3488   	; 0xec6 <__vector_73>
     126:	00 00       	nop
     128:	00 c7       	rjmp	.+3584   	; 0xf2a <__vector_74>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__vector_77>
     138:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__vector_78>
     13c:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__vector_79>
     140:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__vector_80>
     144:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__vector_81>
     148:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__vector_82>
     14c:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__vector_83>
     150:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__vector_84>
     154:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_85>
     158:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__vector_86>
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__vector_108>
     1b4:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__vector_109>
     1b8:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__vector_110>
     1bc:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__vector_111>
     1c0:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__vector_112>
     1c4:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__vector_113>
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1d07>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x64ef>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x64c7>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x54ef>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1cc7>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e2 ea       	ldi	r30, 0xA2	; 162
     4a6:	f4 e3       	ldi	r31, 0x34	; 52
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a0 37       	cpi	r26, 0x70	; 112
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	23 e2       	ldi	r18, 0x23	; 35
     4ba:	a0 e7       	ldi	r26, 0x70	; 112
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a9 39       	cpi	r26, 0x99	; 153
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <main>
     4cc:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <adc_handler>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t ntc_get_raw_value(void)
{
	return ntc_sensor_sample;
}
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	1f 92       	push	r1
     4d8:	1f 92       	push	r1
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	61 30       	cpi	r22, 0x01	; 1
     4e0:	69 f5       	brne	.+90     	; 0x53c <adc_handler+0x6a>
     4e2:	80 91 71 20 	lds	r24, 0x2071	; 0x802071 <light_sensor_samples.5068>
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	80 93 71 20 	sts	0x2071, r24	; 0x802071 <light_sensor_samples.5068>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	39 f4       	brne	.+14     	; 0x4fe <adc_handler+0x2c>
     4f0:	40 93 72 20 	sts	0x2072, r20	; 0x802072 <light_sensor_sample>
     4f4:	50 93 73 20 	sts	0x2073, r21	; 0x802073 <light_sensor_sample+0x1>
     4f8:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <light_sensor_data_ready>
     4fc:	14 c0       	rjmp	.+40     	; 0x526 <adc_handler+0x54>
     4fe:	20 91 72 20 	lds	r18, 0x2072	; 0x802072 <light_sensor_sample>
     502:	30 91 73 20 	lds	r19, 0x2073	; 0x802073 <light_sensor_sample+0x1>
     506:	42 0f       	add	r20, r18
     508:	53 1f       	adc	r21, r19
     50a:	56 95       	lsr	r21
     50c:	47 95       	ror	r20
     50e:	40 93 72 20 	sts	0x2072, r20	; 0x802072 <light_sensor_sample>
     512:	50 93 73 20 	sts	0x2073, r21	; 0x802073 <light_sensor_sample+0x1>
     516:	84 30       	cpi	r24, 0x04	; 4
     518:	31 f4       	brne	.+12     	; 0x526 <adc_handler+0x54>
     51a:	10 92 71 20 	sts	0x2071, r1	; 0x802071 <light_sensor_samples.5068>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <light_sensor_data_ready>
     524:	39 c0       	rjmp	.+114    	; 0x598 <adc_handler+0xc6>
     526:	8f b7       	in	r24, 0x3f	; 63
     528:	8a 83       	std	Y+2, r24	; 0x02
     52a:	f8 94       	cli
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	e0 e0       	ldi	r30, 0x00	; 0
     530:	f2 e0       	ldi	r31, 0x02	; 2
     532:	80 81       	ld	r24, Z
     534:	84 60       	ori	r24, 0x04	; 4
     536:	80 83       	st	Z, r24
     538:	9f bf       	out	0x3f, r25	; 63
     53a:	2e c0       	rjmp	.+92     	; 0x598 <adc_handler+0xc6>
     53c:	62 30       	cpi	r22, 0x02	; 2
     53e:	61 f5       	brne	.+88     	; 0x598 <adc_handler+0xc6>
     540:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <__data_end>
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 70 20 	sts	0x2070, r24	; 0x802070 <__data_end>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	39 f4       	brne	.+14     	; 0x55c <adc_handler+0x8a>
     54e:	40 93 74 20 	sts	0x2074, r20	; 0x802074 <ntc_sensor_sample>
     552:	50 93 75 20 	sts	0x2075, r21	; 0x802075 <ntc_sensor_sample+0x1>
     556:	10 92 77 20 	sts	0x2077, r1	; 0x802077 <ntc_sensor_data_ready>
     55a:	14 c0       	rjmp	.+40     	; 0x584 <adc_handler+0xb2>
     55c:	20 91 74 20 	lds	r18, 0x2074	; 0x802074 <ntc_sensor_sample>
     560:	30 91 75 20 	lds	r19, 0x2075	; 0x802075 <ntc_sensor_sample+0x1>
     564:	42 0f       	add	r20, r18
     566:	53 1f       	adc	r21, r19
     568:	56 95       	lsr	r21
     56a:	47 95       	ror	r20
     56c:	40 93 74 20 	sts	0x2074, r20	; 0x802074 <ntc_sensor_sample>
     570:	50 93 75 20 	sts	0x2075, r21	; 0x802075 <ntc_sensor_sample+0x1>
     574:	84 30       	cpi	r24, 0x04	; 4
     576:	31 f4       	brne	.+12     	; 0x584 <adc_handler+0xb2>
     578:	10 92 70 20 	sts	0x2070, r1	; 0x802070 <__data_end>
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 77 20 	sts	0x2077, r24	; 0x802077 <ntc_sensor_data_ready>
     582:	0a c0       	rjmp	.+20     	; 0x598 <adc_handler+0xc6>
     584:	8f b7       	in	r24, 0x3f	; 63
     586:	89 83       	std	Y+1, r24	; 0x01
     588:	f8 94       	cli
     58a:	99 81       	ldd	r25, Y+1	; 0x01
     58c:	e0 e0       	ldi	r30, 0x00	; 0
     58e:	f2 e0       	ldi	r31, 0x02	; 2
     590:	80 81       	ld	r24, Z
     592:	88 60       	ori	r24, 0x08	; 8
     594:	80 83       	st	Z, r24
     596:	9f bf       	out	0x3f, r25	; 63
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <ntc_data_is_ready>:
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	1f 92       	push	r1
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	8f b7       	in	r24, 0x3f	; 63
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	f8 94       	cli
     5b2:	99 81       	ldd	r25, Y+1	; 0x01
     5b4:	80 91 77 20 	lds	r24, 0x2077	; 0x802077 <ntc_sensor_data_ready>
     5b8:	88 23       	and	r24, r24
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <ntc_data_is_ready+0x22>
     5bc:	10 92 77 20 	sts	0x2077, r1	; 0x802077 <ntc_sensor_data_ready>
     5c0:	9f bf       	out	0x3f, r25	; 63
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <ntc_data_is_ready+0x24>
     5c4:	9f bf       	out	0x3f, r25	; 63
     5c6:	0f 90       	pop	r0
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <lightsensor_data_is_ready>:
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	1f 92       	push	r1
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	8f b7       	in	r24, 0x3f	; 63
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	f8 94       	cli
     5de:	99 81       	ldd	r25, Y+1	; 0x01
     5e0:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <light_sensor_data_ready>
     5e4:	88 23       	and	r24, r24
     5e6:	21 f0       	breq	.+8      	; 0x5f0 <lightsensor_data_is_ready+0x22>
     5e8:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <light_sensor_data_ready>
     5ec:	9f bf       	out	0x3f, r25	; 63
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <lightsensor_data_is_ready+0x24>
     5f0:	9f bf       	out	0x3f, r25	; 63
     5f2:	0f 90       	pop	r0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <adc_sensors_init>:
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	2b 97       	sbiw	r28, 0x0b	; 11
     606:	cd bf       	out	0x3d, r28	; 61
     608:	de bf       	out	0x3e, r29	; 62
     60a:	be 01       	movw	r22, r28
     60c:	6f 5f       	subi	r22, 0xFF	; 255
     60e:	7f 4f       	sbci	r23, 0xFF	; 255
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	ee d5       	rcall	.+3036   	; 0x11f2 <adc_read_configuration>
     616:	ae 01       	movw	r20, r28
     618:	48 5f       	subi	r20, 0xF8	; 248
     61a:	5f 4f       	sbci	r21, 0xFF	; 255
     61c:	61 e0       	ldi	r22, 0x01	; 1
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	6b d6       	rcall	.+3286   	; 0x12fa <adcch_read_configuration>
     624:	8a 81       	ldd	r24, Y+2	; 0x02
     626:	9b 81       	ldd	r25, Y+3	; 0x03
     628:	9f 78       	andi	r25, 0x8F	; 143
     62a:	90 61       	ori	r25, 0x10	; 16
     62c:	9b 83       	std	Y+3, r25	; 0x03
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	9d 83       	std	Y+5, r25	; 0x05
     632:	81 7e       	andi	r24, 0xE1	; 225
     634:	80 61       	ori	r24, 0x10	; 16
     636:	8a 83       	std	Y+2, r24	; 0x02
     638:	1c 82       	std	Y+4, r1	; 0x04
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	6c d5       	rcall	.+2776   	; 0x111e <adc_write_configuration>
     646:	69 e6       	ldi	r22, 0x69	; 105
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	4f d3       	rcall	.+1694   	; 0xcee <adc_set_callback>
     650:	11 e0       	ldi	r17, 0x01	; 1
     652:	18 87       	std	Y+8, r17	; 0x08
     654:	19 86       	std	Y+9, r1	; 0x09
     656:	8a 85       	ldd	r24, Y+10	; 0x0a
     658:	80 7f       	andi	r24, 0xF0	; 240
     65a:	81 60       	ori	r24, 0x01	; 1
     65c:	8a 87       	std	Y+10, r24	; 0x0a
     65e:	ae 01       	movw	r20, r28
     660:	48 5f       	subi	r20, 0xF8	; 248
     662:	5f 4f       	sbci	r21, 0xFF	; 255
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	fc d5       	rcall	.+3064   	; 0x1264 <adcch_write_configuration>
     66c:	18 87       	std	Y+8, r17	; 0x08
     66e:	88 e0       	ldi	r24, 0x08	; 8
     670:	89 87       	std	Y+9, r24	; 0x09
     672:	ae 01       	movw	r20, r28
     674:	48 5f       	subi	r20, 0xF8	; 248
     676:	5f 4f       	sbci	r21, 0xFF	; 255
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	f2 d5       	rcall	.+3044   	; 0x1264 <adcch_write_configuration>
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	90 d3       	rcall	.+1824   	; 0xda6 <adc_enable>
     686:	2b 96       	adiw	r28, 0x0b	; 11
     688:	cd bf       	out	0x3d, r28	; 61
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	08 95       	ret

00000694 <ntc_get_temperature>:
 * \note The result is inaccurate for temperatures outside 5-45 degrees.
 *
 * \retval the temperature in Celsius
 */
int8_t ntc_get_temperature(void)
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
	int8_t retval = 0;
	float ntc_sample = ntc_sensor_sample;
     698:	c0 91 74 20 	lds	r28, 0x2074	; 0x802074 <ntc_sensor_sample>
     69c:	d0 91 75 20 	lds	r29, 0x2075	; 0x802075 <ntc_sensor_sample+0x1>
     6a0:	be 01       	movw	r22, r28
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__floatunsisf>
	if (ntc_sensor_sample > 697) {
		retval = (int8_t)((-0.0295 * ntc_sample) + 40.5);
	} if (ntc_sensor_sample > 420) {
     6aa:	c5 3a       	cpi	r28, 0xA5	; 165
     6ac:	d1 40       	sbci	r29, 0x01	; 1
     6ae:	80 f0       	brcs	.+32     	; 0x6d0 <ntc_get_temperature+0x3c>
		retval = (int8_t)((-0.0474 * ntc_sample) + 53.3);
     6b0:	21 e8       	ldi	r18, 0x81	; 129
     6b2:	36 e2       	ldi	r19, 0x26	; 38
     6b4:	42 e4       	ldi	r20, 0x42	; 66
     6b6:	5d eb       	ldi	r21, 0xBD	; 189
     6b8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__mulsf3>
     6bc:	23 e3       	ldi	r18, 0x33	; 51
     6be:	33 e3       	ldi	r19, 0x33	; 51
     6c0:	45 e5       	ldi	r20, 0x55	; 85
     6c2:	52 e4       	ldi	r21, 0x42	; 66
     6c4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__addsf3>
     6c8:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__fixsfsi>
     6cc:	86 2f       	mov	r24, r22
     6ce:	0f c0       	rjmp	.+30     	; 0x6ee <ntc_get_temperature+0x5a>
	} else {
		retval = (int8_t)((-0.0777 * ntc_sample) + 65.1);
     6d0:	2d e2       	ldi	r18, 0x2D	; 45
     6d2:	31 e2       	ldi	r19, 0x21	; 33
     6d4:	4f e9       	ldi	r20, 0x9F	; 159
     6d6:	5d eb       	ldi	r21, 0xBD	; 189
     6d8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__mulsf3>
     6dc:	23 e3       	ldi	r18, 0x33	; 51
     6de:	33 e3       	ldi	r19, 0x33	; 51
     6e0:	42 e8       	ldi	r20, 0x82	; 130
     6e2:	52 e4       	ldi	r21, 0x42	; 66
     6e4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__addsf3>
     6e8:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__fixsfsi>
     6ec:	86 2f       	mov	r24, r22
	}
	return retval;
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <lightsensor_get_raw_value>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t lightsensor_get_raw_value(void)
{
	return light_sensor_sample;
}
     6f4:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <light_sensor_sample>
     6f8:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <light_sensor_sample+0x1>
     6fc:	08 95       	ret

000006fe <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     700:	61 50       	subi	r22, 0x01	; 1
     702:	71 09       	sbc	r23, r1
     704:	81 09       	sbc	r24, r1
     706:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     708:	61 15       	cp	r22, r1
     70a:	71 05       	cpc	r23, r1
     70c:	81 05       	cpc	r24, r1
     70e:	91 05       	cpc	r25, r1
     710:	b9 f7       	brne	.-18     	; 0x700 <__portable_avr_delay_cycles+0x2>
     712:	08 95       	ret

00000714 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	1f 92       	push	r1
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	16 e0       	ldi	r17, 0x06	; 6
     730:	68 94       	set
     732:	ff 24       	eor	r15, r15
     734:	f3 f8       	bld	r15, 3
     736:	f8 01       	movw	r30, r16
     738:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     73a:	64 e0       	ldi	r22, 0x04	; 4
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	dd df       	rcall	.-70     	; 0x6fe <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     744:	f8 01       	movw	r30, r16
     746:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     748:	64 e0       	ldi	r22, 0x04	; 4
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	d6 df       	rcall	.-84     	; 0x6fe <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     752:	0f 2e       	mov	r0, r31
     754:	fb e2       	ldi	r31, 0x2B	; 43
     756:	bf 2e       	mov	r11, r31
     758:	f0 2d       	mov	r31, r0
     75a:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     75c:	80 ea       	ldi	r24, 0xA0	; 160
     75e:	99 e0       	ldi	r25, 0x09	; 9
     760:	0e 94 de 0b 	call	0x17bc	; 0x17bc <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     764:	c1 2c       	mov	r12, r1
     766:	d1 2c       	mov	r13, r1
     768:	76 01       	movw	r14, r12
     76a:	00 e4       	ldi	r16, 0x40	; 64
     76c:	12 e4       	ldi	r17, 0x42	; 66
     76e:	2f e0       	ldi	r18, 0x0F	; 15
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	43 e0       	ldi	r20, 0x03	; 3
     774:	be 01       	movw	r22, r28
     776:	6f 5f       	subi	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	80 ea       	ldi	r24, 0xA0	; 160
     77c:	99 e0       	ldi	r25, 0x09	; 9
     77e:	0e 94 0d 0c 	call	0x181a	; 0x181a <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     782:	00 e6       	ldi	r16, 0x60	; 96
     784:	16 e0       	ldi	r17, 0x06	; 6
     786:	ff 24       	eor	r15, r15
     788:	f3 94       	inc	r15
     78a:	f8 01       	movw	r30, r16
     78c:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     78e:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     790:	be 01       	movw	r22, r28
     792:	6f 5f       	subi	r22, 0xFF	; 255
     794:	7f 4f       	sbci	r23, 0xFF	; 255
     796:	80 ea       	ldi	r24, 0xA0	; 160
     798:	99 e0       	ldi	r25, 0x09	; 9
     79a:	0e 94 27 0c 	call	0x184e	; 0x184e <usart_spi_select_device>
     79e:	f8 01       	movw	r30, r16
     7a0:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7a2:	e0 ea       	ldi	r30, 0xA0	; 160
     7a4:	f9 e0       	ldi	r31, 0x09	; 9
     7a6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a8:	85 ff       	sbrs	r24, 5
     7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ac:	80 ea       	ldi	r24, 0xA0	; 160
     7ae:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7b2:	e0 ea       	ldi	r30, 0xA0	; 160
     7b4:	f9 e0       	ldi	r31, 0x09	; 9
     7b6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b8:	86 ff       	sbrs	r24, 6
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7bc:	e0 ea       	ldi	r30, 0xA0	; 160
     7be:	f9 e0       	ldi	r31, 0x09	; 9
     7c0:	80 e4       	ldi	r24, 0x40	; 64
     7c2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7c4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7c6:	be 01       	movw	r22, r28
     7c8:	6f 5f       	subi	r22, 0xFF	; 255
     7ca:	7f 4f       	sbci	r23, 0xFF	; 255
     7cc:	80 ea       	ldi	r24, 0xA0	; 160
     7ce:	99 e0       	ldi	r25, 0x09	; 9
     7d0:	0e 94 3d 0c 	call	0x187a	; 0x187a <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7d4:	8b e2       	ldi	r24, 0x2B	; 43
     7d6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d8:	be 01       	movw	r22, r28
     7da:	6f 5f       	subi	r22, 0xFF	; 255
     7dc:	7f 4f       	sbci	r23, 0xFF	; 255
     7de:	80 ea       	ldi	r24, 0xA0	; 160
     7e0:	99 e0       	ldi	r25, 0x09	; 9
     7e2:	0e 94 27 0c 	call	0x184e	; 0x184e <usart_spi_select_device>
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7ec:	e0 ea       	ldi	r30, 0xA0	; 160
     7ee:	f9 e0       	ldi	r31, 0x09	; 9
     7f0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7f2:	85 ff       	sbrs	r24, 5
     7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7f6:	86 ea       	ldi	r24, 0xA6	; 166
     7f8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7fc:	e0 ea       	ldi	r30, 0xA0	; 160
     7fe:	f9 e0       	ldi	r31, 0x09	; 9
     800:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     802:	86 ff       	sbrs	r24, 6
     804:	fd cf       	rjmp	.-6      	; 0x800 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     806:	e0 ea       	ldi	r30, 0xA0	; 160
     808:	f9 e0       	ldi	r31, 0x09	; 9
     80a:	80 e4       	ldi	r24, 0x40	; 64
     80c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     80e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     810:	be 01       	movw	r22, r28
     812:	6f 5f       	subi	r22, 0xFF	; 255
     814:	7f 4f       	sbci	r23, 0xFF	; 255
     816:	80 ea       	ldi	r24, 0xA0	; 160
     818:	99 e0       	ldi	r25, 0x09	; 9
     81a:	0e 94 3d 0c 	call	0x187a	; 0x187a <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     81e:	8b e2       	ldi	r24, 0x2B	; 43
     820:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     822:	be 01       	movw	r22, r28
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	80 ea       	ldi	r24, 0xA0	; 160
     82a:	99 e0       	ldi	r25, 0x09	; 9
     82c:	0e 94 27 0c 	call	0x184e	; 0x184e <usart_spi_select_device>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     836:	e0 ea       	ldi	r30, 0xA0	; 160
     838:	f9 e0       	ldi	r31, 0x09	; 9
     83a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     83c:	85 ff       	sbrs	r24, 5
     83e:	fd cf       	rjmp	.-6      	; 0x83a <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     840:	88 ec       	ldi	r24, 0xC8	; 200
     842:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     846:	e0 ea       	ldi	r30, 0xA0	; 160
     848:	f9 e0       	ldi	r31, 0x09	; 9
     84a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     84c:	86 ff       	sbrs	r24, 6
     84e:	fd cf       	rjmp	.-6      	; 0x84a <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     850:	e0 ea       	ldi	r30, 0xA0	; 160
     852:	f9 e0       	ldi	r31, 0x09	; 9
     854:	80 e4       	ldi	r24, 0x40	; 64
     856:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     858:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     85a:	be 01       	movw	r22, r28
     85c:	6f 5f       	subi	r22, 0xFF	; 255
     85e:	7f 4f       	sbci	r23, 0xFF	; 255
     860:	80 ea       	ldi	r24, 0xA0	; 160
     862:	99 e0       	ldi	r25, 0x09	; 9
     864:	0e 94 3d 0c 	call	0x187a	; 0x187a <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     868:	8b e2       	ldi	r24, 0x2B	; 43
     86a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     86c:	be 01       	movw	r22, r28
     86e:	6f 5f       	subi	r22, 0xFF	; 255
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	80 ea       	ldi	r24, 0xA0	; 160
     874:	99 e0       	ldi	r25, 0x09	; 9
     876:	eb d7       	rcall	.+4054   	; 0x184e <usart_spi_select_device>
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     87e:	e0 ea       	ldi	r30, 0xA0	; 160
     880:	f9 e0       	ldi	r31, 0x09	; 9
     882:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     884:	85 ff       	sbrs	r24, 5
     886:	fd cf       	rjmp	.-6      	; 0x882 <st7565r_init+0x16e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     888:	82 ea       	ldi	r24, 0xA2	; 162
     88a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     88e:	e0 ea       	ldi	r30, 0xA0	; 160
     890:	f9 e0       	ldi	r31, 0x09	; 9
     892:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     894:	86 ff       	sbrs	r24, 6
     896:	fd cf       	rjmp	.-6      	; 0x892 <st7565r_init+0x17e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     898:	e0 ea       	ldi	r30, 0xA0	; 160
     89a:	f9 e0       	ldi	r31, 0x09	; 9
     89c:	80 e4       	ldi	r24, 0x40	; 64
     89e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8a0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8a2:	be 01       	movw	r22, r28
     8a4:	6f 5f       	subi	r22, 0xFF	; 255
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	80 ea       	ldi	r24, 0xA0	; 160
     8aa:	99 e0       	ldi	r25, 0x09	; 9
     8ac:	e6 d7       	rcall	.+4044   	; 0x187a <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ae:	8b e2       	ldi	r24, 0x2B	; 43
     8b0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	80 ea       	ldi	r24, 0xA0	; 160
     8ba:	99 e0       	ldi	r25, 0x09	; 9
     8bc:	c8 d7       	rcall	.+3984   	; 0x184e <usart_spi_select_device>
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8c4:	e0 ea       	ldi	r30, 0xA0	; 160
     8c6:	f9 e0       	ldi	r31, 0x09	; 9
     8c8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8ca:	85 ff       	sbrs	r24, 5
     8cc:	fd cf       	rjmp	.-6      	; 0x8c8 <st7565r_init+0x1b4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8ce:	8f e2       	ldi	r24, 0x2F	; 47
     8d0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8d4:	e0 ea       	ldi	r30, 0xA0	; 160
     8d6:	f9 e0       	ldi	r31, 0x09	; 9
     8d8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8da:	86 ff       	sbrs	r24, 6
     8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <st7565r_init+0x1c4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8de:	e0 ea       	ldi	r30, 0xA0	; 160
     8e0:	f9 e0       	ldi	r31, 0x09	; 9
     8e2:	80 e4       	ldi	r24, 0x40	; 64
     8e4:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8e6:	80 81       	ld	r24, Z
     8e8:	be 01       	movw	r22, r28
     8ea:	6f 5f       	subi	r22, 0xFF	; 255
     8ec:	7f 4f       	sbci	r23, 0xFF	; 255
     8ee:	80 ea       	ldi	r24, 0xA0	; 160
     8f0:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8f2:	c3 d7       	rcall	.+3974   	; 0x187a <usart_spi_deselect_device>
     8f4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8f6:	89 83       	std	Y+1, r24	; 0x01
     8f8:	be 01       	movw	r22, r28
     8fa:	6f 5f       	subi	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	80 ea       	ldi	r24, 0xA0	; 160
     900:	99 e0       	ldi	r25, 0x09	; 9
     902:	a5 d7       	rcall	.+3914   	; 0x184e <usart_spi_select_device>
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     90a:	e0 ea       	ldi	r30, 0xA0	; 160
     90c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     90e:	81 81       	ldd	r24, Z+1	; 0x01
     910:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     912:	fd cf       	rjmp	.-6      	; 0x90e <st7565r_init+0x1fa>
     914:	88 ef       	ldi	r24, 0xF8	; 248
     916:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     91a:	e0 ea       	ldi	r30, 0xA0	; 160
     91c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     91e:	81 81       	ldd	r24, Z+1	; 0x01
     920:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     922:	fd cf       	rjmp	.-6      	; 0x91e <st7565r_init+0x20a>
     924:	e0 ea       	ldi	r30, 0xA0	; 160
     926:	f9 e0       	ldi	r31, 0x09	; 9
     928:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     92a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     92c:	80 81       	ld	r24, Z
     92e:	be 01       	movw	r22, r28
     930:	6f 5f       	subi	r22, 0xFF	; 255
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	80 ea       	ldi	r24, 0xA0	; 160
     936:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     938:	a0 d7       	rcall	.+3904   	; 0x187a <usart_spi_deselect_device>
     93a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	80 ea       	ldi	r24, 0xA0	; 160
     946:	99 e0       	ldi	r25, 0x09	; 9
     948:	82 d7       	rcall	.+3844   	; 0x184e <usart_spi_select_device>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     950:	e0 ea       	ldi	r30, 0xA0	; 160
     952:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     954:	81 81       	ldd	r24, Z+1	; 0x01
     956:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     958:	fd cf       	rjmp	.-6      	; 0x954 <st7565r_init+0x240>
     95a:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     95e:	e0 ea       	ldi	r30, 0xA0	; 160
     960:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     962:	81 81       	ldd	r24, Z+1	; 0x01
     964:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     966:	fd cf       	rjmp	.-6      	; 0x962 <st7565r_init+0x24e>
     968:	e0 ea       	ldi	r30, 0xA0	; 160
     96a:	f9 e0       	ldi	r31, 0x09	; 9
     96c:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     96e:	81 83       	std	Z+1, r24	; 0x01
     970:	80 81       	ld	r24, Z
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	80 ea       	ldi	r24, 0xA0	; 160
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     97a:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     97c:	7e d7       	rcall	.+3836   	; 0x187a <usart_spi_deselect_device>
     97e:	8b e2       	ldi	r24, 0x2B	; 43
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	be 01       	movw	r22, r28
     984:	6f 5f       	subi	r22, 0xFF	; 255
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	80 ea       	ldi	r24, 0xA0	; 160
     98a:	99 e0       	ldi	r25, 0x09	; 9
     98c:	60 d7       	rcall	.+3776   	; 0x184e <usart_spi_select_device>
     98e:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     990:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     994:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     996:	f9 e0       	ldi	r31, 0x09	; 9
     998:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     99a:	85 ff       	sbrs	r24, 5
     99c:	fd cf       	rjmp	.-6      	; 0x998 <st7565r_init+0x284>
     99e:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9a0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     9a4:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9a6:	f9 e0       	ldi	r31, 0x09	; 9
     9a8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9aa:	86 ff       	sbrs	r24, 6
     9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <st7565r_init+0x294>
     9ae:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9b0:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9b2:	80 e4       	ldi	r24, 0x40	; 64
     9b4:	81 83       	std	Z+1, r24	; 0x01
     9b6:	80 81       	ld	r24, Z
     9b8:	be 01       	movw	r22, r28
     9ba:	6f 5f       	subi	r22, 0xFF	; 255
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9be:	80 ea       	ldi	r24, 0xA0	; 160
     9c0:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9c2:	5b d7       	rcall	.+3766   	; 0x187a <usart_spi_deselect_device>
     9c4:	8b e2       	ldi	r24, 0x2B	; 43
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	be 01       	movw	r22, r28
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	80 ea       	ldi	r24, 0xA0	; 160
     9d0:	99 e0       	ldi	r25, 0x09	; 9
     9d2:	3d d7       	rcall	.+3706   	; 0x184e <usart_spi_select_device>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9d6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     9da:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9dc:	f9 e0       	ldi	r31, 0x09	; 9
     9de:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9e0:	85 ff       	sbrs	r24, 5
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <st7565r_init+0x2ca>
     9e4:	81 e8       	ldi	r24, 0x81	; 129
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9e6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     9ea:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9ec:	f9 e0       	ldi	r31, 0x09	; 9
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9f0:	86 ff       	sbrs	r24, 6
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <st7565r_init+0x2da>
     9f4:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9f6:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9f8:	80 e4       	ldi	r24, 0x40	; 64
     9fa:	81 83       	std	Z+1, r24	; 0x01
     9fc:	80 81       	ld	r24, Z
     9fe:	be 01       	movw	r22, r28
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a04:	80 ea       	ldi	r24, 0xA0	; 160
     a06:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a08:	38 d7       	rcall	.+3696   	; 0x187a <usart_spi_deselect_device>
     a0a:	8b e2       	ldi	r24, 0x2B	; 43
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	be 01       	movw	r22, r28
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	80 ea       	ldi	r24, 0xA0	; 160
     a16:	99 e0       	ldi	r25, 0x09	; 9
     a18:	1a d7       	rcall	.+3636   	; 0x184e <usart_spi_select_device>
     a1a:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a1c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a20:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a22:	f9 e0       	ldi	r31, 0x09	; 9
     a24:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a26:	85 ff       	sbrs	r24, 5
     a28:	fd cf       	rjmp	.-6      	; 0xa24 <st7565r_init+0x310>
     a2a:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a2c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a30:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a32:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a34:	81 81       	ldd	r24, Z+1	; 0x01
     a36:	86 ff       	sbrs	r24, 6
     a38:	fd cf       	rjmp	.-6      	; 0xa34 <st7565r_init+0x320>
     a3a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a3c:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a3e:	80 e4       	ldi	r24, 0x40	; 64
     a40:	81 83       	std	Z+1, r24	; 0x01
     a42:	80 81       	ld	r24, Z
     a44:	be 01       	movw	r22, r28
     a46:	6f 5f       	subi	r22, 0xFF	; 255
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a4a:	80 ea       	ldi	r24, 0xA0	; 160
     a4c:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a4e:	15 d7       	rcall	.+3626   	; 0x187a <usart_spi_deselect_device>
     a50:	8b e2       	ldi	r24, 0x2B	; 43
     a52:	89 83       	std	Y+1, r24	; 0x01
     a54:	be 01       	movw	r22, r28
     a56:	6f 5f       	subi	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	80 ea       	ldi	r24, 0xA0	; 160
     a5c:	99 e0       	ldi	r25, 0x09	; 9
     a5e:	f7 d6       	rcall	.+3566   	; 0x184e <usart_spi_select_device>
     a60:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a62:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a66:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a68:	f9 e0       	ldi	r31, 0x09	; 9
     a6a:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a6c:	85 ff       	sbrs	r24, 5
     a6e:	fd cf       	rjmp	.-6      	; 0xa6a <st7565r_init+0x356>
     a70:	8f ea       	ldi	r24, 0xAF	; 175
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a72:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a76:	e0 ea       	ldi	r30, 0xA0	; 160
     a78:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a7a:	81 81       	ldd	r24, Z+1	; 0x01
     a7c:	86 ff       	sbrs	r24, 6
     a7e:	fd cf       	rjmp	.-6      	; 0xa7a <st7565r_init+0x366>
     a80:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a82:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a84:	80 e4       	ldi	r24, 0x40	; 64
     a86:	81 83       	std	Z+1, r24	; 0x01
     a88:	80 81       	ld	r24, Z
     a8a:	be 01       	movw	r22, r28
     a8c:	6f 5f       	subi	r22, 0xFF	; 255
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	80 ea       	ldi	r24, 0xA0	; 160
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     a92:	99 e0       	ldi	r25, 0x09	; 9
     a94:	f2 d6       	rcall	.+3556   	; 0x187a <usart_spi_deselect_device>
     a96:	0f 90       	pop	r0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	bf 90       	pop	r11
     aaa:	08 95       	ret

00000aac <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	1f 92       	push	r1
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	08 2f       	mov	r16, r24
     abe:	f6 2e       	mov	r15, r22
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     ac0:	14 2f       	mov	r17, r20
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     ac2:	f6 d6       	rcall	.+3564   	; 0x18b0 <gfx_mono_framebuffer_put_byte>
     ac4:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     ac6:	00 6b       	ori	r16, 0xB0	; 176
     ac8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     aca:	89 83       	std	Y+1, r24	; 0x01
     acc:	be 01       	movw	r22, r28
     ace:	6f 5f       	subi	r22, 0xFF	; 255
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	80 ea       	ldi	r24, 0xA0	; 160
     ad4:	99 e0       	ldi	r25, 0x09	; 9
     ad6:	bb d6       	rcall	.+3446   	; 0x184e <usart_spi_select_device>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     ade:	e0 ea       	ldi	r30, 0xA0	; 160
     ae0:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	95 ff       	sbrs	r25, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ae6:	fd cf       	rjmp	.-6      	; 0xae2 <gfx_mono_st7565r_put_byte+0x36>
     ae8:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     aec:	e0 ea       	ldi	r30, 0xA0	; 160
     aee:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     af0:	81 81       	ldd	r24, Z+1	; 0x01
     af2:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     af4:	fd cf       	rjmp	.-6      	; 0xaf0 <gfx_mono_st7565r_put_byte+0x44>
     af6:	e0 ea       	ldi	r30, 0xA0	; 160
     af8:	f9 e0       	ldi	r31, 0x09	; 9
     afa:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     afc:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     afe:	80 81       	ld	r24, Z
     b00:	be 01       	movw	r22, r28
     b02:	6f 5f       	subi	r22, 0xFF	; 255
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	80 ea       	ldi	r24, 0xA0	; 160
     b08:	99 e0       	ldi	r25, 0x09	; 9
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     b0a:	b7 d6       	rcall	.+3438   	; 0x187a <usart_spi_deselect_device>
     b0c:	0f 2d       	mov	r16, r15
     b0e:	0f 77       	andi	r16, 0x7F	; 127
     b10:	02 95       	swap	r16
     b12:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b14:	00 61       	ori	r16, 0x10	; 16
     b16:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b18:	89 83       	std	Y+1, r24	; 0x01
     b1a:	be 01       	movw	r22, r28
     b1c:	6f 5f       	subi	r22, 0xFF	; 255
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	80 ea       	ldi	r24, 0xA0	; 160
     b22:	99 e0       	ldi	r25, 0x09	; 9
     b24:	94 d6       	rcall	.+3368   	; 0x184e <usart_spi_select_device>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b2c:	e0 ea       	ldi	r30, 0xA0	; 160
     b2e:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b30:	81 81       	ldd	r24, Z+1	; 0x01
     b32:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <gfx_mono_st7565r_put_byte+0x84>
     b36:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b3a:	e0 ea       	ldi	r30, 0xA0	; 160
     b3c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b3e:	81 81       	ldd	r24, Z+1	; 0x01
     b40:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b42:	fd cf       	rjmp	.-6      	; 0xb3e <gfx_mono_st7565r_put_byte+0x92>
     b44:	e0 ea       	ldi	r30, 0xA0	; 160
     b46:	f9 e0       	ldi	r31, 0x09	; 9
     b48:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b4a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b4c:	80 81       	ld	r24, Z
     b4e:	be 01       	movw	r22, r28
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	80 ea       	ldi	r24, 0xA0	; 160
     b56:	99 e0       	ldi	r25, 0x09	; 9
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     b58:	90 d6       	rcall	.+3360   	; 0x187a <usart_spi_deselect_device>
     b5a:	0f 2d       	mov	r16, r15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b5c:	0f 70       	andi	r16, 0x0F	; 15
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b5e:	8b e2       	ldi	r24, 0x2B	; 43
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	be 01       	movw	r22, r28
     b64:	6f 5f       	subi	r22, 0xFF	; 255
     b66:	7f 4f       	sbci	r23, 0xFF	; 255
     b68:	80 ea       	ldi	r24, 0xA0	; 160
     b6a:	99 e0       	ldi	r25, 0x09	; 9
     b6c:	70 d6       	rcall	.+3296   	; 0x184e <usart_spi_select_device>
     b6e:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b70:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     b74:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b76:	f9 e0       	ldi	r31, 0x09	; 9
     b78:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b7a:	85 ff       	sbrs	r24, 5
     b7c:	fd cf       	rjmp	.-6      	; 0xb78 <gfx_mono_st7565r_put_byte+0xcc>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b7e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     b82:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b84:	f9 e0       	ldi	r31, 0x09	; 9
     b86:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b88:	86 ff       	sbrs	r24, 6
     b8a:	fd cf       	rjmp	.-6      	; 0xb86 <gfx_mono_st7565r_put_byte+0xda>
     b8c:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b8e:	f9 e0       	ldi	r31, 0x09	; 9
     b90:	80 e4       	ldi	r24, 0x40	; 64
     b92:	81 83       	std	Z+1, r24	; 0x01
     b94:	80 81       	ld	r24, Z
     b96:	be 01       	movw	r22, r28
     b98:	6f 5f       	subi	r22, 0xFF	; 255
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b9c:	80 ea       	ldi	r24, 0xA0	; 160
     b9e:	99 e0       	ldi	r25, 0x09	; 9
     ba0:	6c d6       	rcall	.+3288   	; 0x187a <usart_spi_deselect_device>
     ba2:	8b e2       	ldi	r24, 0x2B	; 43
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	be 01       	movw	r22, r28
     ba8:	6f 5f       	subi	r22, 0xFF	; 255
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     baa:	7f 4f       	sbci	r23, 0xFF	; 255
     bac:	80 ea       	ldi	r24, 0xA0	; 160
     bae:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     bb0:	4e d6       	rcall	.+3228   	; 0x184e <usart_spi_select_device>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     bb8:	e0 ea       	ldi	r30, 0xA0	; 160
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     bba:	f9 e0       	ldi	r31, 0x09	; 9
     bbc:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     bbe:	85 ff       	sbrs	r24, 5
     bc0:	fd cf       	rjmp	.-6      	; 0xbbc <gfx_mono_st7565r_put_byte+0x110>
     bc2:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     bc6:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     bc8:	f9 e0       	ldi	r31, 0x09	; 9
     bca:	81 81       	ldd	r24, Z+1	; 0x01
     bcc:	86 ff       	sbrs	r24, 6
     bce:	fd cf       	rjmp	.-6      	; 0xbca <gfx_mono_st7565r_put_byte+0x11e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     bd0:	e0 ea       	ldi	r30, 0xA0	; 160
     bd2:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     bd4:	80 e4       	ldi	r24, 0x40	; 64
     bd6:	81 83       	std	Z+1, r24	; 0x01
     bd8:	80 81       	ld	r24, Z
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     be0:	be 01       	movw	r22, r28

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     be2:	6f 5f       	subi	r22, 0xFF	; 255
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	80 ea       	ldi	r24, 0xA0	; 160
     be8:	99 e0       	ldi	r25, 0x09	; 9
     bea:	47 d6       	rcall	.+3214   	; 0x187a <usart_spi_deselect_device>
     bec:	0f 90       	pop	r0
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	08 95       	ret

00000bfa <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	1f 92       	push	r1
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     c08:	88 e7       	ldi	r24, 0x78	; 120
     c0a:	90 e2       	ldi	r25, 0x20	; 32
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     c0c:	4c d6       	rcall	.+3224   	; 0x18a6 <gfx_mono_set_framebuffer>
     c0e:	82 dd       	rcall	.-1276   	; 0x714 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c10:	8b e2       	ldi	r24, 0x2B	; 43
     c12:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c14:	be 01       	movw	r22, r28
     c16:	6f 5f       	subi	r22, 0xFF	; 255
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	80 ea       	ldi	r24, 0xA0	; 160
     c1c:	99 e0       	ldi	r25, 0x09	; 9
     c1e:	17 d6       	rcall	.+3118   	; 0x184e <usart_spi_select_device>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c26:	e0 ea       	ldi	r30, 0xA0	; 160
     c28:	f9 e0       	ldi	r31, 0x09	; 9
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c2c:	85 ff       	sbrs	r24, 5
     c2e:	fd cf       	rjmp	.-6      	; 0xc2a <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c30:	80 e4       	ldi	r24, 0x40	; 64
     c32:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c36:	e0 ea       	ldi	r30, 0xA0	; 160
     c38:	f9 e0       	ldi	r31, 0x09	; 9
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c3c:	86 ff       	sbrs	r24, 6
     c3e:	fd cf       	rjmp	.-6      	; 0xc3a <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c40:	e0 ea       	ldi	r30, 0xA0	; 160
     c42:	f9 e0       	ldi	r31, 0x09	; 9
     c44:	80 e4       	ldi	r24, 0x40	; 64
     c46:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c48:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c4a:	be 01       	movw	r22, r28
     c4c:	6f 5f       	subi	r22, 0xFF	; 255
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255
     c50:	80 ea       	ldi	r24, 0xA0	; 160
     c52:	99 e0       	ldi	r25, 0x09	; 9
     c54:	12 d6       	rcall	.+3108   	; 0x187a <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c56:	00 e0       	ldi	r16, 0x00	; 0
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     c58:	0a c0       	rjmp	.+20     	; 0xc6e <gfx_mono_st7565r_init+0x74>
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	61 2f       	mov	r22, r17
     c5e:	80 2f       	mov	r24, r16
     c60:	25 df       	rcall	.-438    	; 0xaac <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     c62:	1f 5f       	subi	r17, 0xFF	; 255
     c64:	10 38       	cpi	r17, 0x80	; 128
     c66:	c9 f7       	brne	.-14     	; 0xc5a <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c68:	0f 5f       	subi	r16, 0xFF	; 255
     c6a:	04 30       	cpi	r16, 0x04	; 4
     c6c:	11 f0       	breq	.+4      	; 0xc72 <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     c6e:	10 e0       	ldi	r17, 0x00	; 0
     c70:	f4 cf       	rjmp	.-24     	; 0xc5a <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     c72:	0f 90       	pop	r0
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	08 95       	ret

00000c7e <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     c88:	88 23       	and	r24, r24
     c8a:	4c f1       	brlt	.+82     	; 0xcde <gfx_mono_st7565r_draw_pixel+0x60>
     c8c:	60 32       	cpi	r22, 0x20	; 32
     c8e:	38 f5       	brcc	.+78     	; 0xcde <gfx_mono_st7565r_draw_pixel+0x60>
     c90:	d4 2f       	mov	r29, r20
     c92:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     c94:	f6 2e       	mov	r15, r22
     c96:	f6 94       	lsr	r15
     c98:	f6 94       	lsr	r15
     c9a:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	88 e0       	ldi	r24, 0x08	; 8
     ca0:	f8 9e       	mul	r15, r24
     ca2:	60 19       	sub	r22, r0
     ca4:	71 09       	sbc	r23, r1
     ca6:	11 24       	eor	r1, r1
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	8c 01       	movw	r16, r24
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <gfx_mono_st7565r_draw_pixel+0x36>
     cb0:	00 0f       	add	r16, r16
     cb2:	11 1f       	adc	r17, r17
     cb4:	6a 95       	dec	r22
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     cb8:	6c 2f       	mov	r22, r28
     cba:	8f 2d       	mov	r24, r15
     cbc:	07 d6       	rcall	.+3086   	; 0x18cc <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     cbe:	d1 30       	cpi	r29, 0x01	; 1
     cc0:	21 f0       	breq	.+8      	; 0xcca <gfx_mono_st7565r_draw_pixel+0x4c>
     cc2:	28 f0       	brcs	.+10     	; 0xcce <gfx_mono_st7565r_draw_pixel+0x50>
     cc4:	d2 30       	cpi	r29, 0x02	; 2
     cc6:	31 f0       	breq	.+12     	; 0xcd4 <gfx_mono_st7565r_draw_pixel+0x56>
     cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     cca:	80 2b       	or	r24, r16
		break;
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     cce:	00 95       	com	r16
     cd0:	80 23       	and	r24, r16
		break;
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     cd4:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     cd6:	48 2f       	mov	r20, r24
     cd8:	6c 2f       	mov	r22, r28
     cda:	8f 2d       	mov	r24, r15
     cdc:	e7 de       	rcall	.-562    	; 0xaac <gfx_mono_st7565r_put_byte>
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	08 95       	ret

00000cea <gfx_mono_st7565r_get_byte>:
 * \code
	data = gfx_mono_st7565r_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     cea:	f0 c5       	rjmp	.+3040   	; 0x18cc <gfx_mono_framebuffer_get_byte>
     cec:	08 95       	ret

00000cee <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	1f 92       	push	r1
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cf8:	2f b7       	in	r18, 0x3f	; 63
     cfa:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     cfc:	f8 94       	cli
	return flags;
     cfe:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     d00:	28 2f       	mov	r18, r24
     d02:	39 2f       	mov	r19, r25
     d04:	21 15       	cp	r18, r1
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	38 07       	cpc	r19, r24
     d0a:	29 f4       	brne	.+10     	; 0xd16 <adc_set_callback+0x28>
		adca_callback = callback;
     d0c:	60 93 8f 23 	sts	0x238F, r22	; 0x80238f <adca_callback>
     d10:	70 93 90 23 	sts	0x2390, r23	; 0x802390 <adca_callback+0x1>
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     d16:	20 34       	cpi	r18, 0x40	; 64
     d18:	32 40       	sbci	r19, 0x02	; 2
     d1a:	21 f4       	brne	.+8      	; 0xd24 <adc_set_callback+0x36>
		adcb_callback = callback;
     d1c:	60 93 8d 23 	sts	0x238D, r22	; 0x80238d <adcb_callback>
     d20:	70 93 8e 23 	sts	0x238E, r23	; 0x80238e <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d24:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     d26:	0f 90       	pop	r0
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     d2e:	81 15       	cp	r24, r1
     d30:	22 e0       	ldi	r18, 0x02	; 2
     d32:	92 07       	cpc	r25, r18
     d34:	61 f4       	brne	.+24     	; 0xd4e <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     d36:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <adca_enable_count>
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	98 0f       	add	r25, r24
     d3e:	90 93 79 22 	sts	0x2279, r25	; 0x802279 <adca_enable_count>
     d42:	81 11       	cpse	r24, r1
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d46:	62 e0       	ldi	r22, 0x02	; 2
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	4a c6       	rjmp	.+3220   	; 0x19e0 <sysclk_enable_module>
     d4c:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     d4e:	80 34       	cpi	r24, 0x40	; 64
     d50:	92 40       	sbci	r25, 0x02	; 2
     d52:	59 f4       	brne	.+22     	; 0xd6a <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     d54:	80 91 78 22 	lds	r24, 0x2278	; 0x802278 <adcb_enable_count>
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	98 0f       	add	r25, r24
     d5c:	90 93 78 22 	sts	0x2278, r25	; 0x802278 <adcb_enable_count>
     d60:	81 11       	cpse	r24, r1
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d64:	62 e0       	ldi	r22, 0x02	; 2
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	3b c6       	rjmp	.+3190   	; 0x19e0 <sysclk_enable_module>
     d6a:	08 95       	ret

00000d6c <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     d6c:	81 15       	cp	r24, r1
     d6e:	22 e0       	ldi	r18, 0x02	; 2
     d70:	92 07       	cpc	r25, r18
     d72:	59 f4       	brne	.+22     	; 0xd8a <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     d74:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <adca_enable_count>
     d78:	81 50       	subi	r24, 0x01	; 1
     d7a:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <adca_enable_count>
     d7e:	81 11       	cpse	r24, r1
     d80:	11 c0       	rjmp	.+34     	; 0xda4 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d82:	62 e0       	ldi	r22, 0x02	; 2
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	42 c6       	rjmp	.+3204   	; 0x1a0c <sysclk_disable_module>
     d88:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	92 40       	sbci	r25, 0x02	; 2
     d8e:	51 f4       	brne	.+20     	; 0xda4 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     d90:	80 91 78 22 	lds	r24, 0x2278	; 0x802278 <adcb_enable_count>
     d94:	81 50       	subi	r24, 0x01	; 1
     d96:	80 93 78 22 	sts	0x2278, r24	; 0x802278 <adcb_enable_count>
     d9a:	81 11       	cpse	r24, r1
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d9e:	62 e0       	ldi	r22, 0x02	; 2
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	34 c6       	rjmp	.+3176   	; 0x1a0c <sysclk_disable_module>
     da4:	08 95       	ret

00000da6 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	1f 92       	push	r1
     db2:	1f 92       	push	r1
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     dba:	8f b7       	in	r24, 0x3f	; 63
     dbc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     dbe:	f8 94       	cli
	return flags;
     dc0:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     dc2:	c7 01       	movw	r24, r14
     dc4:	b4 df       	rcall	.-152    	; 0xd2e <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     dc6:	f7 01       	movw	r30, r14
     dc8:	80 81       	ld	r24, Z
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dce:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     dd0:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <sleepmgr_locks+0x1>
     dd4:	8f 3f       	cpi	r24, 0xFF	; 255
     dd6:	09 f4       	brne	.+2      	; 0xdda <adc_enable+0x34>
     dd8:	ff cf       	rjmp	.-2      	; 0xdd8 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     dda:	8f b7       	in	r24, 0x3f	; 63
     ddc:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     dde:	f8 94       	cli
	return flags;
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     de2:	e1 e9       	ldi	r30, 0x91	; 145
     de4:	f3 e2       	ldi	r31, 0x23	; 35
     de6:	81 81       	ldd	r24, Z+1	; 0x01
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dec:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	08 95       	ret

00000dfe <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	0b b6       	in	r0, 0x3b	; 59
     e0a:	0f 92       	push	r0
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     e24:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     e28:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     e2c:	e0 91 8f 23 	lds	r30, 0x238F	; 0x80238f <adca_callback>
     e30:	f0 91 90 23 	lds	r31, 0x2390	; 0x802390 <adca_callback+0x1>
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	19 95       	eicall
}
     e3c:	ff 91       	pop	r31
     e3e:	ef 91       	pop	r30
     e40:	bf 91       	pop	r27
     e42:	af 91       	pop	r26
     e44:	9f 91       	pop	r25
     e46:	8f 91       	pop	r24
     e48:	7f 91       	pop	r23
     e4a:	6f 91       	pop	r22
     e4c:	5f 91       	pop	r21
     e4e:	4f 91       	pop	r20
     e50:	3f 91       	pop	r19
     e52:	2f 91       	pop	r18
     e54:	0f 90       	pop	r0
     e56:	0b be       	out	0x3b, r0	; 59
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	0b b6       	in	r0, 0x3b	; 59
     e6e:	0f 92       	push	r0
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     e88:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     e8c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     e90:	e0 91 8f 23 	lds	r30, 0x238F	; 0x80238f <adca_callback>
     e94:	f0 91 90 23 	lds	r31, 0x2390	; 0x802390 <adca_callback+0x1>
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	19 95       	eicall
}
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0b be       	out	0x3b, r0	; 59
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	0b b6       	in	r0, 0x3b	; 59
     ed2:	0f 92       	push	r0
     ed4:	2f 93       	push	r18
     ed6:	3f 93       	push	r19
     ed8:	4f 93       	push	r20
     eda:	5f 93       	push	r21
     edc:	6f 93       	push	r22
     ede:	7f 93       	push	r23
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	af 93       	push	r26
     ee6:	bf 93       	push	r27
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     eec:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     ef0:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     ef4:	e0 91 8f 23 	lds	r30, 0x238F	; 0x80238f <adca_callback>
     ef8:	f0 91 90 23 	lds	r31, 0x2390	; 0x802390 <adca_callback+0x1>
     efc:	64 e0       	ldi	r22, 0x04	; 4
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	19 95       	eicall
}
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0b be       	out	0x3b, r0	; 59
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     f50:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     f54:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     f58:	e0 91 8f 23 	lds	r30, 0x238F	; 0x80238f <adca_callback>
     f5c:	f0 91 90 23 	lds	r31, 0x2390	; 0x802390 <adca_callback+0x1>
     f60:	68 e0       	ldi	r22, 0x08	; 8
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	19 95       	eicall
}
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	0f 90       	pop	r0
     f82:	0b be       	out	0x3b, r0	; 59
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	0b b6       	in	r0, 0x3b	; 59
     f9a:	0f 92       	push	r0
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     fb4:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     fb8:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     fbc:	e0 91 8d 23 	lds	r30, 0x238D	; 0x80238d <adcb_callback>
     fc0:	f0 91 8e 23 	lds	r31, 0x238E	; 0x80238e <adcb_callback+0x1>
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	80 e4       	ldi	r24, 0x40	; 64
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	19 95       	eicall
}
     fcc:	ff 91       	pop	r31
     fce:	ef 91       	pop	r30
     fd0:	bf 91       	pop	r27
     fd2:	af 91       	pop	r26
     fd4:	9f 91       	pop	r25
     fd6:	8f 91       	pop	r24
     fd8:	7f 91       	pop	r23
     fda:	6f 91       	pop	r22
     fdc:	5f 91       	pop	r21
     fde:	4f 91       	pop	r20
     fe0:	3f 91       	pop	r19
     fe2:	2f 91       	pop	r18
     fe4:	0f 90       	pop	r0
     fe6:	0b be       	out	0x3b, r0	; 59
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	0b b6       	in	r0, 0x3b	; 59
     ffe:	0f 92       	push	r0
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1018:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    101c:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    1020:	e0 91 8d 23 	lds	r30, 0x238D	; 0x80238d <adcb_callback>
    1024:	f0 91 8e 23 	lds	r31, 0x238E	; 0x80238e <adcb_callback+0x1>
    1028:	62 e0       	ldi	r22, 0x02	; 2
    102a:	80 e4       	ldi	r24, 0x40	; 64
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	19 95       	eicall
}
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	0b be       	out	0x3b, r0	; 59
    104c:	0f 90       	pop	r0
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	0f 90       	pop	r0
    1052:	1f 90       	pop	r1
    1054:	18 95       	reti

00001056 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	0b b6       	in	r0, 0x3b	; 59
    1062:	0f 92       	push	r0
    1064:	2f 93       	push	r18
    1066:	3f 93       	push	r19
    1068:	4f 93       	push	r20
    106a:	5f 93       	push	r21
    106c:	6f 93       	push	r22
    106e:	7f 93       	push	r23
    1070:	8f 93       	push	r24
    1072:	9f 93       	push	r25
    1074:	af 93       	push	r26
    1076:	bf 93       	push	r27
    1078:	ef 93       	push	r30
    107a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    107c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    1080:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    1084:	e0 91 8d 23 	lds	r30, 0x238D	; 0x80238d <adcb_callback>
    1088:	f0 91 8e 23 	lds	r31, 0x238E	; 0x80238e <adcb_callback+0x1>
    108c:	64 e0       	ldi	r22, 0x04	; 4
    108e:	80 e4       	ldi	r24, 0x40	; 64
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	19 95       	eicall
}
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0b be       	out	0x3b, r0	; 59
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti

000010ba <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    10ba:	1f 92       	push	r1
    10bc:	0f 92       	push	r0
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	0f 92       	push	r0
    10c2:	11 24       	eor	r1, r1
    10c4:	0b b6       	in	r0, 0x3b	; 59
    10c6:	0f 92       	push	r0
    10c8:	2f 93       	push	r18
    10ca:	3f 93       	push	r19
    10cc:	4f 93       	push	r20
    10ce:	5f 93       	push	r21
    10d0:	6f 93       	push	r22
    10d2:	7f 93       	push	r23
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	af 93       	push	r26
    10da:	bf 93       	push	r27
    10dc:	ef 93       	push	r30
    10de:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    10e0:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    10e4:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    10e8:	e0 91 8d 23 	lds	r30, 0x238D	; 0x80238d <adcb_callback>
    10ec:	f0 91 8e 23 	lds	r31, 0x238E	; 0x80238e <adcb_callback+0x1>
    10f0:	68 e0       	ldi	r22, 0x08	; 8
    10f2:	80 e4       	ldi	r24, 0x40	; 64
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	19 95       	eicall
}
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0b be       	out	0x3b, r0	; 59
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	1f 92       	push	r1
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	8c 01       	movw	r16, r24
    1138:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    113a:	81 15       	cp	r24, r1
    113c:	22 e0       	ldi	r18, 0x02	; 2
    113e:	92 07       	cpc	r25, r18
    1140:	81 f4       	brne	.+32     	; 0x1162 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1142:	61 e2       	ldi	r22, 0x21	; 33
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	0e 94 b5 13 	call	0x276a	; 0x276a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    114c:	c8 2e       	mov	r12, r24
    114e:	d1 2c       	mov	r13, r1
    1150:	60 e2       	ldi	r22, 0x20	; 32
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	0e 94 b5 13 	call	0x276a	; 0x276a <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    115a:	dc 2c       	mov	r13, r12
    115c:	cc 24       	eor	r12, r12
    115e:	c8 2a       	or	r12, r24
    1160:	12 c0       	rjmp	.+36     	; 0x1186 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1162:	80 34       	cpi	r24, 0x40	; 64
    1164:	92 40       	sbci	r25, 0x02	; 2
    1166:	d1 f5       	brne	.+116    	; 0x11dc <adc_write_configuration+0xbe>
    1168:	65 e2       	ldi	r22, 0x25	; 37
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	0e 94 b5 13 	call	0x276a	; 0x276a <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1172:	c8 2e       	mov	r12, r24
    1174:	d1 2c       	mov	r13, r1
    1176:	64 e2       	ldi	r22, 0x24	; 36
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	0e 94 b5 13 	call	0x276a	; 0x276a <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1180:	dc 2c       	mov	r13, r12
    1182:	cc 24       	eor	r12, r12
    1184:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1186:	8f b7       	in	r24, 0x3f	; 63
    1188:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    118a:	f8 94       	cli
	return flags;
    118c:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    118e:	c8 01       	movw	r24, r16
    1190:	ce dd       	rcall	.-1124   	; 0xd2e <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1192:	f8 01       	movw	r30, r16
    1194:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	90 83       	st	Z, r25
	adc->CAL = cal;
    119a:	c4 86       	std	Z+12, r12	; 0x0c
    119c:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    119e:	f7 01       	movw	r30, r14
    11a0:	25 81       	ldd	r18, Z+5	; 0x05
    11a2:	36 81       	ldd	r19, Z+6	; 0x06
    11a4:	f8 01       	movw	r30, r16
    11a6:	20 8f       	std	Z+24, r18	; 0x18
    11a8:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    11aa:	f7 01       	movw	r30, r14
    11ac:	92 81       	ldd	r25, Z+2	; 0x02
    11ae:	f8 01       	movw	r30, r16
    11b0:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    11b2:	f7 01       	movw	r30, r14
    11b4:	94 81       	ldd	r25, Z+4	; 0x04
    11b6:	f8 01       	movw	r30, r16
    11b8:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    11ba:	f7 01       	movw	r30, r14
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	f8 01       	movw	r30, r16
    11c0:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    11c2:	f7 01       	movw	r30, r14
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	f8 01       	movw	r30, r16
    11c8:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    11ca:	81 70       	andi	r24, 0x01	; 1
    11cc:	f7 01       	movw	r30, r14
    11ce:	90 81       	ld	r25, Z
    11d0:	89 2b       	or	r24, r25
    11d2:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    11d4:	80 83       	st	Z, r24
    11d6:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11d8:	c9 dd       	rcall	.-1134   	; 0xd6c <adc_disable_clock>

	cpu_irq_restore(flags);
}
    11da:	bf be       	out	0x3f, r11	; 63
    11dc:	0f 90       	pop	r0
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	08 95       	ret

000011f2 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	1f 92       	push	r1
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	8c 01       	movw	r16, r24
    1208:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    120a:	8f b7       	in	r24, 0x3f	; 63
    120c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    120e:	f8 94       	cli
	return flags;
    1210:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1212:	c8 01       	movw	r24, r16
    1214:	8c dd       	rcall	.-1256   	; 0xd2e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1216:	f8 01       	movw	r30, r16
    1218:	80 81       	ld	r24, Z
    121a:	80 7c       	andi	r24, 0xC0	; 192
    121c:	f7 01       	movw	r30, r14
    121e:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1220:	f8 01       	movw	r30, r16
    1222:	80 8d       	ldd	r24, Z+24	; 0x18
    1224:	91 8d       	ldd	r25, Z+25	; 0x19
    1226:	f7 01       	movw	r30, r14
    1228:	85 83       	std	Z+5, r24	; 0x05
    122a:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    122c:	f8 01       	movw	r30, r16
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	f7 01       	movw	r30, r14
    1232:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1234:	f8 01       	movw	r30, r16
    1236:	84 81       	ldd	r24, Z+4	; 0x04
    1238:	f7 01       	movw	r30, r14
    123a:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    123c:	f8 01       	movw	r30, r16
    123e:	83 81       	ldd	r24, Z+3	; 0x03
    1240:	f7 01       	movw	r30, r14
    1242:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1244:	f8 01       	movw	r30, r16
    1246:	81 81       	ldd	r24, Z+1	; 0x01
    1248:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    124a:	81 83       	std	Z+1, r24	; 0x01
    124c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    124e:	8e dd       	rcall	.-1252   	; 0xd6c <adc_disable_clock>

	cpu_irq_restore(flags);
}
    1250:	df be       	out	0x3f, r13	; 63
    1252:	0f 90       	pop	r0
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	08 95       	ret

00001264 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1264:	af 92       	push	r10
    1266:	bf 92       	push	r11
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	1f 92       	push	r1
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	6c 01       	movw	r12, r24
    1280:	b6 2e       	mov	r11, r22
    1282:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1284:	86 2f       	mov	r24, r22
    1286:	83 70       	andi	r24, 0x03	; 3
    1288:	29 f4       	brne	.+10     	; 0x1294 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    128a:	96 2f       	mov	r25, r22
    128c:	96 95       	lsr	r25
    128e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1294:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1296:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1298:	90 ff       	sbrs	r25, 0
		index++;
    129a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    129c:	86 01       	movw	r16, r12
    129e:	00 5e       	subi	r16, 0xE0	; 224
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	98 e0       	ldi	r25, 0x08	; 8
    12a4:	89 9f       	mul	r24, r25
    12a6:	00 0d       	add	r16, r0
    12a8:	11 1d       	adc	r17, r1
    12aa:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12ac:	8f b7       	in	r24, 0x3f	; 63
    12ae:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    12b0:	f8 94       	cli
	return flags;
    12b2:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    12b4:	c6 01       	movw	r24, r12
    12b6:	3b dd       	rcall	.-1418   	; 0xd2e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    12b8:	f7 01       	movw	r30, r14
    12ba:	80 81       	ld	r24, Z
    12bc:	f8 01       	movw	r30, r16
    12be:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    12c0:	f7 01       	movw	r30, r14
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	f8 01       	movw	r30, r16
    12c6:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    12c8:	f7 01       	movw	r30, r14
    12ca:	81 81       	ldd	r24, Z+1	; 0x01
    12cc:	f8 01       	movw	r30, r16
    12ce:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    12d0:	b0 fe       	sbrs	r11, 0
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    12d4:	f7 01       	movw	r30, r14
    12d6:	83 81       	ldd	r24, Z+3	; 0x03
    12d8:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    12da:	86 83       	std	Z+6, r24	; 0x06
    12dc:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12de:	46 dd       	rcall	.-1396   	; 0xd6c <adc_disable_clock>

	cpu_irq_restore(flags);
}
    12e0:	af be       	out	0x3f, r10	; 63
    12e2:	0f 90       	pop	r0
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	bf 90       	pop	r11
    12f6:	af 90       	pop	r10
    12f8:	08 95       	ret

000012fa <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	1f 92       	push	r1
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	6c 01       	movw	r12, r24
    1316:	b6 2e       	mov	r11, r22
    1318:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    131a:	86 2f       	mov	r24, r22
    131c:	83 70       	andi	r24, 0x03	; 3
    131e:	29 f4       	brne	.+10     	; 0x132a <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1320:	96 2f       	mov	r25, r22
    1322:	96 95       	lsr	r25
    1324:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	02 c0       	rjmp	.+4      	; 0x132e <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    132a:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    132c:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    132e:	90 ff       	sbrs	r25, 0
		index++;
    1330:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1332:	86 01       	movw	r16, r12
    1334:	00 5e       	subi	r16, 0xE0	; 224
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	98 e0       	ldi	r25, 0x08	; 8
    133a:	89 9f       	mul	r24, r25
    133c:	00 0d       	add	r16, r0
    133e:	11 1d       	adc	r17, r1
    1340:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1342:	8f b7       	in	r24, 0x3f	; 63
    1344:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1346:	f8 94       	cli
	return flags;
    1348:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    134a:	c6 01       	movw	r24, r12
    134c:	f0 dc       	rcall	.-1568   	; 0xd2e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    134e:	f8 01       	movw	r30, r16
    1350:	80 81       	ld	r24, Z
    1352:	f7 01       	movw	r30, r14
    1354:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1356:	f8 01       	movw	r30, r16
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	f7 01       	movw	r30, r14
    135c:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    135e:	f8 01       	movw	r30, r16
    1360:	81 81       	ldd	r24, Z+1	; 0x01
    1362:	f7 01       	movw	r30, r14
    1364:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1366:	b0 fe       	sbrs	r11, 0
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    136a:	f8 01       	movw	r30, r16
    136c:	86 81       	ldd	r24, Z+6	; 0x06
    136e:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    1370:	83 83       	std	Z+3, r24	; 0x03
    1372:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1374:	fb dc       	rcall	.-1546   	; 0xd6c <adc_disable_clock>

	cpu_irq_restore(flags);
}
    1376:	af be       	out	0x3f, r10	; 63
    1378:	0f 90       	pop	r0
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	bf 90       	pop	r11
    138c:	af 90       	pop	r10
    138e:	08 95       	ret

00001390 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1390:	cf 92       	push	r12
    1392:	df 92       	push	r13
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    13a2:	d9 01       	movw	r26, r18
    13a4:	c8 01       	movw	r24, r16
    13a6:	b6 95       	lsr	r27
    13a8:	a7 95       	ror	r26
    13aa:	97 95       	ror	r25
    13ac:	87 95       	ror	r24
    13ae:	48 17       	cp	r20, r24
    13b0:	59 07       	cpc	r21, r25
    13b2:	6a 07       	cpc	r22, r26
    13b4:	7b 07       	cpc	r23, r27
    13b6:	78 f4       	brcc	.+30     	; 0x13d6 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    13b8:	6a 01       	movw	r12, r20
    13ba:	7b 01       	movw	r14, r22
    13bc:	cc 0c       	add	r12, r12
    13be:	dd 1c       	adc	r13, r13
    13c0:	ee 1c       	adc	r14, r14
    13c2:	ff 1c       	adc	r15, r15
    13c4:	c9 01       	movw	r24, r18
    13c6:	b8 01       	movw	r22, r16
    13c8:	a7 01       	movw	r20, r14
    13ca:	96 01       	movw	r18, r12
    13cc:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__udivmodsi4>
    13d0:	21 50       	subi	r18, 0x01	; 1
    13d2:	31 09       	sbc	r19, r1
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    13da:	83 2f       	mov	r24, r19
    13dc:	8f 70       	andi	r24, 0x0F	; 15
    13de:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    13e0:	2e 83       	std	Y+6, r18	; 0x06
}
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	08 95       	ret

000013f4 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	1f 92       	push	r1
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	7c 01       	movw	r14, r24
    140a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	09 f4       	brne	.+2      	; 0x1412 <usart_init_spi+0x1e>
    1410:	b2 c1       	rjmp	.+868    	; 0x1776 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1412:	80 3c       	cpi	r24, 0xC0	; 192
    1414:	91 05       	cpc	r25, r1
    1416:	21 f4       	brne	.+8      	; 0x1420 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1418:	60 e1       	ldi	r22, 0x10	; 16
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	e1 d2       	rcall	.+1474   	; 0x19e0 <sysclk_enable_module>
    141e:	ab c1       	rjmp	.+854    	; 0x1776 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1420:	80 e8       	ldi	r24, 0x80	; 128
    1422:	e8 16       	cp	r14, r24
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	f8 06       	cpc	r15, r24
    1428:	21 f4       	brne	.+8      	; 0x1432 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    142a:	62 e0       	ldi	r22, 0x02	; 2
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	d8 d2       	rcall	.+1456   	; 0x19e0 <sysclk_enable_module>
    1430:	a2 c1       	rjmp	.+836    	; 0x1776 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1432:	e1 14       	cp	r14, r1
    1434:	e1 e0       	ldi	r30, 0x01	; 1
    1436:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1438:	21 f4       	brne	.+8      	; 0x1442 <usart_init_spi+0x4e>
    143a:	61 e0       	ldi	r22, 0x01	; 1
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	d0 d2       	rcall	.+1440   	; 0x19e0 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1440:	9a c1       	rjmp	.+820    	; 0x1776 <usart_init_spi+0x382>
    1442:	f0 e8       	ldi	r31, 0x80	; 128
    1444:	ef 16       	cp	r14, r31
    1446:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1448:	ff 06       	cpc	r15, r31
    144a:	21 f4       	brne	.+8      	; 0x1454 <usart_init_spi+0x60>
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	c7 d2       	rcall	.+1422   	; 0x19e0 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1452:	91 c1       	rjmp	.+802    	; 0x1776 <usart_init_spi+0x382>
    1454:	30 e9       	ldi	r19, 0x90	; 144
    1456:	e3 16       	cp	r14, r19
    1458:	33 e0       	ldi	r19, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    145a:	f3 06       	cpc	r15, r19
    145c:	21 f4       	brne	.+8      	; 0x1466 <usart_init_spi+0x72>
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	be d2       	rcall	.+1404   	; 0x19e0 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1464:	88 c1       	rjmp	.+784    	; 0x1776 <usart_init_spi+0x382>
    1466:	e1 14       	cp	r14, r1
    1468:	82 e0       	ldi	r24, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    146a:	f8 06       	cpc	r15, r24
    146c:	21 f4       	brne	.+8      	; 0x1476 <usart_init_spi+0x82>
    146e:	62 e0       	ldi	r22, 0x02	; 2
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	b6 d2       	rcall	.+1388   	; 0x19e0 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1474:	80 c1       	rjmp	.+768    	; 0x1776 <usart_init_spi+0x382>
    1476:	e0 e4       	ldi	r30, 0x40	; 64
    1478:	ee 16       	cp	r14, r30
    147a:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    147c:	fe 06       	cpc	r15, r30
    147e:	21 f4       	brne	.+8      	; 0x1488 <usart_init_spi+0x94>
    1480:	62 e0       	ldi	r22, 0x02	; 2
    1482:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1484:	ad d2       	rcall	.+1370   	; 0x19e0 <sysclk_enable_module>
    1486:	77 c1       	rjmp	.+750    	; 0x1776 <usart_init_spi+0x382>
    1488:	f0 e2       	ldi	r31, 0x20	; 32
    148a:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    148c:	f3 e0       	ldi	r31, 0x03	; 3
    148e:	ff 06       	cpc	r15, r31
    1490:	21 f4       	brne	.+8      	; 0x149a <usart_init_spi+0xa6>
    1492:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	a4 d2       	rcall	.+1352   	; 0x19e0 <sysclk_enable_module>
    1498:	6e c1       	rjmp	.+732    	; 0x1776 <usart_init_spi+0x382>
    149a:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    149c:	38 e0       	ldi	r19, 0x08	; 8
    149e:	f3 06       	cpc	r15, r19
    14a0:	21 f4       	brne	.+8      	; 0x14aa <usart_init_spi+0xb6>
    14a2:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	9c d2       	rcall	.+1336   	; 0x19e0 <sysclk_enable_module>
    14a8:	66 c1       	rjmp	.+716    	; 0x1776 <usart_init_spi+0x382>
    14aa:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    14ac:	89 e0       	ldi	r24, 0x09	; 9
    14ae:	f8 06       	cpc	r15, r24
    14b0:	21 f4       	brne	.+8      	; 0x14ba <usart_init_spi+0xc6>
    14b2:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	94 d2       	rcall	.+1320   	; 0x19e0 <sysclk_enable_module>
    14b8:	5e c1       	rjmp	.+700    	; 0x1776 <usart_init_spi+0x382>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    14ba:	e1 14       	cp	r14, r1
    14bc:	ea e0       	ldi	r30, 0x0A	; 10
    14be:	fe 06       	cpc	r15, r30
    14c0:	21 f4       	brne	.+8      	; 0x14ca <usart_init_spi+0xd6>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	85 e0       	ldi	r24, 0x05	; 5
    14c6:	8c d2       	rcall	.+1304   	; 0x19e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    14c8:	56 c1       	rjmp	.+684    	; 0x1776 <usart_init_spi+0x382>
    14ca:	e1 14       	cp	r14, r1
    14cc:	fb e0       	ldi	r31, 0x0B	; 11
    14ce:	ff 06       	cpc	r15, r31
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    14d0:	21 f4       	brne	.+8      	; 0x14da <usart_init_spi+0xe6>
    14d2:	61 e0       	ldi	r22, 0x01	; 1
    14d4:	86 e0       	ldi	r24, 0x06	; 6
    14d6:	84 d2       	rcall	.+1288   	; 0x19e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    14d8:	4e c1       	rjmp	.+668    	; 0x1776 <usart_init_spi+0x382>
    14da:	30 e4       	ldi	r19, 0x40	; 64
    14dc:	e3 16       	cp	r14, r19
    14de:	38 e0       	ldi	r19, 0x08	; 8
    14e0:	f3 06       	cpc	r15, r19
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    14e2:	21 f4       	brne	.+8      	; 0x14ec <usart_init_spi+0xf8>
    14e4:	62 e0       	ldi	r22, 0x02	; 2
    14e6:	83 e0       	ldi	r24, 0x03	; 3
    14e8:	7b d2       	rcall	.+1270   	; 0x19e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    14ea:	45 c1       	rjmp	.+650    	; 0x1776 <usart_init_spi+0x382>
    14ec:	80 e4       	ldi	r24, 0x40	; 64
    14ee:	e8 16       	cp	r14, r24
    14f0:	89 e0       	ldi	r24, 0x09	; 9
    14f2:	f8 06       	cpc	r15, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    14f4:	21 f4       	brne	.+8      	; 0x14fe <usart_init_spi+0x10a>
    14f6:	62 e0       	ldi	r22, 0x02	; 2
    14f8:	84 e0       	ldi	r24, 0x04	; 4
    14fa:	72 d2       	rcall	.+1252   	; 0x19e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    14fc:	3c c1       	rjmp	.+632    	; 0x1776 <usart_init_spi+0x382>
    14fe:	e0 e4       	ldi	r30, 0x40	; 64
    1500:	ee 16       	cp	r14, r30
    1502:	ea e0       	ldi	r30, 0x0A	; 10
    1504:	fe 06       	cpc	r15, r30
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1506:	21 f4       	brne	.+8      	; 0x1510 <usart_init_spi+0x11c>
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	85 e0       	ldi	r24, 0x05	; 5
    150c:	69 d2       	rcall	.+1234   	; 0x19e0 <sysclk_enable_module>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    150e:	33 c1       	rjmp	.+614    	; 0x1776 <usart_init_spi+0x382>
    1510:	f0 e9       	ldi	r31, 0x90	; 144
    1512:	ef 16       	cp	r14, r31
    1514:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1516:	ff 06       	cpc	r15, r31
    1518:	21 f4       	brne	.+8      	; 0x1522 <usart_init_spi+0x12e>
    151a:	64 e0       	ldi	r22, 0x04	; 4
    151c:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    151e:	60 d2       	rcall	.+1216   	; 0x19e0 <sysclk_enable_module>
    1520:	2a c1       	rjmp	.+596    	; 0x1776 <usart_init_spi+0x382>
    1522:	30 e9       	ldi	r19, 0x90	; 144
    1524:	e3 16       	cp	r14, r19
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1526:	39 e0       	ldi	r19, 0x09	; 9
    1528:	f3 06       	cpc	r15, r19
    152a:	21 f4       	brne	.+8      	; 0x1534 <usart_init_spi+0x140>
    152c:	64 e0       	ldi	r22, 0x04	; 4
    152e:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1530:	57 d2       	rcall	.+1198   	; 0x19e0 <sysclk_enable_module>
    1532:	21 c1       	rjmp	.+578    	; 0x1776 <usart_init_spi+0x382>
    1534:	80 e9       	ldi	r24, 0x90	; 144
    1536:	e8 16       	cp	r14, r24
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	f8 06       	cpc	r15, r24
    153c:	21 f4       	brne	.+8      	; 0x1546 <usart_init_spi+0x152>
    153e:	64 e0       	ldi	r22, 0x04	; 4
    1540:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1542:	4e d2       	rcall	.+1180   	; 0x19e0 <sysclk_enable_module>
    1544:	18 c1       	rjmp	.+560    	; 0x1776 <usart_init_spi+0x382>
    1546:	e0 e9       	ldi	r30, 0x90	; 144
    1548:	ee 16       	cp	r14, r30
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    154a:	eb e0       	ldi	r30, 0x0B	; 11
    154c:	fe 06       	cpc	r15, r30
    154e:	21 f4       	brne	.+8      	; 0x1558 <usart_init_spi+0x164>
    1550:	64 e0       	ldi	r22, 0x04	; 4
    1552:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1554:	45 d2       	rcall	.+1162   	; 0x19e0 <sysclk_enable_module>
    1556:	0f c1       	rjmp	.+542    	; 0x1776 <usart_init_spi+0x382>
    1558:	f0 ec       	ldi	r31, 0xC0	; 192
    155a:	ef 16       	cp	r14, r31
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    155c:	f8 e0       	ldi	r31, 0x08	; 8
    155e:	ff 06       	cpc	r15, r31
    1560:	21 f4       	brne	.+8      	; 0x156a <usart_init_spi+0x176>
    1562:	68 e0       	ldi	r22, 0x08	; 8
    1564:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1566:	3c d2       	rcall	.+1144   	; 0x19e0 <sysclk_enable_module>
    1568:	06 c1       	rjmp	.+524    	; 0x1776 <usart_init_spi+0x382>
    156a:	30 ec       	ldi	r19, 0xC0	; 192
    156c:	e3 16       	cp	r14, r19
    156e:	39 e0       	ldi	r19, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1570:	f3 06       	cpc	r15, r19
    1572:	21 f4       	brne	.+8      	; 0x157c <usart_init_spi+0x188>
    1574:	68 e0       	ldi	r22, 0x08	; 8
    1576:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1578:	33 d2       	rcall	.+1126   	; 0x19e0 <sysclk_enable_module>
    157a:	fd c0       	rjmp	.+506    	; 0x1776 <usart_init_spi+0x382>
    157c:	80 ea       	ldi	r24, 0xA0	; 160
    157e:	e8 16       	cp	r14, r24
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1580:	88 e0       	ldi	r24, 0x08	; 8
    1582:	f8 06       	cpc	r15, r24
    1584:	61 f4       	brne	.+24     	; 0x159e <usart_init_spi+0x1aa>
    1586:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	2a d2       	rcall	.+1108   	; 0x19e0 <sysclk_enable_module>
    158c:	e0 ea       	ldi	r30, 0xA0	; 160
    158e:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1590:	84 81       	ldd	r24, Z+4	; 0x04
    1592:	8f 7e       	andi	r24, 0xEF	; 239
    1594:	84 83       	std	Z+4, r24	; 0x04
    1596:	f8 01       	movw	r30, r16
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1598:	24 81       	ldd	r18, Z+4	; 0x04
    159a:	22 50       	subi	r18, 0x02	; 2
    159c:	4c c0       	rjmp	.+152    	; 0x1636 <usart_init_spi+0x242>
    159e:	f0 ea       	ldi	r31, 0xA0	; 160
    15a0:	ef 16       	cp	r14, r31
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    15a2:	f9 e0       	ldi	r31, 0x09	; 9
    15a4:	ff 06       	cpc	r15, r31
    15a6:	21 f4       	brne	.+8      	; 0x15b0 <usart_init_spi+0x1bc>
    15a8:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    15aa:	84 e0       	ldi	r24, 0x04	; 4
    15ac:	19 d2       	rcall	.+1074   	; 0x19e0 <sysclk_enable_module>
    15ae:	e3 c0       	rjmp	.+454    	; 0x1776 <usart_init_spi+0x382>
    15b0:	30 ea       	ldi	r19, 0xA0	; 160
    15b2:	e3 16       	cp	r14, r19
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    15b4:	3a e0       	ldi	r19, 0x0A	; 10
    15b6:	f3 06       	cpc	r15, r19
    15b8:	21 f4       	brne	.+8      	; 0x15c2 <usart_init_spi+0x1ce>
    15ba:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    15bc:	85 e0       	ldi	r24, 0x05	; 5
    15be:	10 d2       	rcall	.+1056   	; 0x19e0 <sysclk_enable_module>
    15c0:	da c0       	rjmp	.+436    	; 0x1776 <usart_init_spi+0x382>
    15c2:	80 ea       	ldi	r24, 0xA0	; 160
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    15c4:	e8 16       	cp	r14, r24
    15c6:	8b e0       	ldi	r24, 0x0B	; 11
    15c8:	f8 06       	cpc	r15, r24
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <usart_init_spi+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    15cc:	60 e1       	ldi	r22, 0x10	; 16
    15ce:	86 e0       	ldi	r24, 0x06	; 6
    15d0:	07 d2       	rcall	.+1038   	; 0x19e0 <sysclk_enable_module>
    15d2:	d1 c0       	rjmp	.+418    	; 0x1776 <usart_init_spi+0x382>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    15d4:	e0 eb       	ldi	r30, 0xB0	; 176
    15d6:	ee 16       	cp	r14, r30
    15d8:	e8 e0       	ldi	r30, 0x08	; 8
    15da:	fe 06       	cpc	r15, r30
    15dc:	21 f4       	brne	.+8      	; 0x15e6 <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    15de:	60 e2       	ldi	r22, 0x20	; 32
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	fe d1       	rcall	.+1020   	; 0x19e0 <sysclk_enable_module>
    15e4:	c8 c0       	rjmp	.+400    	; 0x1776 <usart_init_spi+0x382>
    15e6:	f0 eb       	ldi	r31, 0xB0	; 176
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    15e8:	ef 16       	cp	r14, r31
    15ea:	f9 e0       	ldi	r31, 0x09	; 9
    15ec:	ff 06       	cpc	r15, r31
    15ee:	21 f4       	brne	.+8      	; 0x15f8 <usart_init_spi+0x204>
    15f0:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	f5 d1       	rcall	.+1002   	; 0x19e0 <sysclk_enable_module>
    15f6:	bf c0       	rjmp	.+382    	; 0x1776 <usart_init_spi+0x382>
    15f8:	30 e8       	ldi	r19, 0x80	; 128
    15fa:	e3 16       	cp	r14, r19
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    15fc:	34 e0       	ldi	r19, 0x04	; 4
    15fe:	f3 06       	cpc	r15, r19
    1600:	21 f4       	brne	.+8      	; 0x160a <usart_init_spi+0x216>
    1602:	60 e4       	ldi	r22, 0x40	; 64
    1604:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1606:	ec d1       	rcall	.+984    	; 0x19e0 <sysclk_enable_module>
    1608:	b6 c0       	rjmp	.+364    	; 0x1776 <usart_init_spi+0x382>
    160a:	80 ea       	ldi	r24, 0xA0	; 160
    160c:	e8 16       	cp	r14, r24
    160e:	84 e0       	ldi	r24, 0x04	; 4
    1610:	f8 06       	cpc	r15, r24
    1612:	21 f4       	brne	.+8      	; 0x161c <usart_init_spi+0x228>
    1614:	60 e4       	ldi	r22, 0x40	; 64
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	e3 d1       	rcall	.+966    	; 0x19e0 <sysclk_enable_module>
    161a:	ad c0       	rjmp	.+346    	; 0x1776 <usart_init_spi+0x382>
    161c:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    161e:	84 81       	ldd	r24, Z+4	; 0x04
    1620:	8f 7e       	andi	r24, 0xEF	; 239
    1622:	84 83       	std	Z+4, r24	; 0x04
    1624:	fb 01       	movw	r30, r22
    1626:	24 81       	ldd	r18, Z+4	; 0x04
    1628:	22 50       	subi	r18, 0x02	; 2
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    162a:	c7 01       	movw	r24, r14
    162c:	f0 ea       	ldi	r31, 0xA0	; 160
    162e:	ef 16       	cp	r14, r31
    1630:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1632:	ff 06       	cpc	r15, r31
    1634:	49 f4       	brne	.+18     	; 0x1648 <usart_init_spi+0x254>
    1636:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    163a:	84 fd       	sbrc	r24, 4
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    163c:	a5 c0       	rjmp	.+330    	; 0x1788 <usart_init_spi+0x394>
    163e:	0f 2e       	mov	r0, r31
    1640:	f1 e1       	ldi	r31, 0x11	; 17
    1642:	df 2e       	mov	r13, r31
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1644:	f0 2d       	mov	r31, r0
    1646:	a4 c0       	rjmp	.+328    	; 0x1790 <usart_init_spi+0x39c>
    1648:	80 3b       	cpi	r24, 0xB0	; 176
    164a:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    164c:	93 07       	cpc	r25, r19
    164e:	91 f0       	breq	.+36     	; 0x1674 <usart_init_spi+0x280>
    1650:	80 3a       	cpi	r24, 0xA0	; 160
    1652:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1654:	9e 07       	cpc	r25, r30
    1656:	49 f4       	brne	.+18     	; 0x166a <usart_init_spi+0x276>
    1658:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    165c:	34 fd       	sbrc	r19, 4
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    165e:	9b c0       	rjmp	.+310    	; 0x1796 <usart_init_spi+0x3a2>
    1660:	0f 2e       	mov	r0, r31
    1662:	f9 e1       	ldi	r31, 0x19	; 25
    1664:	df 2e       	mov	r13, r31
    1666:	f0 2d       	mov	r31, r0
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1668:	16 c0       	rjmp	.+44     	; 0x1696 <usart_init_spi+0x2a2>
    166a:	80 3b       	cpi	r24, 0xB0	; 176
    166c:	f9 e0       	ldi	r31, 0x09	; 9
    166e:	9f 07       	cpc	r25, r31
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1670:	f1 f0       	breq	.+60     	; 0x16ae <usart_init_spi+0x2ba>
    1672:	04 c0       	rjmp	.+8      	; 0x167c <usart_init_spi+0x288>
    1674:	0f 2e       	mov	r0, r31
    1676:	f5 e1       	ldi	r31, 0x15	; 21
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1678:	df 2e       	mov	r13, r31
    167a:	f0 2d       	mov	r31, r0
    167c:	80 3a       	cpi	r24, 0xA0	; 160
    167e:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1680:	93 07       	cpc	r25, r19
    1682:	49 f4       	brne	.+18     	; 0x1696 <usart_init_spi+0x2a2>
    1684:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1688:	84 fd       	sbrc	r24, 4
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    168a:	8a c0       	rjmp	.+276    	; 0x17a0 <usart_init_spi+0x3ac>
    168c:	0f 2e       	mov	r0, r31
    168e:	f1 e2       	ldi	r31, 0x21	; 33
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1690:	df 2e       	mov	r13, r31
    1692:	f0 2d       	mov	r31, r0
    1694:	15 c0       	rjmp	.+42     	; 0x16c0 <usart_init_spi+0x2cc>
    1696:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1698:	9b 40       	sbci	r25, 0x0B	; 11
    169a:	91 f4       	brne	.+36     	; 0x16c0 <usart_init_spi+0x2cc>
    169c:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    16a0:	84 fd       	sbrc	r24, 4
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    16a2:	0a c0       	rjmp	.+20     	; 0x16b8 <usart_init_spi+0x2c4>
    16a4:	0f 2e       	mov	r0, r31
    16a6:	f9 e2       	ldi	r31, 0x29	; 41
    16a8:	df 2e       	mov	r13, r31
    16aa:	f0 2d       	mov	r31, r0
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    16ac:	09 c0       	rjmp	.+18     	; 0x16c0 <usart_init_spi+0x2cc>
    16ae:	0f 2e       	mov	r0, r31
    16b0:	fd e1       	ldi	r31, 0x1D	; 29
    16b2:	df 2e       	mov	r13, r31
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    16b4:	f0 2d       	mov	r31, r0
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <usart_init_spi+0x2cc>
    16b8:	0f 2e       	mov	r0, r31
    16ba:	fd e2       	ldi	r31, 0x2D	; 45
    16bc:	df 2e       	mov	r13, r31
    16be:	f0 2d       	mov	r31, r0
    16c0:	ed 2d       	mov	r30, r13
    16c2:	e6 95       	lsr	r30
    16c4:	e6 95       	lsr	r30
    16c6:	e6 95       	lsr	r30
    16c8:	30 e2       	ldi	r19, 0x20	; 32
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    16ca:	e3 9f       	mul	r30, r19
    16cc:	f0 01       	movw	r30, r0
    16ce:	11 24       	eor	r1, r1
    16d0:	fa 5f       	subi	r31, 0xFA	; 250
    16d2:	3d 2d       	mov	r19, r13
    16d4:	37 70       	andi	r19, 0x07	; 7
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    16da:	03 2e       	mov	r0, r19
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <usart_init_spi+0x2ee>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <usart_init_spi+0x2ea>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    16e6:	81 83       	std	Z+1, r24	; 0x01
    16e8:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <usart_init_spi+0x2fc>
    16ec:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <usart_init_spi+0x2fe>
    16f0:	40 e4       	ldi	r20, 0x40	; 64
	cpu_irq_disable();
    16f2:	df 01       	movw	r26, r30
	return flags;
    16f4:	50 96       	adiw	r26, 0x10	; 16
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    16f6:	a3 0f       	add	r26, r19
    16f8:	b1 1d       	adc	r27, r1
    16fa:	9f b7       	in	r25, 0x3f	; 63
	*pin_ctrl |= mode;
    16fc:	99 83       	std	Y+1, r25	; 0x01
    16fe:	f8 94       	cli
    1700:	39 81       	ldd	r19, Y+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1702:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1704:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1706:	2c 93       	st	X, r18
    1708:	9c 91       	ld	r25, X
    170a:	94 2b       	or	r25, r20
    170c:	9c 93       	st	X, r25
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    170e:	3f bf       	out	0x3f, r19	; 63
    1710:	85 83       	std	Z+5, r24	; 0x05
    1712:	f7 01       	movw	r30, r14
    1714:	85 81       	ldd	r24, Z+5	; 0x05
    1716:	80 6c       	ori	r24, 0xC0	; 192
		usart->CTRLC |= USART_UCPHA_bm;
    1718:	85 83       	std	Z+5, r24	; 0x05
    171a:	f8 01       	movw	r30, r16
    171c:	84 81       	ldd	r24, Z+4	; 0x04
    171e:	8d 7f       	andi	r24, 0xFD	; 253
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	29 f4       	brne	.+10     	; 0x172e <usart_init_spi+0x33a>
    1724:	f7 01       	movw	r30, r14
    1726:	85 81       	ldd	r24, Z+5	; 0x05
	}
	if (opt->data_order) {
    1728:	82 60       	ori	r24, 0x02	; 2
    172a:	85 83       	std	Z+5, r24	; 0x05
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <usart_init_spi+0x342>
    172e:	f7 01       	movw	r30, r14
		(usart)->CTRLC |= USART_DORD_bm;
    1730:	85 81       	ldd	r24, Z+5	; 0x05
    1732:	8d 7f       	andi	r24, 0xFD	; 253
    1734:	85 83       	std	Z+5, r24	; 0x05
    1736:	f8 01       	movw	r30, r16
    1738:	85 81       	ldd	r24, Z+5	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    173a:	88 23       	and	r24, r24
    173c:	29 f0       	breq	.+10     	; 0x1748 <usart_init_spi+0x354>
    173e:	f7 01       	movw	r30, r14
    1740:	85 81       	ldd	r24, Z+5	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1742:	84 60       	ori	r24, 0x04	; 4
    1744:	85 83       	std	Z+5, r24	; 0x05
    1746:	04 c0       	rjmp	.+8      	; 0x1750 <usart_init_spi+0x35c>
    1748:	f7 01       	movw	r30, r14
    174a:	85 81       	ldd	r24, Z+5	; 0x05
    174c:	8b 7f       	andi	r24, 0xFB	; 251
    174e:	85 83       	std	Z+5, r24	; 0x05
    1750:	f8 01       	movw	r30, r16
    1752:	40 81       	ld	r20, Z
    1754:	51 81       	ldd	r21, Z+1	; 0x01
    1756:	62 81       	ldd	r22, Z+2	; 0x02
    1758:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    175a:	00 e8       	ldi	r16, 0x80	; 128
    175c:	14 e8       	ldi	r17, 0x84	; 132
    175e:	2e e1       	ldi	r18, 0x1E	; 30
    1760:	30 e0       	ldi	r19, 0x00	; 0
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1762:	c7 01       	movw	r24, r14
    1764:	15 de       	rcall	.-982    	; 0x1390 <usart_spi_set_baudrate>
    1766:	f7 01       	movw	r30, r14
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1768:	84 81       	ldd	r24, Z+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    176a:	88 60       	ori	r24, 0x08	; 8
    176c:	84 83       	std	Z+4, r24	; 0x04
    176e:	84 81       	ldd	r24, Z+4	; 0x04
    1770:	80 61       	ori	r24, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1772:	84 83       	std	Z+4, r24	; 0x04
    1774:	1a c0       	rjmp	.+52     	; 0x17aa <usart_init_spi+0x3b6>
    1776:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1778:	84 81       	ldd	r24, Z+4	; 0x04
    177a:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    177c:	84 83       	std	Z+4, r24	; 0x04
    177e:	f8 01       	movw	r30, r16
    1780:	24 81       	ldd	r18, Z+4	; 0x04
    1782:	22 50       	subi	r18, 0x02	; 2
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1784:	c7 01       	movw	r24, r14
    1786:	60 cf       	rjmp	.-320    	; 0x1648 <usart_init_spi+0x254>
    1788:	0f 2e       	mov	r0, r31
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    178a:	f5 e1       	ldi	r31, 0x15	; 21
    178c:	df 2e       	mov	r13, r31
    178e:	f0 2d       	mov	r31, r0
    1790:	80 ea       	ldi	r24, 0xA0	; 160
    1792:	98 e0       	ldi	r25, 0x08	; 8
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1794:	6a cf       	rjmp	.-300    	; 0x166a <usart_init_spi+0x276>
    1796:	0f 2e       	mov	r0, r31
    1798:	fd e1       	ldi	r31, 0x1D	; 29
    179a:	df 2e       	mov	r13, r31
    179c:	f0 2d       	mov	r31, r0
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    179e:	7b cf       	rjmp	.-266    	; 0x1696 <usart_init_spi+0x2a2>
    17a0:	0f 2e       	mov	r0, r31
    17a2:	f5 e2       	ldi	r31, 0x25	; 37
    17a4:	df 2e       	mov	r13, r31
    17a6:	f0 2d       	mov	r31, r0
    17a8:	8b cf       	rjmp	.-234    	; 0x16c0 <usart_init_spi+0x2cc>
    17aa:	0f 90       	pop	r0
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	08 95       	ret

000017bc <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    17bc:	80 3a       	cpi	r24, 0xA0	; 160
    17be:	28 e0       	ldi	r18, 0x08	; 8
    17c0:	92 07       	cpc	r25, r18
    17c2:	21 f4       	brne	.+8      	; 0x17cc <usart_spi_init+0x10>
    17c4:	60 e1       	ldi	r22, 0x10	; 16
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	0b c1       	rjmp	.+534    	; 0x19e0 <sysclk_enable_module>
    17ca:	08 95       	ret
    17cc:	80 3b       	cpi	r24, 0xB0	; 176
    17ce:	28 e0       	ldi	r18, 0x08	; 8
    17d0:	92 07       	cpc	r25, r18
    17d2:	21 f4       	brne	.+8      	; 0x17dc <usart_spi_init+0x20>
    17d4:	60 e2       	ldi	r22, 0x20	; 32
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	03 c1       	rjmp	.+518    	; 0x19e0 <sysclk_enable_module>
    17da:	08 95       	ret
    17dc:	80 3a       	cpi	r24, 0xA0	; 160
    17de:	29 e0       	ldi	r18, 0x09	; 9
    17e0:	92 07       	cpc	r25, r18
    17e2:	21 f4       	brne	.+8      	; 0x17ec <usart_spi_init+0x30>
    17e4:	60 e1       	ldi	r22, 0x10	; 16
    17e6:	84 e0       	ldi	r24, 0x04	; 4
    17e8:	fb c0       	rjmp	.+502    	; 0x19e0 <sysclk_enable_module>
    17ea:	08 95       	ret
    17ec:	80 3b       	cpi	r24, 0xB0	; 176
    17ee:	29 e0       	ldi	r18, 0x09	; 9
    17f0:	92 07       	cpc	r25, r18
    17f2:	21 f4       	brne	.+8      	; 0x17fc <usart_spi_init+0x40>
    17f4:	60 e2       	ldi	r22, 0x20	; 32
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	f3 c0       	rjmp	.+486    	; 0x19e0 <sysclk_enable_module>
    17fa:	08 95       	ret
    17fc:	80 3a       	cpi	r24, 0xA0	; 160
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	92 07       	cpc	r25, r18
    1802:	21 f4       	brne	.+8      	; 0x180c <usart_spi_init+0x50>
    1804:	60 e1       	ldi	r22, 0x10	; 16
    1806:	85 e0       	ldi	r24, 0x05	; 5
    1808:	eb c0       	rjmp	.+470    	; 0x19e0 <sysclk_enable_module>
    180a:	08 95       	ret
    180c:	80 3a       	cpi	r24, 0xA0	; 160
    180e:	9b 40       	sbci	r25, 0x0B	; 11
    1810:	19 f4       	brne	.+6      	; 0x1818 <usart_spi_init+0x5c>
    1812:	60 e1       	ldi	r22, 0x10	; 16
    1814:	86 e0       	ldi	r24, 0x06	; 6
    1816:	e4 c0       	rjmp	.+456    	; 0x19e0 <sysclk_enable_module>
    1818:	08 95       	ret

0000181a <usart_spi_setup_device>:
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	00 d0       	rcall	.+0      	; 0x1824 <usart_spi_setup_device+0xa>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <usart_spi_setup_device+0xc>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	09 83       	std	Y+1, r16	; 0x01
    182c:	1a 83       	std	Y+2, r17	; 0x02
    182e:	2b 83       	std	Y+3, r18	; 0x03
    1830:	3c 83       	std	Y+4, r19	; 0x04
    1832:	4d 83       	std	Y+5, r20	; 0x05
    1834:	1e 82       	std	Y+6, r1	; 0x06
    1836:	be 01       	movw	r22, r28
    1838:	6f 5f       	subi	r22, 0xFF	; 255
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	db dd       	rcall	.-1098   	; 0x13f4 <usart_init_spi>
    183e:	26 96       	adiw	r28, 0x06	; 6
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	08 95       	ret

0000184e <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    184e:	fb 01       	movw	r30, r22
    1850:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1852:	e8 2f       	mov	r30, r24
    1854:	e6 95       	lsr	r30
    1856:	e6 95       	lsr	r30
    1858:	e6 95       	lsr	r30
    185a:	40 e2       	ldi	r20, 0x20	; 32
    185c:	e4 9f       	mul	r30, r20
    185e:	f0 01       	movw	r30, r0
    1860:	11 24       	eor	r1, r1
    1862:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1864:	87 70       	andi	r24, 0x07	; 7
    1866:	21 e0       	ldi	r18, 0x01	; 1
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	a9 01       	movw	r20, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <usart_spi_select_device+0x24>
    186e:	44 0f       	add	r20, r20
    1870:	55 1f       	adc	r21, r21
    1872:	8a 95       	dec	r24
    1874:	e2 f7       	brpl	.-8      	; 0x186e <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1876:	46 83       	std	Z+6, r20	; 0x06
    1878:	08 95       	ret

0000187a <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    187a:	fb 01       	movw	r30, r22
    187c:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    187e:	e8 2f       	mov	r30, r24
    1880:	e6 95       	lsr	r30
    1882:	e6 95       	lsr	r30
    1884:	e6 95       	lsr	r30
    1886:	40 e2       	ldi	r20, 0x20	; 32
    1888:	e4 9f       	mul	r30, r20
    188a:	f0 01       	movw	r30, r0
    188c:	11 24       	eor	r1, r1
    188e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1890:	87 70       	andi	r24, 0x07	; 7
    1892:	21 e0       	ldi	r18, 0x01	; 1
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	a9 01       	movw	r20, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <usart_spi_deselect_device+0x24>
    189a:	44 0f       	add	r20, r20
    189c:	55 1f       	adc	r21, r21
    189e:	8a 95       	dec	r24
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    18a2:	45 83       	std	Z+5, r20	; 0x05
    18a4:	08 95       	ret

000018a6 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    18a6:	80 93 7a 22 	sts	0x227A, r24	; 0x80227a <fbpointer>
    18aa:	90 93 7b 22 	sts	0x227B, r25	; 0x80227b <fbpointer+0x1>
    18ae:	08 95       	ret

000018b0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    18b0:	20 91 7a 22 	lds	r18, 0x227A	; 0x80227a <fbpointer>
    18b4:	30 91 7b 22 	lds	r19, 0x227B	; 0x80227b <fbpointer+0x1>
    18b8:	90 e8       	ldi	r25, 0x80	; 128
    18ba:	89 9f       	mul	r24, r25
    18bc:	20 0d       	add	r18, r0
    18be:	31 1d       	adc	r19, r1
    18c0:	11 24       	eor	r1, r1
    18c2:	f9 01       	movw	r30, r18
    18c4:	e6 0f       	add	r30, r22
    18c6:	f1 1d       	adc	r31, r1
    18c8:	40 83       	st	Z, r20
    18ca:	08 95       	ret

000018cc <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    18cc:	20 91 7a 22 	lds	r18, 0x227A	; 0x80227a <fbpointer>
    18d0:	30 91 7b 22 	lds	r19, 0x227B	; 0x80227b <fbpointer+0x1>
    18d4:	90 e8       	ldi	r25, 0x80	; 128
    18d6:	89 9f       	mul	r24, r25
    18d8:	20 0d       	add	r18, r0
    18da:	31 1d       	adc	r19, r1
    18dc:	11 24       	eor	r1, r1
    18de:	f9 01       	movw	r30, r18
    18e0:	e6 0f       	add	r30, r22
    18e2:	f1 1d       	adc	r31, r1
}
    18e4:	80 81       	ld	r24, Z
    18e6:	08 95       	ret

000018e8 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	e4 2f       	mov	r30, r20
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	e8 0f       	add	r30, r24
    18f8:	f1 1d       	adc	r31, r1
    18fa:	e1 38       	cpi	r30, 0x81	; 129
    18fc:	f1 05       	cpc	r31, r1
    18fe:	1c f0       	brlt	.+6      	; 0x1906 <gfx_mono_generic_draw_horizontal_line+0x1e>
    1900:	c0 e8       	ldi	r28, 0x80	; 128
    1902:	4c 2f       	mov	r20, r28
    1904:	48 1b       	sub	r20, r24
    1906:	44 23       	and	r20, r20
    1908:	09 f4       	brne	.+2      	; 0x190c <gfx_mono_generic_draw_horizontal_line+0x24>
    190a:	4a c0       	rjmp	.+148    	; 0x19a0 <gfx_mono_generic_draw_horizontal_line+0xb8>
    190c:	d6 2f       	mov	r29, r22
    190e:	d6 95       	lsr	r29
    1910:	d6 95       	lsr	r29
    1912:	d6 95       	lsr	r29
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	98 e0       	ldi	r25, 0x08	; 8
    1918:	d9 9f       	mul	r29, r25
    191a:	60 19       	sub	r22, r0
    191c:	71 09       	sbc	r23, r1
    191e:	11 24       	eor	r1, r1
    1920:	e1 e0       	ldi	r30, 0x01	; 1
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	df 01       	movw	r26, r30
    1926:	02 c0       	rjmp	.+4      	; 0x192c <gfx_mono_generic_draw_horizontal_line+0x44>
    1928:	aa 0f       	add	r26, r26
    192a:	bb 1f       	adc	r27, r27
    192c:	6a 95       	dec	r22
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <gfx_mono_generic_draw_horizontal_line+0x40>
    1930:	fa 2e       	mov	r15, r26
    1932:	21 30       	cpi	r18, 0x01	; 1
    1934:	21 f0       	breq	.+8      	; 0x193e <gfx_mono_generic_draw_horizontal_line+0x56>
    1936:	98 f0       	brcs	.+38     	; 0x195e <gfx_mono_generic_draw_horizontal_line+0x76>
    1938:	22 30       	cpi	r18, 0x02	; 2
    193a:	19 f1       	breq	.+70     	; 0x1982 <gfx_mono_generic_draw_horizontal_line+0x9a>
    193c:	31 c0       	rjmp	.+98     	; 0x19a0 <gfx_mono_generic_draw_horizontal_line+0xb8>
    193e:	c4 2f       	mov	r28, r20
    1940:	1f ef       	ldi	r17, 0xFF	; 255
    1942:	18 0f       	add	r17, r24
    1944:	01 2f       	mov	r16, r17
    1946:	0c 0f       	add	r16, r28
    1948:	60 2f       	mov	r22, r16
    194a:	8d 2f       	mov	r24, r29
    194c:	ce d9       	rcall	.-3172   	; 0xcea <gfx_mono_st7565r_get_byte>
    194e:	4f 2d       	mov	r20, r15
    1950:	48 2b       	or	r20, r24
    1952:	60 2f       	mov	r22, r16
    1954:	8d 2f       	mov	r24, r29
    1956:	aa d8       	rcall	.-3756   	; 0xaac <gfx_mono_st7565r_put_byte>
    1958:	c1 50       	subi	r28, 0x01	; 1
    195a:	a1 f7       	brne	.-24     	; 0x1944 <gfx_mono_generic_draw_horizontal_line+0x5c>
    195c:	21 c0       	rjmp	.+66     	; 0x19a0 <gfx_mono_generic_draw_horizontal_line+0xb8>
    195e:	c4 2f       	mov	r28, r20
    1960:	1f ef       	ldi	r17, 0xFF	; 255
    1962:	18 0f       	add	r17, r24
    1964:	fa 2e       	mov	r15, r26
    1966:	f0 94       	com	r15
    1968:	01 2f       	mov	r16, r17
    196a:	0c 0f       	add	r16, r28
    196c:	60 2f       	mov	r22, r16
    196e:	8d 2f       	mov	r24, r29
    1970:	bc d9       	rcall	.-3208   	; 0xcea <gfx_mono_st7565r_get_byte>
    1972:	4f 2d       	mov	r20, r15
    1974:	48 23       	and	r20, r24
    1976:	60 2f       	mov	r22, r16
    1978:	8d 2f       	mov	r24, r29
    197a:	98 d8       	rcall	.-3792   	; 0xaac <gfx_mono_st7565r_put_byte>
    197c:	c1 50       	subi	r28, 0x01	; 1
    197e:	a1 f7       	brne	.-24     	; 0x1968 <gfx_mono_generic_draw_horizontal_line+0x80>
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1982:	c4 2f       	mov	r28, r20
    1984:	1f ef       	ldi	r17, 0xFF	; 255
    1986:	18 0f       	add	r17, r24
    1988:	01 2f       	mov	r16, r17
    198a:	0c 0f       	add	r16, r28
    198c:	60 2f       	mov	r22, r16
    198e:	8d 2f       	mov	r24, r29
    1990:	ac d9       	rcall	.-3240   	; 0xcea <gfx_mono_st7565r_get_byte>
    1992:	4f 2d       	mov	r20, r15
    1994:	48 27       	eor	r20, r24
    1996:	60 2f       	mov	r22, r16
    1998:	8d 2f       	mov	r24, r29
    199a:	88 d8       	rcall	.-3824   	; 0xaac <gfx_mono_st7565r_put_byte>
    199c:	c1 50       	subi	r28, 0x01	; 1
    199e:	a1 f7       	brne	.-24     	; 0x1988 <gfx_mono_generic_draw_horizontal_line+0xa0>
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	08 95       	ret

000019ac <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
	if (height == 0) {
    19b6:	22 23       	and	r18, r18
    19b8:	69 f0       	breq	.+26     	; 0x19d4 <gfx_mono_generic_draw_filled_rect+0x28>
    19ba:	f4 2e       	mov	r15, r20
    19bc:	18 2f       	mov	r17, r24
    19be:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    19c0:	df ef       	ldi	r29, 0xFF	; 255
    19c2:	d6 0f       	add	r29, r22
    19c4:	6d 2f       	mov	r22, r29
    19c6:	6c 0f       	add	r22, r28
    19c8:	20 2f       	mov	r18, r16
    19ca:	4f 2d       	mov	r20, r15
    19cc:	81 2f       	mov	r24, r17
    19ce:	8c df       	rcall	.-232    	; 0x18e8 <gfx_mono_generic_draw_horizontal_line>
    19d0:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    19d2:	c1 f7       	brne	.-16     	; 0x19c4 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	08 95       	ret

000019e0 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	1f 92       	push	r1
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    19ea:	9f b7       	in	r25, 0x3f	; 63
    19ec:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    19ee:	f8 94       	cli
	return flags;
    19f0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    19f2:	e8 2f       	mov	r30, r24
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	e0 59       	subi	r30, 0x90	; 144
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	60 95       	com	r22
    19fc:	80 81       	ld	r24, Z
    19fe:	68 23       	and	r22, r24
    1a00:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a02:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1a04:	0f 90       	pop	r0
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	08 95       	ret

00001a0c <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	1f 92       	push	r1
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a16:	9f b7       	in	r25, 0x3f	; 63
    1a18:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1a1a:	f8 94       	cli
	return flags;
    1a1c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1a1e:	e8 2f       	mov	r30, r24
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	e0 59       	subi	r30, 0x90	; 144
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	68 2b       	or	r22, r24
    1a2a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a2c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1a2e:	0f 90       	pop	r0
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <rtc_get_time>:
	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
}
    1a36:	80 e1       	ldi	r24, 0x10	; 16
    1a38:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    1a3c:	e0 e2       	ldi	r30, 0x20	; 32
    1a3e:	f4 e0       	ldi	r31, 0x04	; 4
    1a40:	81 81       	ldd	r24, Z+1	; 0x01
    1a42:	84 fd       	sbrc	r24, 4
    1a44:	fd cf       	rjmp	.-6      	; 0x1a40 <rtc_get_time+0xa>
    1a46:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    1a4a:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    1a4e:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    1a52:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    1a56:	08 95       	ret

00001a58 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    1a58:	1f 92       	push	r1
    1a5a:	0f 92       	push	r0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	0f 92       	push	r0
    1a60:	11 24       	eor	r1, r1
    1a62:	0b b6       	in	r0, 0x3b	; 59
    1a64:	0f 92       	push	r0
    1a66:	2f 93       	push	r18
    1a68:	3f 93       	push	r19
    1a6a:	4f 93       	push	r20
    1a6c:	5f 93       	push	r21
    1a6e:	6f 93       	push	r22
    1a70:	7f 93       	push	r23
    1a72:	8f 93       	push	r24
    1a74:	9f 93       	push	r25
    1a76:	af 93       	push	r26
    1a78:	bf 93       	push	r27
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	ef 93       	push	r30
    1a80:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    1a82:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    1a86:	c0 91 97 23 	lds	r28, 0x2397	; 0x802397 <rtc_data>
    1a8a:	d0 91 98 23 	lds	r29, 0x2398	; 0x802398 <rtc_data+0x1>
    1a8e:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    1a90:	19 f0       	breq	.+6      	; 0x1a98 <__vector_11+0x40>
    1a92:	d1 df       	rcall	.-94     	; 0x1a36 <rtc_get_time>
    1a94:	fe 01       	movw	r30, r28
}
    1a96:	19 95       	eicall
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	bf 91       	pop	r27
    1aa2:	af 91       	pop	r26
    1aa4:	9f 91       	pop	r25
    1aa6:	8f 91       	pop	r24
    1aa8:	7f 91       	pop	r23
    1aaa:	6f 91       	pop	r22
    1aac:	5f 91       	pop	r21
    1aae:	4f 91       	pop	r20
    1ab0:	3f 91       	pop	r19
    1ab2:	2f 91       	pop	r18
    1ab4:	0f 90       	pop	r0
    1ab6:	0b be       	out	0x3b, r0	; 59
    1ab8:	0f 90       	pop	r0
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	0f 90       	pop	r0
    1abe:	1f 90       	pop	r1
    1ac0:	18 95       	reti

00001ac2 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
    1aca:	11 24       	eor	r1, r1
    1acc:	0b b6       	in	r0, 0x3b	; 59
    1ace:	0f 92       	push	r0
    1ad0:	2f 93       	push	r18
    1ad2:	3f 93       	push	r19
    1ad4:	4f 93       	push	r20
    1ad6:	5f 93       	push	r21
    1ad8:	6f 93       	push	r22
    1ada:	7f 93       	push	r23
    1adc:	8f 93       	push	r24
    1ade:	9f 93       	push	r25
    1ae0:	af 93       	push	r26
    1ae2:	bf 93       	push	r27
    1ae4:	ef 93       	push	r30
    1ae6:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    1ae8:	e0 91 c2 22 	lds	r30, 0x22C2	; 0x8022c2 <tc_tcc0_ovf_callback>
    1aec:	f0 91 c3 22 	lds	r31, 0x22C3	; 0x8022c3 <tc_tcc0_ovf_callback+0x1>
    1af0:	30 97       	sbiw	r30, 0x00	; 0
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    1af4:	19 95       	eicall
	}
}
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	0f 90       	pop	r0
    1b10:	0b be       	out	0x3b, r0	; 59
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0
    1b18:	1f 90       	pop	r1
    1b1a:	18 95       	reti

00001b1c <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    1b1c:	1f 92       	push	r1
    1b1e:	0f 92       	push	r0
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	0f 92       	push	r0
    1b24:	11 24       	eor	r1, r1
    1b26:	0b b6       	in	r0, 0x3b	; 59
    1b28:	0f 92       	push	r0
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    1b42:	e0 91 c0 22 	lds	r30, 0x22C0	; 0x8022c0 <tc_tcc0_err_callback>
    1b46:	f0 91 c1 22 	lds	r31, 0x22C1	; 0x8022c1 <tc_tcc0_err_callback+0x1>
    1b4a:	30 97       	sbiw	r30, 0x00	; 0
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <__vector_15+0x34>
		tc_tcc0_err_callback();
    1b4e:	19 95       	eicall
	}
}
    1b50:	ff 91       	pop	r31
    1b52:	ef 91       	pop	r30
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	0f 90       	pop	r0
    1b6a:	0b be       	out	0x3b, r0	; 59
    1b6c:	0f 90       	pop	r0
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	0f 90       	pop	r0
    1b72:	1f 90       	pop	r1
    1b74:	18 95       	reti

00001b76 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    1b76:	1f 92       	push	r1
    1b78:	0f 92       	push	r0
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	0f 92       	push	r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	0b b6       	in	r0, 0x3b	; 59
    1b82:	0f 92       	push	r0
    1b84:	2f 93       	push	r18
    1b86:	3f 93       	push	r19
    1b88:	4f 93       	push	r20
    1b8a:	5f 93       	push	r21
    1b8c:	6f 93       	push	r22
    1b8e:	7f 93       	push	r23
    1b90:	8f 93       	push	r24
    1b92:	9f 93       	push	r25
    1b94:	af 93       	push	r26
    1b96:	bf 93       	push	r27
    1b98:	ef 93       	push	r30
    1b9a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    1b9c:	e0 91 be 22 	lds	r30, 0x22BE	; 0x8022be <tc_tcc0_cca_callback>
    1ba0:	f0 91 bf 22 	lds	r31, 0x22BF	; 0x8022bf <tc_tcc0_cca_callback+0x1>
    1ba4:	30 97       	sbiw	r30, 0x00	; 0
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <__vector_16+0x34>
		tc_tcc0_cca_callback();
    1ba8:	19 95       	eicall
	}
}
    1baa:	ff 91       	pop	r31
    1bac:	ef 91       	pop	r30
    1bae:	bf 91       	pop	r27
    1bb0:	af 91       	pop	r26
    1bb2:	9f 91       	pop	r25
    1bb4:	8f 91       	pop	r24
    1bb6:	7f 91       	pop	r23
    1bb8:	6f 91       	pop	r22
    1bba:	5f 91       	pop	r21
    1bbc:	4f 91       	pop	r20
    1bbe:	3f 91       	pop	r19
    1bc0:	2f 91       	pop	r18
    1bc2:	0f 90       	pop	r0
    1bc4:	0b be       	out	0x3b, r0	; 59
    1bc6:	0f 90       	pop	r0
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	0f 90       	pop	r0
    1bcc:	1f 90       	pop	r1
    1bce:	18 95       	reti

00001bd0 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    1bd0:	1f 92       	push	r1
    1bd2:	0f 92       	push	r0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	0f 92       	push	r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	0b b6       	in	r0, 0x3b	; 59
    1bdc:	0f 92       	push	r0
    1bde:	2f 93       	push	r18
    1be0:	3f 93       	push	r19
    1be2:	4f 93       	push	r20
    1be4:	5f 93       	push	r21
    1be6:	6f 93       	push	r22
    1be8:	7f 93       	push	r23
    1bea:	8f 93       	push	r24
    1bec:	9f 93       	push	r25
    1bee:	af 93       	push	r26
    1bf0:	bf 93       	push	r27
    1bf2:	ef 93       	push	r30
    1bf4:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    1bf6:	e0 91 bc 22 	lds	r30, 0x22BC	; 0x8022bc <tc_tcc0_ccb_callback>
    1bfa:	f0 91 bd 22 	lds	r31, 0x22BD	; 0x8022bd <tc_tcc0_ccb_callback+0x1>
    1bfe:	30 97       	sbiw	r30, 0x00	; 0
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    1c02:	19 95       	eicall
	}
}
    1c04:	ff 91       	pop	r31
    1c06:	ef 91       	pop	r30
    1c08:	bf 91       	pop	r27
    1c0a:	af 91       	pop	r26
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	7f 91       	pop	r23
    1c12:	6f 91       	pop	r22
    1c14:	5f 91       	pop	r21
    1c16:	4f 91       	pop	r20
    1c18:	3f 91       	pop	r19
    1c1a:	2f 91       	pop	r18
    1c1c:	0f 90       	pop	r0
    1c1e:	0b be       	out	0x3b, r0	; 59
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	0f 90       	pop	r0
    1c26:	1f 90       	pop	r1
    1c28:	18 95       	reti

00001c2a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    1c2a:	1f 92       	push	r1
    1c2c:	0f 92       	push	r0
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	0f 92       	push	r0
    1c32:	11 24       	eor	r1, r1
    1c34:	0b b6       	in	r0, 0x3b	; 59
    1c36:	0f 92       	push	r0
    1c38:	2f 93       	push	r18
    1c3a:	3f 93       	push	r19
    1c3c:	4f 93       	push	r20
    1c3e:	5f 93       	push	r21
    1c40:	6f 93       	push	r22
    1c42:	7f 93       	push	r23
    1c44:	8f 93       	push	r24
    1c46:	9f 93       	push	r25
    1c48:	af 93       	push	r26
    1c4a:	bf 93       	push	r27
    1c4c:	ef 93       	push	r30
    1c4e:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    1c50:	e0 91 ba 22 	lds	r30, 0x22BA	; 0x8022ba <tc_tcc0_ccc_callback>
    1c54:	f0 91 bb 22 	lds	r31, 0x22BB	; 0x8022bb <tc_tcc0_ccc_callback+0x1>
    1c58:	30 97       	sbiw	r30, 0x00	; 0
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    1c5c:	19 95       	eicall
	}
}
    1c5e:	ff 91       	pop	r31
    1c60:	ef 91       	pop	r30
    1c62:	bf 91       	pop	r27
    1c64:	af 91       	pop	r26
    1c66:	9f 91       	pop	r25
    1c68:	8f 91       	pop	r24
    1c6a:	7f 91       	pop	r23
    1c6c:	6f 91       	pop	r22
    1c6e:	5f 91       	pop	r21
    1c70:	4f 91       	pop	r20
    1c72:	3f 91       	pop	r19
    1c74:	2f 91       	pop	r18
    1c76:	0f 90       	pop	r0
    1c78:	0b be       	out	0x3b, r0	; 59
    1c7a:	0f 90       	pop	r0
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	0f 90       	pop	r0
    1c80:	1f 90       	pop	r1
    1c82:	18 95       	reti

00001c84 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    1c84:	1f 92       	push	r1
    1c86:	0f 92       	push	r0
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	0f 92       	push	r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	0b b6       	in	r0, 0x3b	; 59
    1c90:	0f 92       	push	r0
    1c92:	2f 93       	push	r18
    1c94:	3f 93       	push	r19
    1c96:	4f 93       	push	r20
    1c98:	5f 93       	push	r21
    1c9a:	6f 93       	push	r22
    1c9c:	7f 93       	push	r23
    1c9e:	8f 93       	push	r24
    1ca0:	9f 93       	push	r25
    1ca2:	af 93       	push	r26
    1ca4:	bf 93       	push	r27
    1ca6:	ef 93       	push	r30
    1ca8:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    1caa:	e0 91 b8 22 	lds	r30, 0x22B8	; 0x8022b8 <tc_tcc0_ccd_callback>
    1cae:	f0 91 b9 22 	lds	r31, 0x22B9	; 0x8022b9 <tc_tcc0_ccd_callback+0x1>
    1cb2:	30 97       	sbiw	r30, 0x00	; 0
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    1cb6:	19 95       	eicall
	}
}
    1cb8:	ff 91       	pop	r31
    1cba:	ef 91       	pop	r30
    1cbc:	bf 91       	pop	r27
    1cbe:	af 91       	pop	r26
    1cc0:	9f 91       	pop	r25
    1cc2:	8f 91       	pop	r24
    1cc4:	7f 91       	pop	r23
    1cc6:	6f 91       	pop	r22
    1cc8:	5f 91       	pop	r21
    1cca:	4f 91       	pop	r20
    1ccc:	3f 91       	pop	r19
    1cce:	2f 91       	pop	r18
    1cd0:	0f 90       	pop	r0
    1cd2:	0b be       	out	0x3b, r0	; 59
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	0f 90       	pop	r0
    1cda:	1f 90       	pop	r1
    1cdc:	18 95       	reti

00001cde <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    1cde:	1f 92       	push	r1
    1ce0:	0f 92       	push	r0
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	0f 92       	push	r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	0b b6       	in	r0, 0x3b	; 59
    1cea:	0f 92       	push	r0
    1cec:	2f 93       	push	r18
    1cee:	3f 93       	push	r19
    1cf0:	4f 93       	push	r20
    1cf2:	5f 93       	push	r21
    1cf4:	6f 93       	push	r22
    1cf6:	7f 93       	push	r23
    1cf8:	8f 93       	push	r24
    1cfa:	9f 93       	push	r25
    1cfc:	af 93       	push	r26
    1cfe:	bf 93       	push	r27
    1d00:	ef 93       	push	r30
    1d02:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1d04:	e0 91 b6 22 	lds	r30, 0x22B6	; 0x8022b6 <tc_tcc1_ovf_callback>
    1d08:	f0 91 b7 22 	lds	r31, 0x22B7	; 0x8022b7 <tc_tcc1_ovf_callback+0x1>
    1d0c:	30 97       	sbiw	r30, 0x00	; 0
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    1d10:	19 95       	eicall
	}
}
    1d12:	ff 91       	pop	r31
    1d14:	ef 91       	pop	r30
    1d16:	bf 91       	pop	r27
    1d18:	af 91       	pop	r26
    1d1a:	9f 91       	pop	r25
    1d1c:	8f 91       	pop	r24
    1d1e:	7f 91       	pop	r23
    1d20:	6f 91       	pop	r22
    1d22:	5f 91       	pop	r21
    1d24:	4f 91       	pop	r20
    1d26:	3f 91       	pop	r19
    1d28:	2f 91       	pop	r18
    1d2a:	0f 90       	pop	r0
    1d2c:	0b be       	out	0x3b, r0	; 59
    1d2e:	0f 90       	pop	r0
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	0f 90       	pop	r0
    1d34:	1f 90       	pop	r1
    1d36:	18 95       	reti

00001d38 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1d38:	1f 92       	push	r1
    1d3a:	0f 92       	push	r0
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	0f 92       	push	r0
    1d40:	11 24       	eor	r1, r1
    1d42:	0b b6       	in	r0, 0x3b	; 59
    1d44:	0f 92       	push	r0
    1d46:	2f 93       	push	r18
    1d48:	3f 93       	push	r19
    1d4a:	4f 93       	push	r20
    1d4c:	5f 93       	push	r21
    1d4e:	6f 93       	push	r22
    1d50:	7f 93       	push	r23
    1d52:	8f 93       	push	r24
    1d54:	9f 93       	push	r25
    1d56:	af 93       	push	r26
    1d58:	bf 93       	push	r27
    1d5a:	ef 93       	push	r30
    1d5c:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1d5e:	e0 91 b4 22 	lds	r30, 0x22B4	; 0x8022b4 <tc_tcc1_err_callback>
    1d62:	f0 91 b5 22 	lds	r31, 0x22B5	; 0x8022b5 <tc_tcc1_err_callback+0x1>
    1d66:	30 97       	sbiw	r30, 0x00	; 0
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <__vector_21+0x34>
		tc_tcc1_err_callback();
    1d6a:	19 95       	eicall
	}
}
    1d6c:	ff 91       	pop	r31
    1d6e:	ef 91       	pop	r30
    1d70:	bf 91       	pop	r27
    1d72:	af 91       	pop	r26
    1d74:	9f 91       	pop	r25
    1d76:	8f 91       	pop	r24
    1d78:	7f 91       	pop	r23
    1d7a:	6f 91       	pop	r22
    1d7c:	5f 91       	pop	r21
    1d7e:	4f 91       	pop	r20
    1d80:	3f 91       	pop	r19
    1d82:	2f 91       	pop	r18
    1d84:	0f 90       	pop	r0
    1d86:	0b be       	out	0x3b, r0	; 59
    1d88:	0f 90       	pop	r0
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	0f 90       	pop	r0
    1d8e:	1f 90       	pop	r1
    1d90:	18 95       	reti

00001d92 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1d92:	1f 92       	push	r1
    1d94:	0f 92       	push	r0
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	0f 92       	push	r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	0b b6       	in	r0, 0x3b	; 59
    1d9e:	0f 92       	push	r0
    1da0:	2f 93       	push	r18
    1da2:	3f 93       	push	r19
    1da4:	4f 93       	push	r20
    1da6:	5f 93       	push	r21
    1da8:	6f 93       	push	r22
    1daa:	7f 93       	push	r23
    1dac:	8f 93       	push	r24
    1dae:	9f 93       	push	r25
    1db0:	af 93       	push	r26
    1db2:	bf 93       	push	r27
    1db4:	ef 93       	push	r30
    1db6:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1db8:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <tc_tcc1_cca_callback>
    1dbc:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <tc_tcc1_cca_callback+0x1>
    1dc0:	30 97       	sbiw	r30, 0x00	; 0
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    1dc4:	19 95       	eicall
	}
}
    1dc6:	ff 91       	pop	r31
    1dc8:	ef 91       	pop	r30
    1dca:	bf 91       	pop	r27
    1dcc:	af 91       	pop	r26
    1dce:	9f 91       	pop	r25
    1dd0:	8f 91       	pop	r24
    1dd2:	7f 91       	pop	r23
    1dd4:	6f 91       	pop	r22
    1dd6:	5f 91       	pop	r21
    1dd8:	4f 91       	pop	r20
    1dda:	3f 91       	pop	r19
    1ddc:	2f 91       	pop	r18
    1dde:	0f 90       	pop	r0
    1de0:	0b be       	out	0x3b, r0	; 59
    1de2:	0f 90       	pop	r0
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	0f 90       	pop	r0
    1de8:	1f 90       	pop	r1
    1dea:	18 95       	reti

00001dec <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    1dec:	1f 92       	push	r1
    1dee:	0f 92       	push	r0
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	0f 92       	push	r0
    1df4:	11 24       	eor	r1, r1
    1df6:	0b b6       	in	r0, 0x3b	; 59
    1df8:	0f 92       	push	r0
    1dfa:	2f 93       	push	r18
    1dfc:	3f 93       	push	r19
    1dfe:	4f 93       	push	r20
    1e00:	5f 93       	push	r21
    1e02:	6f 93       	push	r22
    1e04:	7f 93       	push	r23
    1e06:	8f 93       	push	r24
    1e08:	9f 93       	push	r25
    1e0a:	af 93       	push	r26
    1e0c:	bf 93       	push	r27
    1e0e:	ef 93       	push	r30
    1e10:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1e12:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <tc_tcc1_ccb_callback>
    1e16:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <tc_tcc1_ccb_callback+0x1>
    1e1a:	30 97       	sbiw	r30, 0x00	; 0
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    1e1e:	19 95       	eicall
	}
}
    1e20:	ff 91       	pop	r31
    1e22:	ef 91       	pop	r30
    1e24:	bf 91       	pop	r27
    1e26:	af 91       	pop	r26
    1e28:	9f 91       	pop	r25
    1e2a:	8f 91       	pop	r24
    1e2c:	7f 91       	pop	r23
    1e2e:	6f 91       	pop	r22
    1e30:	5f 91       	pop	r21
    1e32:	4f 91       	pop	r20
    1e34:	3f 91       	pop	r19
    1e36:	2f 91       	pop	r18
    1e38:	0f 90       	pop	r0
    1e3a:	0b be       	out	0x3b, r0	; 59
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0f 90       	pop	r0
    1e42:	1f 90       	pop	r1
    1e44:	18 95       	reti

00001e46 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1e46:	1f 92       	push	r1
    1e48:	0f 92       	push	r0
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	0f 92       	push	r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	0b b6       	in	r0, 0x3b	; 59
    1e52:	0f 92       	push	r0
    1e54:	2f 93       	push	r18
    1e56:	3f 93       	push	r19
    1e58:	4f 93       	push	r20
    1e5a:	5f 93       	push	r21
    1e5c:	6f 93       	push	r22
    1e5e:	7f 93       	push	r23
    1e60:	8f 93       	push	r24
    1e62:	9f 93       	push	r25
    1e64:	af 93       	push	r26
    1e66:	bf 93       	push	r27
    1e68:	ef 93       	push	r30
    1e6a:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1e6c:	e0 91 ae 22 	lds	r30, 0x22AE	; 0x8022ae <tc_tcd0_ovf_callback>
    1e70:	f0 91 af 22 	lds	r31, 0x22AF	; 0x8022af <tc_tcd0_ovf_callback+0x1>
    1e74:	30 97       	sbiw	r30, 0x00	; 0
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    1e78:	19 95       	eicall
	}
}
    1e7a:	ff 91       	pop	r31
    1e7c:	ef 91       	pop	r30
    1e7e:	bf 91       	pop	r27
    1e80:	af 91       	pop	r26
    1e82:	9f 91       	pop	r25
    1e84:	8f 91       	pop	r24
    1e86:	7f 91       	pop	r23
    1e88:	6f 91       	pop	r22
    1e8a:	5f 91       	pop	r21
    1e8c:	4f 91       	pop	r20
    1e8e:	3f 91       	pop	r19
    1e90:	2f 91       	pop	r18
    1e92:	0f 90       	pop	r0
    1e94:	0b be       	out	0x3b, r0	; 59
    1e96:	0f 90       	pop	r0
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	0f 90       	pop	r0
    1e9c:	1f 90       	pop	r1
    1e9e:	18 95       	reti

00001ea0 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1ea0:	1f 92       	push	r1
    1ea2:	0f 92       	push	r0
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	0f 92       	push	r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	0b b6       	in	r0, 0x3b	; 59
    1eac:	0f 92       	push	r0
    1eae:	2f 93       	push	r18
    1eb0:	3f 93       	push	r19
    1eb2:	4f 93       	push	r20
    1eb4:	5f 93       	push	r21
    1eb6:	6f 93       	push	r22
    1eb8:	7f 93       	push	r23
    1eba:	8f 93       	push	r24
    1ebc:	9f 93       	push	r25
    1ebe:	af 93       	push	r26
    1ec0:	bf 93       	push	r27
    1ec2:	ef 93       	push	r30
    1ec4:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1ec6:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <tc_tcd0_err_callback>
    1eca:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <tc_tcd0_err_callback+0x1>
    1ece:	30 97       	sbiw	r30, 0x00	; 0
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <__vector_78+0x34>
		tc_tcd0_err_callback();
    1ed2:	19 95       	eicall
	}
}
    1ed4:	ff 91       	pop	r31
    1ed6:	ef 91       	pop	r30
    1ed8:	bf 91       	pop	r27
    1eda:	af 91       	pop	r26
    1edc:	9f 91       	pop	r25
    1ede:	8f 91       	pop	r24
    1ee0:	7f 91       	pop	r23
    1ee2:	6f 91       	pop	r22
    1ee4:	5f 91       	pop	r21
    1ee6:	4f 91       	pop	r20
    1ee8:	3f 91       	pop	r19
    1eea:	2f 91       	pop	r18
    1eec:	0f 90       	pop	r0
    1eee:	0b be       	out	0x3b, r0	; 59
    1ef0:	0f 90       	pop	r0
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	0f 90       	pop	r0
    1ef6:	1f 90       	pop	r1
    1ef8:	18 95       	reti

00001efa <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1efa:	1f 92       	push	r1
    1efc:	0f 92       	push	r0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	0f 92       	push	r0
    1f02:	11 24       	eor	r1, r1
    1f04:	0b b6       	in	r0, 0x3b	; 59
    1f06:	0f 92       	push	r0
    1f08:	2f 93       	push	r18
    1f0a:	3f 93       	push	r19
    1f0c:	4f 93       	push	r20
    1f0e:	5f 93       	push	r21
    1f10:	6f 93       	push	r22
    1f12:	7f 93       	push	r23
    1f14:	8f 93       	push	r24
    1f16:	9f 93       	push	r25
    1f18:	af 93       	push	r26
    1f1a:	bf 93       	push	r27
    1f1c:	ef 93       	push	r30
    1f1e:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1f20:	e0 91 aa 22 	lds	r30, 0x22AA	; 0x8022aa <tc_tcd0_cca_callback>
    1f24:	f0 91 ab 22 	lds	r31, 0x22AB	; 0x8022ab <tc_tcd0_cca_callback+0x1>
    1f28:	30 97       	sbiw	r30, 0x00	; 0
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <__vector_79+0x34>
		tc_tcd0_cca_callback();
    1f2c:	19 95       	eicall
	}
}
    1f2e:	ff 91       	pop	r31
    1f30:	ef 91       	pop	r30
    1f32:	bf 91       	pop	r27
    1f34:	af 91       	pop	r26
    1f36:	9f 91       	pop	r25
    1f38:	8f 91       	pop	r24
    1f3a:	7f 91       	pop	r23
    1f3c:	6f 91       	pop	r22
    1f3e:	5f 91       	pop	r21
    1f40:	4f 91       	pop	r20
    1f42:	3f 91       	pop	r19
    1f44:	2f 91       	pop	r18
    1f46:	0f 90       	pop	r0
    1f48:	0b be       	out	0x3b, r0	; 59
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	0f 90       	pop	r0
    1f50:	1f 90       	pop	r1
    1f52:	18 95       	reti

00001f54 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1f54:	1f 92       	push	r1
    1f56:	0f 92       	push	r0
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	0f 92       	push	r0
    1f5c:	11 24       	eor	r1, r1
    1f5e:	0b b6       	in	r0, 0x3b	; 59
    1f60:	0f 92       	push	r0
    1f62:	2f 93       	push	r18
    1f64:	3f 93       	push	r19
    1f66:	4f 93       	push	r20
    1f68:	5f 93       	push	r21
    1f6a:	6f 93       	push	r22
    1f6c:	7f 93       	push	r23
    1f6e:	8f 93       	push	r24
    1f70:	9f 93       	push	r25
    1f72:	af 93       	push	r26
    1f74:	bf 93       	push	r27
    1f76:	ef 93       	push	r30
    1f78:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1f7a:	e0 91 a8 22 	lds	r30, 0x22A8	; 0x8022a8 <tc_tcd0_ccb_callback>
    1f7e:	f0 91 a9 22 	lds	r31, 0x22A9	; 0x8022a9 <tc_tcd0_ccb_callback+0x1>
    1f82:	30 97       	sbiw	r30, 0x00	; 0
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    1f86:	19 95       	eicall
	}
}
    1f88:	ff 91       	pop	r31
    1f8a:	ef 91       	pop	r30
    1f8c:	bf 91       	pop	r27
    1f8e:	af 91       	pop	r26
    1f90:	9f 91       	pop	r25
    1f92:	8f 91       	pop	r24
    1f94:	7f 91       	pop	r23
    1f96:	6f 91       	pop	r22
    1f98:	5f 91       	pop	r21
    1f9a:	4f 91       	pop	r20
    1f9c:	3f 91       	pop	r19
    1f9e:	2f 91       	pop	r18
    1fa0:	0f 90       	pop	r0
    1fa2:	0b be       	out	0x3b, r0	; 59
    1fa4:	0f 90       	pop	r0
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	0f 90       	pop	r0
    1faa:	1f 90       	pop	r1
    1fac:	18 95       	reti

00001fae <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1fae:	1f 92       	push	r1
    1fb0:	0f 92       	push	r0
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	0f 92       	push	r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	0b b6       	in	r0, 0x3b	; 59
    1fba:	0f 92       	push	r0
    1fbc:	2f 93       	push	r18
    1fbe:	3f 93       	push	r19
    1fc0:	4f 93       	push	r20
    1fc2:	5f 93       	push	r21
    1fc4:	6f 93       	push	r22
    1fc6:	7f 93       	push	r23
    1fc8:	8f 93       	push	r24
    1fca:	9f 93       	push	r25
    1fcc:	af 93       	push	r26
    1fce:	bf 93       	push	r27
    1fd0:	ef 93       	push	r30
    1fd2:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1fd4:	e0 91 a6 22 	lds	r30, 0x22A6	; 0x8022a6 <tc_tcd0_ccc_callback>
    1fd8:	f0 91 a7 22 	lds	r31, 0x22A7	; 0x8022a7 <tc_tcd0_ccc_callback+0x1>
    1fdc:	30 97       	sbiw	r30, 0x00	; 0
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    1fe0:	19 95       	eicall
	}
}
    1fe2:	ff 91       	pop	r31
    1fe4:	ef 91       	pop	r30
    1fe6:	bf 91       	pop	r27
    1fe8:	af 91       	pop	r26
    1fea:	9f 91       	pop	r25
    1fec:	8f 91       	pop	r24
    1fee:	7f 91       	pop	r23
    1ff0:	6f 91       	pop	r22
    1ff2:	5f 91       	pop	r21
    1ff4:	4f 91       	pop	r20
    1ff6:	3f 91       	pop	r19
    1ff8:	2f 91       	pop	r18
    1ffa:	0f 90       	pop	r0
    1ffc:	0b be       	out	0x3b, r0	; 59
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

00002008 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    2008:	1f 92       	push	r1
    200a:	0f 92       	push	r0
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	0f 92       	push	r0
    2010:	11 24       	eor	r1, r1
    2012:	0b b6       	in	r0, 0x3b	; 59
    2014:	0f 92       	push	r0
    2016:	2f 93       	push	r18
    2018:	3f 93       	push	r19
    201a:	4f 93       	push	r20
    201c:	5f 93       	push	r21
    201e:	6f 93       	push	r22
    2020:	7f 93       	push	r23
    2022:	8f 93       	push	r24
    2024:	9f 93       	push	r25
    2026:	af 93       	push	r26
    2028:	bf 93       	push	r27
    202a:	ef 93       	push	r30
    202c:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    202e:	e0 91 a4 22 	lds	r30, 0x22A4	; 0x8022a4 <tc_tcd0_ccd_callback>
    2032:	f0 91 a5 22 	lds	r31, 0x22A5	; 0x8022a5 <tc_tcd0_ccd_callback+0x1>
    2036:	30 97       	sbiw	r30, 0x00	; 0
    2038:	09 f0       	breq	.+2      	; 0x203c <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    203a:	19 95       	eicall
	}
}
    203c:	ff 91       	pop	r31
    203e:	ef 91       	pop	r30
    2040:	bf 91       	pop	r27
    2042:	af 91       	pop	r26
    2044:	9f 91       	pop	r25
    2046:	8f 91       	pop	r24
    2048:	7f 91       	pop	r23
    204a:	6f 91       	pop	r22
    204c:	5f 91       	pop	r21
    204e:	4f 91       	pop	r20
    2050:	3f 91       	pop	r19
    2052:	2f 91       	pop	r18
    2054:	0f 90       	pop	r0
    2056:	0b be       	out	0x3b, r0	; 59
    2058:	0f 90       	pop	r0
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	0f 90       	pop	r0
    205e:	1f 90       	pop	r1
    2060:	18 95       	reti

00002062 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    2062:	1f 92       	push	r1
    2064:	0f 92       	push	r0
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	0f 92       	push	r0
    206a:	11 24       	eor	r1, r1
    206c:	0b b6       	in	r0, 0x3b	; 59
    206e:	0f 92       	push	r0
    2070:	2f 93       	push	r18
    2072:	3f 93       	push	r19
    2074:	4f 93       	push	r20
    2076:	5f 93       	push	r21
    2078:	6f 93       	push	r22
    207a:	7f 93       	push	r23
    207c:	8f 93       	push	r24
    207e:	9f 93       	push	r25
    2080:	af 93       	push	r26
    2082:	bf 93       	push	r27
    2084:	ef 93       	push	r30
    2086:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    2088:	e0 91 a2 22 	lds	r30, 0x22A2	; 0x8022a2 <tc_tcd1_ovf_callback>
    208c:	f0 91 a3 22 	lds	r31, 0x22A3	; 0x8022a3 <tc_tcd1_ovf_callback+0x1>
    2090:	30 97       	sbiw	r30, 0x00	; 0
    2092:	09 f0       	breq	.+2      	; 0x2096 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    2094:	19 95       	eicall
	}
}
    2096:	ff 91       	pop	r31
    2098:	ef 91       	pop	r30
    209a:	bf 91       	pop	r27
    209c:	af 91       	pop	r26
    209e:	9f 91       	pop	r25
    20a0:	8f 91       	pop	r24
    20a2:	7f 91       	pop	r23
    20a4:	6f 91       	pop	r22
    20a6:	5f 91       	pop	r21
    20a8:	4f 91       	pop	r20
    20aa:	3f 91       	pop	r19
    20ac:	2f 91       	pop	r18
    20ae:	0f 90       	pop	r0
    20b0:	0b be       	out	0x3b, r0	; 59
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	0f 90       	pop	r0
    20b8:	1f 90       	pop	r1
    20ba:	18 95       	reti

000020bc <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    20bc:	1f 92       	push	r1
    20be:	0f 92       	push	r0
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	0f 92       	push	r0
    20c4:	11 24       	eor	r1, r1
    20c6:	0b b6       	in	r0, 0x3b	; 59
    20c8:	0f 92       	push	r0
    20ca:	2f 93       	push	r18
    20cc:	3f 93       	push	r19
    20ce:	4f 93       	push	r20
    20d0:	5f 93       	push	r21
    20d2:	6f 93       	push	r22
    20d4:	7f 93       	push	r23
    20d6:	8f 93       	push	r24
    20d8:	9f 93       	push	r25
    20da:	af 93       	push	r26
    20dc:	bf 93       	push	r27
    20de:	ef 93       	push	r30
    20e0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    20e2:	e0 91 a0 22 	lds	r30, 0x22A0	; 0x8022a0 <tc_tcd1_err_callback>
    20e6:	f0 91 a1 22 	lds	r31, 0x22A1	; 0x8022a1 <tc_tcd1_err_callback+0x1>
    20ea:	30 97       	sbiw	r30, 0x00	; 0
    20ec:	09 f0       	breq	.+2      	; 0x20f0 <__vector_84+0x34>
		tc_tcd1_err_callback();
    20ee:	19 95       	eicall
	}
}
    20f0:	ff 91       	pop	r31
    20f2:	ef 91       	pop	r30
    20f4:	bf 91       	pop	r27
    20f6:	af 91       	pop	r26
    20f8:	9f 91       	pop	r25
    20fa:	8f 91       	pop	r24
    20fc:	7f 91       	pop	r23
    20fe:	6f 91       	pop	r22
    2100:	5f 91       	pop	r21
    2102:	4f 91       	pop	r20
    2104:	3f 91       	pop	r19
    2106:	2f 91       	pop	r18
    2108:	0f 90       	pop	r0
    210a:	0b be       	out	0x3b, r0	; 59
    210c:	0f 90       	pop	r0
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	0f 90       	pop	r0
    2112:	1f 90       	pop	r1
    2114:	18 95       	reti

00002116 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	0b b6       	in	r0, 0x3b	; 59
    2122:	0f 92       	push	r0
    2124:	2f 93       	push	r18
    2126:	3f 93       	push	r19
    2128:	4f 93       	push	r20
    212a:	5f 93       	push	r21
    212c:	6f 93       	push	r22
    212e:	7f 93       	push	r23
    2130:	8f 93       	push	r24
    2132:	9f 93       	push	r25
    2134:	af 93       	push	r26
    2136:	bf 93       	push	r27
    2138:	ef 93       	push	r30
    213a:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    213c:	e0 91 9e 22 	lds	r30, 0x229E	; 0x80229e <tc_tcd1_cca_callback>
    2140:	f0 91 9f 22 	lds	r31, 0x229F	; 0x80229f <tc_tcd1_cca_callback+0x1>
    2144:	30 97       	sbiw	r30, 0x00	; 0
    2146:	09 f0       	breq	.+2      	; 0x214a <__vector_85+0x34>
		tc_tcd1_cca_callback();
    2148:	19 95       	eicall
	}
}
    214a:	ff 91       	pop	r31
    214c:	ef 91       	pop	r30
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	9f 91       	pop	r25
    2154:	8f 91       	pop	r24
    2156:	7f 91       	pop	r23
    2158:	6f 91       	pop	r22
    215a:	5f 91       	pop	r21
    215c:	4f 91       	pop	r20
    215e:	3f 91       	pop	r19
    2160:	2f 91       	pop	r18
    2162:	0f 90       	pop	r0
    2164:	0b be       	out	0x3b, r0	; 59
    2166:	0f 90       	pop	r0
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	0f 90       	pop	r0
    216c:	1f 90       	pop	r1
    216e:	18 95       	reti

00002170 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    2170:	1f 92       	push	r1
    2172:	0f 92       	push	r0
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	0f 92       	push	r0
    2178:	11 24       	eor	r1, r1
    217a:	0b b6       	in	r0, 0x3b	; 59
    217c:	0f 92       	push	r0
    217e:	2f 93       	push	r18
    2180:	3f 93       	push	r19
    2182:	4f 93       	push	r20
    2184:	5f 93       	push	r21
    2186:	6f 93       	push	r22
    2188:	7f 93       	push	r23
    218a:	8f 93       	push	r24
    218c:	9f 93       	push	r25
    218e:	af 93       	push	r26
    2190:	bf 93       	push	r27
    2192:	ef 93       	push	r30
    2194:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    2196:	e0 91 9c 22 	lds	r30, 0x229C	; 0x80229c <tc_tcd1_ccb_callback>
    219a:	f0 91 9d 22 	lds	r31, 0x229D	; 0x80229d <tc_tcd1_ccb_callback+0x1>
    219e:	30 97       	sbiw	r30, 0x00	; 0
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    21a2:	19 95       	eicall
	}
}
    21a4:	ff 91       	pop	r31
    21a6:	ef 91       	pop	r30
    21a8:	bf 91       	pop	r27
    21aa:	af 91       	pop	r26
    21ac:	9f 91       	pop	r25
    21ae:	8f 91       	pop	r24
    21b0:	7f 91       	pop	r23
    21b2:	6f 91       	pop	r22
    21b4:	5f 91       	pop	r21
    21b6:	4f 91       	pop	r20
    21b8:	3f 91       	pop	r19
    21ba:	2f 91       	pop	r18
    21bc:	0f 90       	pop	r0
    21be:	0b be       	out	0x3b, r0	; 59
    21c0:	0f 90       	pop	r0
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	0f 90       	pop	r0
    21c6:	1f 90       	pop	r1
    21c8:	18 95       	reti

000021ca <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    21ca:	1f 92       	push	r1
    21cc:	0f 92       	push	r0
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	0f 92       	push	r0
    21d2:	11 24       	eor	r1, r1
    21d4:	0b b6       	in	r0, 0x3b	; 59
    21d6:	0f 92       	push	r0
    21d8:	2f 93       	push	r18
    21da:	3f 93       	push	r19
    21dc:	4f 93       	push	r20
    21de:	5f 93       	push	r21
    21e0:	6f 93       	push	r22
    21e2:	7f 93       	push	r23
    21e4:	8f 93       	push	r24
    21e6:	9f 93       	push	r25
    21e8:	af 93       	push	r26
    21ea:	bf 93       	push	r27
    21ec:	ef 93       	push	r30
    21ee:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    21f0:	e0 91 9a 22 	lds	r30, 0x229A	; 0x80229a <tc_tce0_ovf_callback>
    21f4:	f0 91 9b 22 	lds	r31, 0x229B	; 0x80229b <tc_tce0_ovf_callback+0x1>
    21f8:	30 97       	sbiw	r30, 0x00	; 0
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__vector_47+0x34>
		tc_tce0_ovf_callback();
    21fc:	19 95       	eicall
	}
}
    21fe:	ff 91       	pop	r31
    2200:	ef 91       	pop	r30
    2202:	bf 91       	pop	r27
    2204:	af 91       	pop	r26
    2206:	9f 91       	pop	r25
    2208:	8f 91       	pop	r24
    220a:	7f 91       	pop	r23
    220c:	6f 91       	pop	r22
    220e:	5f 91       	pop	r21
    2210:	4f 91       	pop	r20
    2212:	3f 91       	pop	r19
    2214:	2f 91       	pop	r18
    2216:	0f 90       	pop	r0
    2218:	0b be       	out	0x3b, r0	; 59
    221a:	0f 90       	pop	r0
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	0f 90       	pop	r0
    2220:	1f 90       	pop	r1
    2222:	18 95       	reti

00002224 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    2224:	1f 92       	push	r1
    2226:	0f 92       	push	r0
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	0f 92       	push	r0
    222c:	11 24       	eor	r1, r1
    222e:	0b b6       	in	r0, 0x3b	; 59
    2230:	0f 92       	push	r0
    2232:	2f 93       	push	r18
    2234:	3f 93       	push	r19
    2236:	4f 93       	push	r20
    2238:	5f 93       	push	r21
    223a:	6f 93       	push	r22
    223c:	7f 93       	push	r23
    223e:	8f 93       	push	r24
    2240:	9f 93       	push	r25
    2242:	af 93       	push	r26
    2244:	bf 93       	push	r27
    2246:	ef 93       	push	r30
    2248:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    224a:	e0 91 98 22 	lds	r30, 0x2298	; 0x802298 <tc_tce0_err_callback>
    224e:	f0 91 99 22 	lds	r31, 0x2299	; 0x802299 <tc_tce0_err_callback+0x1>
    2252:	30 97       	sbiw	r30, 0x00	; 0
    2254:	09 f0       	breq	.+2      	; 0x2258 <__vector_48+0x34>
		tc_tce0_err_callback();
    2256:	19 95       	eicall
	}
}
    2258:	ff 91       	pop	r31
    225a:	ef 91       	pop	r30
    225c:	bf 91       	pop	r27
    225e:	af 91       	pop	r26
    2260:	9f 91       	pop	r25
    2262:	8f 91       	pop	r24
    2264:	7f 91       	pop	r23
    2266:	6f 91       	pop	r22
    2268:	5f 91       	pop	r21
    226a:	4f 91       	pop	r20
    226c:	3f 91       	pop	r19
    226e:	2f 91       	pop	r18
    2270:	0f 90       	pop	r0
    2272:	0b be       	out	0x3b, r0	; 59
    2274:	0f 90       	pop	r0
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	0f 90       	pop	r0
    227a:	1f 90       	pop	r1
    227c:	18 95       	reti

0000227e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    227e:	1f 92       	push	r1
    2280:	0f 92       	push	r0
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	0f 92       	push	r0
    2286:	11 24       	eor	r1, r1
    2288:	0b b6       	in	r0, 0x3b	; 59
    228a:	0f 92       	push	r0
    228c:	2f 93       	push	r18
    228e:	3f 93       	push	r19
    2290:	4f 93       	push	r20
    2292:	5f 93       	push	r21
    2294:	6f 93       	push	r22
    2296:	7f 93       	push	r23
    2298:	8f 93       	push	r24
    229a:	9f 93       	push	r25
    229c:	af 93       	push	r26
    229e:	bf 93       	push	r27
    22a0:	ef 93       	push	r30
    22a2:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    22a4:	e0 91 96 22 	lds	r30, 0x2296	; 0x802296 <tc_tce0_cca_callback>
    22a8:	f0 91 97 22 	lds	r31, 0x2297	; 0x802297 <tc_tce0_cca_callback+0x1>
    22ac:	30 97       	sbiw	r30, 0x00	; 0
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <__vector_49+0x34>
		tc_tce0_cca_callback();
    22b0:	19 95       	eicall
	}
}
    22b2:	ff 91       	pop	r31
    22b4:	ef 91       	pop	r30
    22b6:	bf 91       	pop	r27
    22b8:	af 91       	pop	r26
    22ba:	9f 91       	pop	r25
    22bc:	8f 91       	pop	r24
    22be:	7f 91       	pop	r23
    22c0:	6f 91       	pop	r22
    22c2:	5f 91       	pop	r21
    22c4:	4f 91       	pop	r20
    22c6:	3f 91       	pop	r19
    22c8:	2f 91       	pop	r18
    22ca:	0f 90       	pop	r0
    22cc:	0b be       	out	0x3b, r0	; 59
    22ce:	0f 90       	pop	r0
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	0f 90       	pop	r0
    22d4:	1f 90       	pop	r1
    22d6:	18 95       	reti

000022d8 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    22d8:	1f 92       	push	r1
    22da:	0f 92       	push	r0
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	0f 92       	push	r0
    22e0:	11 24       	eor	r1, r1
    22e2:	0b b6       	in	r0, 0x3b	; 59
    22e4:	0f 92       	push	r0
    22e6:	2f 93       	push	r18
    22e8:	3f 93       	push	r19
    22ea:	4f 93       	push	r20
    22ec:	5f 93       	push	r21
    22ee:	6f 93       	push	r22
    22f0:	7f 93       	push	r23
    22f2:	8f 93       	push	r24
    22f4:	9f 93       	push	r25
    22f6:	af 93       	push	r26
    22f8:	bf 93       	push	r27
    22fa:	ef 93       	push	r30
    22fc:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    22fe:	e0 91 94 22 	lds	r30, 0x2294	; 0x802294 <tc_tce0_ccb_callback>
    2302:	f0 91 95 22 	lds	r31, 0x2295	; 0x802295 <tc_tce0_ccb_callback+0x1>
    2306:	30 97       	sbiw	r30, 0x00	; 0
    2308:	09 f0       	breq	.+2      	; 0x230c <__vector_50+0x34>
		tc_tce0_ccb_callback();
    230a:	19 95       	eicall
	}
}
    230c:	ff 91       	pop	r31
    230e:	ef 91       	pop	r30
    2310:	bf 91       	pop	r27
    2312:	af 91       	pop	r26
    2314:	9f 91       	pop	r25
    2316:	8f 91       	pop	r24
    2318:	7f 91       	pop	r23
    231a:	6f 91       	pop	r22
    231c:	5f 91       	pop	r21
    231e:	4f 91       	pop	r20
    2320:	3f 91       	pop	r19
    2322:	2f 91       	pop	r18
    2324:	0f 90       	pop	r0
    2326:	0b be       	out	0x3b, r0	; 59
    2328:	0f 90       	pop	r0
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	0f 90       	pop	r0
    232e:	1f 90       	pop	r1
    2330:	18 95       	reti

00002332 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    2332:	1f 92       	push	r1
    2334:	0f 92       	push	r0
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	0f 92       	push	r0
    233a:	11 24       	eor	r1, r1
    233c:	0b b6       	in	r0, 0x3b	; 59
    233e:	0f 92       	push	r0
    2340:	2f 93       	push	r18
    2342:	3f 93       	push	r19
    2344:	4f 93       	push	r20
    2346:	5f 93       	push	r21
    2348:	6f 93       	push	r22
    234a:	7f 93       	push	r23
    234c:	8f 93       	push	r24
    234e:	9f 93       	push	r25
    2350:	af 93       	push	r26
    2352:	bf 93       	push	r27
    2354:	ef 93       	push	r30
    2356:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    2358:	e0 91 92 22 	lds	r30, 0x2292	; 0x802292 <tc_tce0_ccc_callback>
    235c:	f0 91 93 22 	lds	r31, 0x2293	; 0x802293 <tc_tce0_ccc_callback+0x1>
    2360:	30 97       	sbiw	r30, 0x00	; 0
    2362:	09 f0       	breq	.+2      	; 0x2366 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    2364:	19 95       	eicall
	}
}
    2366:	ff 91       	pop	r31
    2368:	ef 91       	pop	r30
    236a:	bf 91       	pop	r27
    236c:	af 91       	pop	r26
    236e:	9f 91       	pop	r25
    2370:	8f 91       	pop	r24
    2372:	7f 91       	pop	r23
    2374:	6f 91       	pop	r22
    2376:	5f 91       	pop	r21
    2378:	4f 91       	pop	r20
    237a:	3f 91       	pop	r19
    237c:	2f 91       	pop	r18
    237e:	0f 90       	pop	r0
    2380:	0b be       	out	0x3b, r0	; 59
    2382:	0f 90       	pop	r0
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	0f 90       	pop	r0
    2388:	1f 90       	pop	r1
    238a:	18 95       	reti

0000238c <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    238c:	1f 92       	push	r1
    238e:	0f 92       	push	r0
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	0f 92       	push	r0
    2394:	11 24       	eor	r1, r1
    2396:	0b b6       	in	r0, 0x3b	; 59
    2398:	0f 92       	push	r0
    239a:	2f 93       	push	r18
    239c:	3f 93       	push	r19
    239e:	4f 93       	push	r20
    23a0:	5f 93       	push	r21
    23a2:	6f 93       	push	r22
    23a4:	7f 93       	push	r23
    23a6:	8f 93       	push	r24
    23a8:	9f 93       	push	r25
    23aa:	af 93       	push	r26
    23ac:	bf 93       	push	r27
    23ae:	ef 93       	push	r30
    23b0:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    23b2:	e0 91 90 22 	lds	r30, 0x2290	; 0x802290 <tc_tce0_ccd_callback>
    23b6:	f0 91 91 22 	lds	r31, 0x2291	; 0x802291 <tc_tce0_ccd_callback+0x1>
    23ba:	30 97       	sbiw	r30, 0x00	; 0
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    23be:	19 95       	eicall
	}
}
    23c0:	ff 91       	pop	r31
    23c2:	ef 91       	pop	r30
    23c4:	bf 91       	pop	r27
    23c6:	af 91       	pop	r26
    23c8:	9f 91       	pop	r25
    23ca:	8f 91       	pop	r24
    23cc:	7f 91       	pop	r23
    23ce:	6f 91       	pop	r22
    23d0:	5f 91       	pop	r21
    23d2:	4f 91       	pop	r20
    23d4:	3f 91       	pop	r19
    23d6:	2f 91       	pop	r18
    23d8:	0f 90       	pop	r0
    23da:	0b be       	out	0x3b, r0	; 59
    23dc:	0f 90       	pop	r0
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	0f 90       	pop	r0
    23e2:	1f 90       	pop	r1
    23e4:	18 95       	reti

000023e6 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    23e6:	1f 92       	push	r1
    23e8:	0f 92       	push	r0
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	0f 92       	push	r0
    23ee:	11 24       	eor	r1, r1
    23f0:	0b b6       	in	r0, 0x3b	; 59
    23f2:	0f 92       	push	r0
    23f4:	2f 93       	push	r18
    23f6:	3f 93       	push	r19
    23f8:	4f 93       	push	r20
    23fa:	5f 93       	push	r21
    23fc:	6f 93       	push	r22
    23fe:	7f 93       	push	r23
    2400:	8f 93       	push	r24
    2402:	9f 93       	push	r25
    2404:	af 93       	push	r26
    2406:	bf 93       	push	r27
    2408:	ef 93       	push	r30
    240a:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    240c:	e0 91 8e 22 	lds	r30, 0x228E	; 0x80228e <tc_tce1_ovf_callback>
    2410:	f0 91 8f 22 	lds	r31, 0x228F	; 0x80228f <tc_tce1_ovf_callback+0x1>
    2414:	30 97       	sbiw	r30, 0x00	; 0
    2416:	09 f0       	breq	.+2      	; 0x241a <__vector_53+0x34>
		tc_tce1_ovf_callback();
    2418:	19 95       	eicall
	}
}
    241a:	ff 91       	pop	r31
    241c:	ef 91       	pop	r30
    241e:	bf 91       	pop	r27
    2420:	af 91       	pop	r26
    2422:	9f 91       	pop	r25
    2424:	8f 91       	pop	r24
    2426:	7f 91       	pop	r23
    2428:	6f 91       	pop	r22
    242a:	5f 91       	pop	r21
    242c:	4f 91       	pop	r20
    242e:	3f 91       	pop	r19
    2430:	2f 91       	pop	r18
    2432:	0f 90       	pop	r0
    2434:	0b be       	out	0x3b, r0	; 59
    2436:	0f 90       	pop	r0
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	0f 90       	pop	r0
    243c:	1f 90       	pop	r1
    243e:	18 95       	reti

00002440 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    2440:	1f 92       	push	r1
    2442:	0f 92       	push	r0
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	0f 92       	push	r0
    2448:	11 24       	eor	r1, r1
    244a:	0b b6       	in	r0, 0x3b	; 59
    244c:	0f 92       	push	r0
    244e:	2f 93       	push	r18
    2450:	3f 93       	push	r19
    2452:	4f 93       	push	r20
    2454:	5f 93       	push	r21
    2456:	6f 93       	push	r22
    2458:	7f 93       	push	r23
    245a:	8f 93       	push	r24
    245c:	9f 93       	push	r25
    245e:	af 93       	push	r26
    2460:	bf 93       	push	r27
    2462:	ef 93       	push	r30
    2464:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    2466:	e0 91 8c 22 	lds	r30, 0x228C	; 0x80228c <tc_tce1_err_callback>
    246a:	f0 91 8d 22 	lds	r31, 0x228D	; 0x80228d <tc_tce1_err_callback+0x1>
    246e:	30 97       	sbiw	r30, 0x00	; 0
    2470:	09 f0       	breq	.+2      	; 0x2474 <__vector_54+0x34>
		tc_tce1_err_callback();
    2472:	19 95       	eicall
	}
}
    2474:	ff 91       	pop	r31
    2476:	ef 91       	pop	r30
    2478:	bf 91       	pop	r27
    247a:	af 91       	pop	r26
    247c:	9f 91       	pop	r25
    247e:	8f 91       	pop	r24
    2480:	7f 91       	pop	r23
    2482:	6f 91       	pop	r22
    2484:	5f 91       	pop	r21
    2486:	4f 91       	pop	r20
    2488:	3f 91       	pop	r19
    248a:	2f 91       	pop	r18
    248c:	0f 90       	pop	r0
    248e:	0b be       	out	0x3b, r0	; 59
    2490:	0f 90       	pop	r0
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	0f 90       	pop	r0
    2496:	1f 90       	pop	r1
    2498:	18 95       	reti

0000249a <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    249a:	1f 92       	push	r1
    249c:	0f 92       	push	r0
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	0f 92       	push	r0
    24a2:	11 24       	eor	r1, r1
    24a4:	0b b6       	in	r0, 0x3b	; 59
    24a6:	0f 92       	push	r0
    24a8:	2f 93       	push	r18
    24aa:	3f 93       	push	r19
    24ac:	4f 93       	push	r20
    24ae:	5f 93       	push	r21
    24b0:	6f 93       	push	r22
    24b2:	7f 93       	push	r23
    24b4:	8f 93       	push	r24
    24b6:	9f 93       	push	r25
    24b8:	af 93       	push	r26
    24ba:	bf 93       	push	r27
    24bc:	ef 93       	push	r30
    24be:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    24c0:	e0 91 8a 22 	lds	r30, 0x228A	; 0x80228a <tc_tce1_cca_callback>
    24c4:	f0 91 8b 22 	lds	r31, 0x228B	; 0x80228b <tc_tce1_cca_callback+0x1>
    24c8:	30 97       	sbiw	r30, 0x00	; 0
    24ca:	09 f0       	breq	.+2      	; 0x24ce <__vector_55+0x34>
		tc_tce1_cca_callback();
    24cc:	19 95       	eicall
	}
}
    24ce:	ff 91       	pop	r31
    24d0:	ef 91       	pop	r30
    24d2:	bf 91       	pop	r27
    24d4:	af 91       	pop	r26
    24d6:	9f 91       	pop	r25
    24d8:	8f 91       	pop	r24
    24da:	7f 91       	pop	r23
    24dc:	6f 91       	pop	r22
    24de:	5f 91       	pop	r21
    24e0:	4f 91       	pop	r20
    24e2:	3f 91       	pop	r19
    24e4:	2f 91       	pop	r18
    24e6:	0f 90       	pop	r0
    24e8:	0b be       	out	0x3b, r0	; 59
    24ea:	0f 90       	pop	r0
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	0f 90       	pop	r0
    24f0:	1f 90       	pop	r1
    24f2:	18 95       	reti

000024f4 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    24f4:	1f 92       	push	r1
    24f6:	0f 92       	push	r0
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	0f 92       	push	r0
    24fc:	11 24       	eor	r1, r1
    24fe:	0b b6       	in	r0, 0x3b	; 59
    2500:	0f 92       	push	r0
    2502:	2f 93       	push	r18
    2504:	3f 93       	push	r19
    2506:	4f 93       	push	r20
    2508:	5f 93       	push	r21
    250a:	6f 93       	push	r22
    250c:	7f 93       	push	r23
    250e:	8f 93       	push	r24
    2510:	9f 93       	push	r25
    2512:	af 93       	push	r26
    2514:	bf 93       	push	r27
    2516:	ef 93       	push	r30
    2518:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    251a:	e0 91 88 22 	lds	r30, 0x2288	; 0x802288 <tc_tce1_ccb_callback>
    251e:	f0 91 89 22 	lds	r31, 0x2289	; 0x802289 <tc_tce1_ccb_callback+0x1>
    2522:	30 97       	sbiw	r30, 0x00	; 0
    2524:	09 f0       	breq	.+2      	; 0x2528 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    2526:	19 95       	eicall
	}
}
    2528:	ff 91       	pop	r31
    252a:	ef 91       	pop	r30
    252c:	bf 91       	pop	r27
    252e:	af 91       	pop	r26
    2530:	9f 91       	pop	r25
    2532:	8f 91       	pop	r24
    2534:	7f 91       	pop	r23
    2536:	6f 91       	pop	r22
    2538:	5f 91       	pop	r21
    253a:	4f 91       	pop	r20
    253c:	3f 91       	pop	r19
    253e:	2f 91       	pop	r18
    2540:	0f 90       	pop	r0
    2542:	0b be       	out	0x3b, r0	; 59
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	0f 90       	pop	r0
    254a:	1f 90       	pop	r1
    254c:	18 95       	reti

0000254e <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    254e:	1f 92       	push	r1
    2550:	0f 92       	push	r0
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1
    2558:	0b b6       	in	r0, 0x3b	; 59
    255a:	0f 92       	push	r0
    255c:	2f 93       	push	r18
    255e:	3f 93       	push	r19
    2560:	4f 93       	push	r20
    2562:	5f 93       	push	r21
    2564:	6f 93       	push	r22
    2566:	7f 93       	push	r23
    2568:	8f 93       	push	r24
    256a:	9f 93       	push	r25
    256c:	af 93       	push	r26
    256e:	bf 93       	push	r27
    2570:	ef 93       	push	r30
    2572:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    2574:	e0 91 86 22 	lds	r30, 0x2286	; 0x802286 <tc_tcf0_ovf_callback>
    2578:	f0 91 87 22 	lds	r31, 0x2287	; 0x802287 <tc_tcf0_ovf_callback+0x1>
    257c:	30 97       	sbiw	r30, 0x00	; 0
    257e:	09 f0       	breq	.+2      	; 0x2582 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    2580:	19 95       	eicall
	}
}
    2582:	ff 91       	pop	r31
    2584:	ef 91       	pop	r30
    2586:	bf 91       	pop	r27
    2588:	af 91       	pop	r26
    258a:	9f 91       	pop	r25
    258c:	8f 91       	pop	r24
    258e:	7f 91       	pop	r23
    2590:	6f 91       	pop	r22
    2592:	5f 91       	pop	r21
    2594:	4f 91       	pop	r20
    2596:	3f 91       	pop	r19
    2598:	2f 91       	pop	r18
    259a:	0f 90       	pop	r0
    259c:	0b be       	out	0x3b, r0	; 59
    259e:	0f 90       	pop	r0
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	0f 90       	pop	r0
    25a4:	1f 90       	pop	r1
    25a6:	18 95       	reti

000025a8 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    25a8:	1f 92       	push	r1
    25aa:	0f 92       	push	r0
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	0f 92       	push	r0
    25b0:	11 24       	eor	r1, r1
    25b2:	0b b6       	in	r0, 0x3b	; 59
    25b4:	0f 92       	push	r0
    25b6:	2f 93       	push	r18
    25b8:	3f 93       	push	r19
    25ba:	4f 93       	push	r20
    25bc:	5f 93       	push	r21
    25be:	6f 93       	push	r22
    25c0:	7f 93       	push	r23
    25c2:	8f 93       	push	r24
    25c4:	9f 93       	push	r25
    25c6:	af 93       	push	r26
    25c8:	bf 93       	push	r27
    25ca:	ef 93       	push	r30
    25cc:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    25ce:	e0 91 84 22 	lds	r30, 0x2284	; 0x802284 <tc_tcf0_err_callback>
    25d2:	f0 91 85 22 	lds	r31, 0x2285	; 0x802285 <tc_tcf0_err_callback+0x1>
    25d6:	30 97       	sbiw	r30, 0x00	; 0
    25d8:	09 f0       	breq	.+2      	; 0x25dc <__vector_109+0x34>
		tc_tcf0_err_callback();
    25da:	19 95       	eicall
	}
}
    25dc:	ff 91       	pop	r31
    25de:	ef 91       	pop	r30
    25e0:	bf 91       	pop	r27
    25e2:	af 91       	pop	r26
    25e4:	9f 91       	pop	r25
    25e6:	8f 91       	pop	r24
    25e8:	7f 91       	pop	r23
    25ea:	6f 91       	pop	r22
    25ec:	5f 91       	pop	r21
    25ee:	4f 91       	pop	r20
    25f0:	3f 91       	pop	r19
    25f2:	2f 91       	pop	r18
    25f4:	0f 90       	pop	r0
    25f6:	0b be       	out	0x3b, r0	; 59
    25f8:	0f 90       	pop	r0
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	0f 90       	pop	r0
    25fe:	1f 90       	pop	r1
    2600:	18 95       	reti

00002602 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    2602:	1f 92       	push	r1
    2604:	0f 92       	push	r0
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	0f 92       	push	r0
    260a:	11 24       	eor	r1, r1
    260c:	0b b6       	in	r0, 0x3b	; 59
    260e:	0f 92       	push	r0
    2610:	2f 93       	push	r18
    2612:	3f 93       	push	r19
    2614:	4f 93       	push	r20
    2616:	5f 93       	push	r21
    2618:	6f 93       	push	r22
    261a:	7f 93       	push	r23
    261c:	8f 93       	push	r24
    261e:	9f 93       	push	r25
    2620:	af 93       	push	r26
    2622:	bf 93       	push	r27
    2624:	ef 93       	push	r30
    2626:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    2628:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <tc_tcf0_cca_callback>
    262c:	f0 91 83 22 	lds	r31, 0x2283	; 0x802283 <tc_tcf0_cca_callback+0x1>
    2630:	30 97       	sbiw	r30, 0x00	; 0
    2632:	09 f0       	breq	.+2      	; 0x2636 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    2634:	19 95       	eicall
	}
}
    2636:	ff 91       	pop	r31
    2638:	ef 91       	pop	r30
    263a:	bf 91       	pop	r27
    263c:	af 91       	pop	r26
    263e:	9f 91       	pop	r25
    2640:	8f 91       	pop	r24
    2642:	7f 91       	pop	r23
    2644:	6f 91       	pop	r22
    2646:	5f 91       	pop	r21
    2648:	4f 91       	pop	r20
    264a:	3f 91       	pop	r19
    264c:	2f 91       	pop	r18
    264e:	0f 90       	pop	r0
    2650:	0b be       	out	0x3b, r0	; 59
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f 90       	pop	r0
    2658:	1f 90       	pop	r1
    265a:	18 95       	reti

0000265c <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    265c:	1f 92       	push	r1
    265e:	0f 92       	push	r0
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	0f 92       	push	r0
    2664:	11 24       	eor	r1, r1
    2666:	0b b6       	in	r0, 0x3b	; 59
    2668:	0f 92       	push	r0
    266a:	2f 93       	push	r18
    266c:	3f 93       	push	r19
    266e:	4f 93       	push	r20
    2670:	5f 93       	push	r21
    2672:	6f 93       	push	r22
    2674:	7f 93       	push	r23
    2676:	8f 93       	push	r24
    2678:	9f 93       	push	r25
    267a:	af 93       	push	r26
    267c:	bf 93       	push	r27
    267e:	ef 93       	push	r30
    2680:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    2682:	e0 91 80 22 	lds	r30, 0x2280	; 0x802280 <tc_tcf0_ccb_callback>
    2686:	f0 91 81 22 	lds	r31, 0x2281	; 0x802281 <tc_tcf0_ccb_callback+0x1>
    268a:	30 97       	sbiw	r30, 0x00	; 0
    268c:	09 f0       	breq	.+2      	; 0x2690 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    268e:	19 95       	eicall
	}
}
    2690:	ff 91       	pop	r31
    2692:	ef 91       	pop	r30
    2694:	bf 91       	pop	r27
    2696:	af 91       	pop	r26
    2698:	9f 91       	pop	r25
    269a:	8f 91       	pop	r24
    269c:	7f 91       	pop	r23
    269e:	6f 91       	pop	r22
    26a0:	5f 91       	pop	r21
    26a2:	4f 91       	pop	r20
    26a4:	3f 91       	pop	r19
    26a6:	2f 91       	pop	r18
    26a8:	0f 90       	pop	r0
    26aa:	0b be       	out	0x3b, r0	; 59
    26ac:	0f 90       	pop	r0
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	0f 90       	pop	r0
    26b2:	1f 90       	pop	r1
    26b4:	18 95       	reti

000026b6 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    26b6:	1f 92       	push	r1
    26b8:	0f 92       	push	r0
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	0f 92       	push	r0
    26be:	11 24       	eor	r1, r1
    26c0:	0b b6       	in	r0, 0x3b	; 59
    26c2:	0f 92       	push	r0
    26c4:	2f 93       	push	r18
    26c6:	3f 93       	push	r19
    26c8:	4f 93       	push	r20
    26ca:	5f 93       	push	r21
    26cc:	6f 93       	push	r22
    26ce:	7f 93       	push	r23
    26d0:	8f 93       	push	r24
    26d2:	9f 93       	push	r25
    26d4:	af 93       	push	r26
    26d6:	bf 93       	push	r27
    26d8:	ef 93       	push	r30
    26da:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    26dc:	e0 91 7e 22 	lds	r30, 0x227E	; 0x80227e <tc_tcf0_ccc_callback>
    26e0:	f0 91 7f 22 	lds	r31, 0x227F	; 0x80227f <tc_tcf0_ccc_callback+0x1>
    26e4:	30 97       	sbiw	r30, 0x00	; 0
    26e6:	09 f0       	breq	.+2      	; 0x26ea <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    26e8:	19 95       	eicall
	}
}
    26ea:	ff 91       	pop	r31
    26ec:	ef 91       	pop	r30
    26ee:	bf 91       	pop	r27
    26f0:	af 91       	pop	r26
    26f2:	9f 91       	pop	r25
    26f4:	8f 91       	pop	r24
    26f6:	7f 91       	pop	r23
    26f8:	6f 91       	pop	r22
    26fa:	5f 91       	pop	r21
    26fc:	4f 91       	pop	r20
    26fe:	3f 91       	pop	r19
    2700:	2f 91       	pop	r18
    2702:	0f 90       	pop	r0
    2704:	0b be       	out	0x3b, r0	; 59
    2706:	0f 90       	pop	r0
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	0f 90       	pop	r0
    270c:	1f 90       	pop	r1
    270e:	18 95       	reti

00002710 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    2710:	1f 92       	push	r1
    2712:	0f 92       	push	r0
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	0f 92       	push	r0
    2718:	11 24       	eor	r1, r1
    271a:	0b b6       	in	r0, 0x3b	; 59
    271c:	0f 92       	push	r0
    271e:	2f 93       	push	r18
    2720:	3f 93       	push	r19
    2722:	4f 93       	push	r20
    2724:	5f 93       	push	r21
    2726:	6f 93       	push	r22
    2728:	7f 93       	push	r23
    272a:	8f 93       	push	r24
    272c:	9f 93       	push	r25
    272e:	af 93       	push	r26
    2730:	bf 93       	push	r27
    2732:	ef 93       	push	r30
    2734:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    2736:	e0 91 7c 22 	lds	r30, 0x227C	; 0x80227c <tc_tcf0_ccd_callback>
    273a:	f0 91 7d 22 	lds	r31, 0x227D	; 0x80227d <tc_tcf0_ccd_callback+0x1>
    273e:	30 97       	sbiw	r30, 0x00	; 0
    2740:	09 f0       	breq	.+2      	; 0x2744 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    2742:	19 95       	eicall
	}
}
    2744:	ff 91       	pop	r31
    2746:	ef 91       	pop	r30
    2748:	bf 91       	pop	r27
    274a:	af 91       	pop	r26
    274c:	9f 91       	pop	r25
    274e:	8f 91       	pop	r24
    2750:	7f 91       	pop	r23
    2752:	6f 91       	pop	r22
    2754:	5f 91       	pop	r21
    2756:	4f 91       	pop	r20
    2758:	3f 91       	pop	r19
    275a:	2f 91       	pop	r18
    275c:	0f 90       	pop	r0
    275e:	0b be       	out	0x3b, r0	; 59
    2760:	0f 90       	pop	r0
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	0f 90       	pop	r0
    2766:	1f 90       	pop	r1
    2768:	18 95       	reti

0000276a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    276a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    276e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2770:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2772:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2776:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2778:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    277c:	08 95       	ret

0000277e <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    277e:	af 92       	push	r10
    2780:	bf 92       	push	r11
    2782:	cf 92       	push	r12
    2784:	df 92       	push	r13
    2786:	ef 92       	push	r14
    2788:	ff 92       	push	r15
    278a:	0f 93       	push	r16
    278c:	1f 93       	push	r17
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	c8 2f       	mov	r28, r24
    2794:	e6 2e       	mov	r14, r22
    2796:	b4 2e       	mov	r11, r20
    2798:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    279a:	00 e0       	ldi	r16, 0x00	; 0
    279c:	f9 01       	movw	r30, r18
    279e:	24 81       	ldd	r18, Z+4	; 0x04
    27a0:	43 81       	ldd	r20, Z+3	; 0x03
    27a2:	6b 2d       	mov	r22, r11
    27a4:	8e 2d       	mov	r24, r14
    27a6:	02 d9       	rcall	.-3580   	; 0x19ac <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    27a8:	f6 01       	movw	r30, r12
    27aa:	80 81       	ld	r24, Z
    27ac:	81 11       	cpse	r24, r1
    27ae:	3a c0       	rjmp	.+116    	; 0x2824 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    27b0:	83 81       	ldd	r24, Z+3	; 0x03
    27b2:	28 2f       	mov	r18, r24
    27b4:	26 95       	lsr	r18
    27b6:	26 95       	lsr	r18
    27b8:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    27ba:	87 70       	andi	r24, 0x07	; 7
    27bc:	09 f0       	breq	.+2      	; 0x27c0 <gfx_mono_draw_char+0x42>
		char_row_size++;
    27be:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    27c0:	f6 01       	movw	r30, r12
    27c2:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    27c4:	8c 2f       	mov	r24, r28
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	35 81       	ldd	r19, Z+5	; 0x05
    27ca:	83 1b       	sub	r24, r19
    27cc:	91 09       	sbc	r25, r1
    27ce:	2a 9d       	mul	r18, r10
    27d0:	90 01       	movw	r18, r0
    27d2:	11 24       	eor	r1, r1
    27d4:	82 9f       	mul	r24, r18
    27d6:	a0 01       	movw	r20, r0
    27d8:	83 9f       	mul	r24, r19
    27da:	50 0d       	add	r21, r0
    27dc:	92 9f       	mul	r25, r18
    27de:	50 0d       	add	r21, r0
    27e0:	11 24       	eor	r1, r1
    27e2:	01 81       	ldd	r16, Z+1	; 0x01
    27e4:	12 81       	ldd	r17, Z+2	; 0x02
    27e6:	04 0f       	add	r16, r20
    27e8:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    27ea:	f6 01       	movw	r30, r12
    27ec:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    27ee:	ff 20       	and	r15, r15
    27f0:	a9 f0       	breq	.+42     	; 0x281c <gfx_mono_draw_char+0x9e>
    27f2:	d0 e0       	ldi	r29, 0x00	; 0
    27f4:	c0 e0       	ldi	r28, 0x00	; 0
    27f6:	8e 2d       	mov	r24, r14
    27f8:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    27fa:	9c 2f       	mov	r25, r28
    27fc:	97 70       	andi	r25, 0x07	; 7
    27fe:	21 f4       	brne	.+8      	; 0x2808 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    2800:	f8 01       	movw	r30, r16
    2802:	d4 91       	lpm	r29, Z
				glyph_data++;
    2804:	0f 5f       	subi	r16, 0xFF	; 255
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    2808:	dd 23       	and	r29, r29
    280a:	24 f4       	brge	.+8      	; 0x2814 <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	6b 2d       	mov	r22, r11
    2810:	0e 94 3f 06 	call	0xc7e	; 0xc7e <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    2814:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    2816:	cf 5f       	subi	r28, 0xFF	; 255
    2818:	fc 12       	cpse	r15, r28
    281a:	ed cf       	rjmp	.-38     	; 0x27f6 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    281c:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    281e:	aa 94       	dec	r10
	} while (rows_left > 0);
    2820:	a1 10       	cpse	r10, r1
    2822:	e3 cf       	rjmp	.-58     	; 0x27ea <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	bf 90       	pop	r11
    2836:	af 90       	pop	r10
    2838:	08 95       	ret

0000283a <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    283a:	df 92       	push	r13
    283c:	ef 92       	push	r14
    283e:	ff 92       	push	r15
    2840:	0f 93       	push	r16
    2842:	1f 93       	push	r17
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	d6 2e       	mov	r13, r22
    284a:	04 2f       	mov	r16, r20
    284c:	79 01       	movw	r14, r18
    284e:	ec 01       	movw	r28, r24
    2850:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    2852:	89 91       	ld	r24, Y+
    2854:	8a 30       	cpi	r24, 0x0A	; 10
    2856:	31 f4       	brne	.+12     	; 0x2864 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    2858:	f7 01       	movw	r30, r14
    285a:	84 81       	ldd	r24, Z+4	; 0x04
    285c:	8f 5f       	subi	r24, 0xFF	; 255
    285e:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    2860:	1d 2d       	mov	r17, r13
    2862:	09 c0       	rjmp	.+18     	; 0x2876 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    2864:	8d 30       	cpi	r24, 0x0D	; 13
    2866:	39 f0       	breq	.+14     	; 0x2876 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    2868:	97 01       	movw	r18, r14
    286a:	40 2f       	mov	r20, r16
    286c:	61 2f       	mov	r22, r17
    286e:	87 df       	rcall	.-242    	; 0x277e <gfx_mono_draw_char>
			x += font->width;
    2870:	f7 01       	movw	r30, r14
    2872:	83 81       	ldd	r24, Z+3	; 0x03
    2874:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    2876:	88 81       	ld	r24, Y
    2878:	81 11       	cpse	r24, r1
    287a:	eb cf       	rjmp	.-42     	; 0x2852 <gfx_mono_draw_string+0x18>
}
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	ff 90       	pop	r15
    2886:	ef 90       	pop	r14
    2888:	df 90       	pop	r13
    288a:	08 95       	ret

0000288c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2896:	c6 2f       	mov	r28, r22
    2898:	d0 e0       	ldi	r29, 0x00	; 0
    289a:	de 01       	movw	r26, r28
    289c:	02 2e       	mov	r0, r18
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <ioport_configure_port_pin+0x18>
    28a0:	b5 95       	asr	r27
    28a2:	a7 95       	ror	r26
    28a4:	0a 94       	dec	r0
    28a6:	e2 f7       	brpl	.-8      	; 0x28a0 <ioport_configure_port_pin+0x14>
    28a8:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    28aa:	50 8b       	std	Z+16, r21	; 0x10
    28ac:	2f 5f       	subi	r18, 0xFF	; 255
    28ae:	3f 4f       	sbci	r19, 0xFF	; 255
    28b0:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    28b2:	28 30       	cpi	r18, 0x08	; 8
    28b4:	31 05       	cpc	r19, r1
    28b6:	89 f7       	brne	.-30     	; 0x289a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    28b8:	40 ff       	sbrs	r20, 0
    28ba:	0a c0       	rjmp	.+20     	; 0x28d0 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    28bc:	41 ff       	sbrs	r20, 1
    28be:	03 c0       	rjmp	.+6      	; 0x28c6 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    28c0:	fc 01       	movw	r30, r24
    28c2:	65 83       	std	Z+5, r22	; 0x05
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    28c6:	fc 01       	movw	r30, r24
    28c8:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    28ca:	fc 01       	movw	r30, r24
    28cc:	61 83       	std	Z+1, r22	; 0x01
    28ce:	02 c0       	rjmp	.+4      	; 0x28d4 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    28d0:	fc 01       	movw	r30, r24
    28d2:	62 83       	std	Z+2, r22	; 0x02
	}
}
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    28da:	43 e0       	ldi	r20, 0x03	; 3
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	61 e0       	ldi	r22, 0x01	; 1
    28e0:	80 ee       	ldi	r24, 0xE0	; 224
    28e2:	97 e0       	ldi	r25, 0x07	; 7
    28e4:	d3 df       	rcall	.-90     	; 0x288c <ioport_configure_port_pin>
    28e6:	43 e0       	ldi	r20, 0x03	; 3
    28e8:	50 e0       	ldi	r21, 0x00	; 0
    28ea:	62 e0       	ldi	r22, 0x02	; 2
    28ec:	80 ee       	ldi	r24, 0xE0	; 224
    28ee:	97 e0       	ldi	r25, 0x07	; 7
    28f0:	cd df       	rcall	.-102    	; 0x288c <ioport_configure_port_pin>
    28f2:	43 e0       	ldi	r20, 0x03	; 3
    28f4:	50 e0       	ldi	r21, 0x00	; 0
    28f6:	60 e1       	ldi	r22, 0x10	; 16
    28f8:	80 e6       	ldi	r24, 0x60	; 96
    28fa:	96 e0       	ldi	r25, 0x06	; 6
    28fc:	c7 df       	rcall	.-114    	; 0x288c <ioport_configure_port_pin>
    28fe:	41 e0       	ldi	r20, 0x01	; 1
    2900:	50 e4       	ldi	r21, 0x40	; 64
    2902:	60 e2       	ldi	r22, 0x20	; 32
    2904:	80 e6       	ldi	r24, 0x60	; 96
    2906:	96 e0       	ldi	r25, 0x06	; 6
    2908:	c1 df       	rcall	.-126    	; 0x288c <ioport_configure_port_pin>
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	5b e1       	ldi	r21, 0x1B	; 27
    290e:	60 e2       	ldi	r22, 0x20	; 32
    2910:	80 e8       	ldi	r24, 0x80	; 128
    2912:	96 e0       	ldi	r25, 0x06	; 6
    2914:	bb df       	rcall	.-138    	; 0x288c <ioport_configure_port_pin>
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	5b e1       	ldi	r21, 0x1B	; 27
    291a:	62 e0       	ldi	r22, 0x02	; 2
    291c:	80 ea       	ldi	r24, 0xA0	; 160
    291e:	96 e0       	ldi	r25, 0x06	; 6
    2920:	b5 df       	rcall	.-150    	; 0x288c <ioport_configure_port_pin>
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	5b e1       	ldi	r21, 0x1B	; 27
    2926:	64 e0       	ldi	r22, 0x04	; 4
    2928:	80 ea       	ldi	r24, 0xA0	; 160
    292a:	96 e0       	ldi	r25, 0x06	; 6
    292c:	af df       	rcall	.-162    	; 0x288c <ioport_configure_port_pin>
    292e:	43 e0       	ldi	r20, 0x03	; 3
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	62 e0       	ldi	r22, 0x02	; 2
    2934:	80 e6       	ldi	r24, 0x60	; 96
    2936:	96 e0       	ldi	r25, 0x06	; 6
    2938:	a9 df       	rcall	.-174    	; 0x288c <ioport_configure_port_pin>
    293a:	43 e0       	ldi	r20, 0x03	; 3
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	68 e0       	ldi	r22, 0x08	; 8
    2940:	80 e6       	ldi	r24, 0x60	; 96
    2942:	96 e0       	ldi	r25, 0x06	; 6
    2944:	a3 df       	rcall	.-186    	; 0x288c <ioport_configure_port_pin>
    2946:	43 e0       	ldi	r20, 0x03	; 3
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	68 e0       	ldi	r22, 0x08	; 8
    294c:	80 ea       	ldi	r24, 0xA0	; 160
    294e:	96 e0       	ldi	r25, 0x06	; 6
    2950:	9d df       	rcall	.-198    	; 0x288c <ioport_configure_port_pin>
    2952:	43 e0       	ldi	r20, 0x03	; 3
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	80 e6       	ldi	r24, 0x60	; 96
    295a:	96 e0       	ldi	r25, 0x06	; 6
    295c:	97 df       	rcall	.-210    	; 0x288c <ioport_configure_port_pin>
    295e:	43 e0       	ldi	r20, 0x03	; 3
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	68 e0       	ldi	r22, 0x08	; 8
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	96 e0       	ldi	r25, 0x06	; 6
    2968:	91 df       	rcall	.-222    	; 0x288c <ioport_configure_port_pin>
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	60 e1       	ldi	r22, 0x10	; 16
    2970:	80 e8       	ldi	r24, 0x80	; 128
    2972:	96 e0       	ldi	r25, 0x06	; 6
    2974:	8b df       	rcall	.-234    	; 0x288c <ioport_configure_port_pin>
    2976:	43 e0       	ldi	r20, 0x03	; 3
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	62 e0       	ldi	r22, 0x02	; 2
    297c:	80 e6       	ldi	r24, 0x60	; 96
    297e:	96 e0       	ldi	r25, 0x06	; 6
    2980:	85 df       	rcall	.-246    	; 0x288c <ioport_configure_port_pin>
    2982:	43 e0       	ldi	r20, 0x03	; 3
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	68 e0       	ldi	r22, 0x08	; 8
    2988:	80 e6       	ldi	r24, 0x60	; 96
    298a:	96 e0       	ldi	r25, 0x06	; 6
    298c:	7f df       	rcall	.-258    	; 0x288c <ioport_configure_port_pin>
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	64 e0       	ldi	r22, 0x04	; 4
    2994:	80 e6       	ldi	r24, 0x60	; 96
    2996:	96 e0       	ldi	r25, 0x06	; 6
    2998:	79 df       	rcall	.-270    	; 0x288c <ioport_configure_port_pin>
    299a:	43 e0       	ldi	r20, 0x03	; 3
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	60 e1       	ldi	r22, 0x10	; 16
    29a0:	80 ea       	ldi	r24, 0xA0	; 160
    29a2:	96 e0       	ldi	r25, 0x06	; 6
    29a4:	73 df       	rcall	.-282    	; 0x288c <ioport_configure_port_pin>
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	61 e0       	ldi	r22, 0x01	; 1
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	96 e0       	ldi	r25, 0x06	; 6
    29b0:	6d df       	rcall	.-294    	; 0x288c <ioport_configure_port_pin>
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	64 e0       	ldi	r22, 0x04	; 4
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	96 e0       	ldi	r25, 0x06	; 6
    29bc:	67 df       	rcall	.-306    	; 0x288c <ioport_configure_port_pin>
    29be:	40 e0       	ldi	r20, 0x00	; 0
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	62 e0       	ldi	r22, 0x02	; 2
    29c4:	80 e2       	ldi	r24, 0x20	; 32
    29c6:	96 e0       	ldi	r25, 0x06	; 6
    29c8:	61 df       	rcall	.-318    	; 0x288c <ioport_configure_port_pin>
    29ca:	43 e0       	ldi	r20, 0x03	; 3
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	68 e0       	ldi	r22, 0x08	; 8
    29d0:	80 e4       	ldi	r24, 0x40	; 64
    29d2:	96 e0       	ldi	r25, 0x06	; 6
    29d4:	5b df       	rcall	.-330    	; 0x288c <ioport_configure_port_pin>
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	64 e0       	ldi	r22, 0x04	; 4
    29dc:	80 e4       	ldi	r24, 0x40	; 64
    29de:	96 e0       	ldi	r25, 0x06	; 6
    29e0:	55 df       	rcall	.-342    	; 0x288c <ioport_configure_port_pin>
    29e2:	43 e0       	ldi	r20, 0x03	; 3
    29e4:	50 e0       	ldi	r21, 0x00	; 0
    29e6:	68 e0       	ldi	r22, 0x08	; 8
    29e8:	80 e6       	ldi	r24, 0x60	; 96
    29ea:	96 e0       	ldi	r25, 0x06	; 6
    29ec:	4f df       	rcall	.-354    	; 0x288c <ioport_configure_port_pin>
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	64 e0       	ldi	r22, 0x04	; 4
    29f4:	80 e6       	ldi	r24, 0x60	; 96
    29f6:	96 e0       	ldi	r25, 0x06	; 6
    29f8:	49 df       	rcall	.-366    	; 0x288c <ioport_configure_port_pin>
    29fa:	43 e0       	ldi	r20, 0x03	; 3
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	68 e0       	ldi	r22, 0x08	; 8
    2a00:	80 e8       	ldi	r24, 0x80	; 128
    2a02:	96 e0       	ldi	r25, 0x06	; 6
    2a04:	43 df       	rcall	.-378    	; 0x288c <ioport_configure_port_pin>
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	64 e0       	ldi	r22, 0x04	; 4
    2a0c:	80 e8       	ldi	r24, 0x80	; 128
    2a0e:	96 e0       	ldi	r25, 0x06	; 6
    2a10:	3d cf       	rjmp	.-390    	; 0x288c <ioport_configure_port_pin>
    2a12:	08 95       	ret

00002a14 <__portable_avr_delay_cycles>:
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    2a14:	04 c0       	rjmp	.+8      	; 0x2a1e <__portable_avr_delay_cycles+0xa>
    2a16:	61 50       	subi	r22, 0x01	; 1
    2a18:	71 09       	sbc	r23, r1
    2a1a:	81 09       	sbc	r24, r1
    2a1c:	91 09       	sbc	r25, r1
    2a1e:	61 15       	cp	r22, r1
    2a20:	71 05       	cpc	r23, r1
    2a22:	81 05       	cpc	r24, r1
    2a24:	91 05       	cpc	r25, r1
    2a26:	b9 f7       	brne	.-18     	; 0x2a16 <__portable_avr_delay_cycles+0x2>
    2a28:	08 95       	ret

00002a2a <main>:

int main (void)
{
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <main+0x6>
    2a30:	cd b7       	in	r28, 0x3d	; 61
    /* Insert system clock initialization code here (sysclk_init()). */
    board_init();
    2a32:	de b7       	in	r29, 0x3e	; 62

    /* Insert application code here, after the board has been initialized. */

    //init lcd
    gfx_mono_init();    
    2a34:	52 df       	rcall	.-348    	; 0x28da <board_init>
    2a36:	0e 94 fd 05 	call	0xbfa	; 0xbfa <gfx_mono_st7565r_init>
    adc_sensors_init();
    2a3a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <adc_sensors_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2a3e:	87 e0       	ldi	r24, 0x07	; 7
    2a40:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2a44:	78 94       	sei
    2a46:	80 e1       	ldi	r24, 0x10	; 16
    2a48:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

    //set background lcd on
    gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);

    //set display - output lcd
    gfx_mono_draw_string("Welcome!",0, 0, &sysfont);
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e2       	ldi	r19, 0x20	; 32
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	87 e0       	ldi	r24, 0x07	; 7
    2a56:	90 e2       	ldi	r25, 0x20	; 32
    delay_ms(1000);
    2a58:	f0 de       	rcall	.-544    	; 0x283a <gfx_mono_draw_string>
    2a5a:	66 e1       	ldi	r22, 0x16	; 22
    2a5c:	76 e1       	ldi	r23, 0x16	; 22
    2a5e:	85 e0       	ldi	r24, 0x05	; 5
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    gfx_mono_draw_string("We will use sensor",0, 8, &sysfont);
    2a62:	d8 df       	rcall	.-80     	; 0x2a14 <__portable_avr_delay_cycles>
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e2       	ldi	r19, 0x20	; 32
    2a68:	48 e0       	ldi	r20, 0x08	; 8
    2a6a:	60 e0       	ldi	r22, 0x00	; 0
    2a6c:	80 e1       	ldi	r24, 0x10	; 16
    delay_ms(1000);
    2a6e:	90 e2       	ldi	r25, 0x20	; 32
    2a70:	e4 de       	rcall	.-568    	; 0x283a <gfx_mono_draw_string>
    2a72:	66 e1       	ldi	r22, 0x16	; 22
    2a74:	76 e1       	ldi	r23, 0x16	; 22
    2a76:	85 e0       	ldi	r24, 0x05	; 5
    gfx_mono_draw_string("    Sensor Read    ",0, 0, &sysfont);
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	cc df       	rcall	.-104    	; 0x2a14 <__portable_avr_delay_cycles>
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e2       	ldi	r19, 0x20	; 32
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    gfx_mono_draw_string("                   ",0, 8, &sysfont);
    2a84:	83 e2       	ldi	r24, 0x23	; 35
    2a86:	90 e2       	ldi	r25, 0x20	; 32
    2a88:	d8 de       	rcall	.-592    	; 0x283a <gfx_mono_draw_string>
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e2       	ldi	r19, 0x20	; 32
    2a8e:	48 e0       	ldi	r20, 0x08	; 8
    2a90:	60 e0       	ldi	r22, 0x00	; 0
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    2a92:	87 e3       	ldi	r24, 0x37	; 55
    2a94:	90 e2       	ldi	r25, 0x20	; 32
    {
        ntc_measure();                                          // Mengambil data dari pengukuran suhu oleh NTC temperature sensor
        while(!ntc_data_is_ready());                            // Menunggu data sampai siap untuk ditampilkan      
        volatile int8_t temperature = ntc_get_temperature();    // Mengambil hasil olah data dalam Celcius

        snprintf(strbuf, sizeof(strbuf), "Tempr : %3d",temperature);
    2a96:	d1 de       	rcall	.-606    	; 0x283a <gfx_mono_draw_string>
    2a98:	00 e0       	ldi	r16, 0x00	; 0
    2a9a:	12 e0       	ldi	r17, 0x02	; 2
    2a9c:	0f 2e       	mov	r0, r31
    2a9e:	fb e4       	ldi	r31, 0x4B	; 75
    2aa0:	af 2e       	mov	r10, r31
    2aa2:	f0 e2       	ldi	r31, 0x20	; 32
    2aa4:	bf 2e       	mov	r11, r31
    2aa6:	f0 2d       	mov	r31, r0
    2aa8:	0f 2e       	mov	r0, r31
    2aaa:	f9 ec       	ldi	r31, 0xC9	; 201
    2aac:	ef 2e       	mov	r14, r31
    2aae:	f0 2d       	mov	r31, r0
    2ab0:	0f 2e       	mov	r0, r31
    2ab2:	f4 ec       	ldi	r31, 0xC4	; 196
    2ab4:	cf 2e       	mov	r12, r31
    2ab6:	f2 e2       	ldi	r31, 0x22	; 34
    2ab8:	df 2e       	mov	r13, r31
        // Dikarenakan hasil yang diperoleh merupakan data raw diperlukan sampling agar mendapatkan hasil yang baik
        if(iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
            iterations = 0;
            intensity /= LIGHTSENSOR_NUM_SAMPLES;
            
            snprintf(strbuf, sizeof(strbuf), "Light : %3d",intensity);
    2aba:	f0 2d       	mov	r31, r0
    2abc:	2c 2c       	mov	r2, r12
    2abe:	3d 2c       	mov	r3, r13
    2ac0:	0f 2e       	mov	r0, r31
    2ac2:	f7 e5       	ldi	r31, 0x57	; 87
    2ac4:	8f 2e       	mov	r8, r31
{
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int main (void)
{
    2ac6:	f0 e2       	ldi	r31, 0x20	; 32
    2ac8:	9f 2e       	mov	r9, r31
    2aca:	f0 2d       	mov	r31, r0
    2acc:	0f 2e       	mov	r0, r31
    2ace:	f5 e1       	ldi	r31, 0x15	; 21
    2ad0:	ff 2e       	mov	r15, r31
    2ad2:	f0 2d       	mov	r31, r0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ad4:	41 2c       	mov	r4, r1
    2ad6:	51 2c       	mov	r5, r1
	cpu_irq_disable();
    2ad8:	32 01       	movw	r6, r4
	return flags;
    2ada:	8f b7       	in	r24, 0x3f	; 63
    2adc:	8a 83       	std	Y+2, r24	; 0x02
    2ade:	f8 94       	cli
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	f8 01       	movw	r30, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ae4:	80 81       	ld	r24, Z
    

    while (1)
    {
        ntc_measure();                                          // Mengambil data dari pengukuran suhu oleh NTC temperature sensor
        while(!ntc_data_is_ready());                            // Menunggu data sampai siap untuk ditampilkan      
    2ae6:	88 60       	ori	r24, 0x08	; 8
    2ae8:	80 83       	st	Z, r24
    2aea:	9f bf       	out	0x3f, r25	; 63
    2aec:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <ntc_data_is_ready>
        volatile int8_t temperature = ntc_get_temperature();    // Mengambil hasil olah data dalam Celcius
    2af0:	88 23       	and	r24, r24
    2af2:	e1 f3       	breq	.-8      	; 0x2aec <main+0xc2>

        snprintf(strbuf, sizeof(strbuf), "Tempr : %3d",temperature);
    2af4:	0e 94 4a 03 	call	0x694	; 0x694 <ntc_get_temperature>
    2af8:	8b 83       	std	Y+3, r24	; 0x03
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	28 2f       	mov	r18, r24
    2afe:	08 2e       	mov	r0, r24
    2b00:	00 0c       	add	r0, r0
    2b02:	33 0b       	sbc	r19, r19
    2b04:	3f 93       	push	r19
    2b06:	8f 93       	push	r24
    2b08:	bf 92       	push	r11
    2b0a:	af 92       	push	r10
    2b0c:	1f 92       	push	r1
        gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2b0e:	ef 92       	push	r14
    2b10:	df 92       	push	r13
    2b12:	cf 92       	push	r12
    2b14:	e7 d1       	rcall	.+974    	; 0x2ee4 <snprintf>
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e2       	ldi	r19, 0x20	; 32
    2b1a:	48 e0       	ldi	r20, 0x08	; 8
    2b1c:	60 e0       	ldi	r22, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b1e:	82 2d       	mov	r24, r2
    2b20:	93 2d       	mov	r25, r3
	cpu_irq_disable();
    2b22:	8b de       	rcall	.-746    	; 0x283a <gfx_mono_draw_string>
	return flags;
    2b24:	8f b7       	in	r24, 0x3f	; 63
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	f8 94       	cli
    2b2a:	99 81       	ldd	r25, Y+1	; 0x01
    2b2c:	f8 01       	movw	r30, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b2e:	80 81       	ld	r24, Z
    2b30:	84 60       	ori	r24, 0x04	; 4
    2b32:	80 83       	st	Z, r24

        lightsensor_measure();                                  // Mengambil data dari pengukuran intensitas oleh light sensor
        while(!lightsensor_data_is_ready());                    // Menunggu data sampai siap untuk ditampilkan
    2b34:	9f bf       	out	0x3f, r25	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lightsensor_data_is_ready>
        intensity += lightsensor_get_raw_value();               // Mengambil hasil olah data dalam raw ADC value
    2b3e:	88 23       	and	r24, r24
    2b40:	e1 f3       	breq	.-8      	; 0x2b3a <main+0x110>
    2b42:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <lightsensor_get_raw_value>
    2b46:	09 2e       	mov	r0, r25
    2b48:	00 0c       	add	r0, r0
    2b4a:	aa 0b       	sbc	r26, r26
    2b4c:	bb 0b       	sbc	r27, r27
    2b4e:	48 0e       	add	r4, r24

        // Dikarenakan hasil yang diperoleh merupakan data raw diperlukan sampling agar mendapatkan hasil yang baik
        if(iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
    2b50:	59 1e       	adc	r5, r25
    2b52:	6a 1e       	adc	r6, r26
            iterations = 0;
            intensity /= LIGHTSENSOR_NUM_SAMPLES;
            
            snprintf(strbuf, sizeof(strbuf), "Light : %3d",intensity);
    2b54:	7b 1e       	adc	r7, r27
    2b56:	fa 94       	dec	r15
    2b58:	f1 10       	cpse	r15, r1
    2b5a:	bf cf       	rjmp	.-130    	; 0x2ada <main+0xb0>
    2b5c:	c3 01       	movw	r24, r6
    2b5e:	b2 01       	movw	r22, r4
    2b60:	24 e1       	ldi	r18, 0x14	; 20
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	9b d1       	rcall	.+822    	; 0x2ea0 <__udivmodsi4>
    2b6a:	5f 93       	push	r21
    2b6c:	4f 93       	push	r20
    2b6e:	3f 93       	push	r19
    2b70:	2f 93       	push	r18
    2b72:	9f 92       	push	r9
    2b74:	8f 92       	push	r8
    2b76:	1f 92       	push	r1
            gfx_mono_draw_string(strbuf,0, 16, &sysfont);
    2b78:	ef 92       	push	r14
    2b7a:	df 92       	push	r13
    2b7c:	cf 92       	push	r12
    2b7e:	b2 d1       	rcall	.+868    	; 0x2ee4 <snprintf>
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e2       	ldi	r19, 0x20	; 32
    2b84:	40 e1       	ldi	r20, 0x10	; 16
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	c6 01       	movw	r24, r12
    2b8a:	57 de       	rcall	.-850    	; 0x283a <gfx_mono_draw_string>
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	9d cf       	rjmp	.-198    	; 0x2acc <main+0xa2>

00002b92 <__subsf3>:
    2b92:	50 58       	subi	r21, 0x80	; 128

00002b94 <__addsf3>:
    2b94:	bb 27       	eor	r27, r27
    2b96:	aa 27       	eor	r26, r26
    2b98:	0e d0       	rcall	.+28     	; 0x2bb6 <__addsf3x>
    2b9a:	e5 c0       	rjmp	.+458    	; 0x2d66 <__fp_round>
    2b9c:	d6 d0       	rcall	.+428    	; 0x2d4a <__fp_pscA>
    2b9e:	30 f0       	brcs	.+12     	; 0x2bac <__addsf3+0x18>
    2ba0:	db d0       	rcall	.+438    	; 0x2d58 <__fp_pscB>
    2ba2:	20 f0       	brcs	.+8      	; 0x2bac <__addsf3+0x18>
    2ba4:	31 f4       	brne	.+12     	; 0x2bb2 <__addsf3+0x1e>
    2ba6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ba8:	11 f4       	brne	.+4      	; 0x2bae <__addsf3+0x1a>
    2baa:	1e f4       	brtc	.+6      	; 0x2bb2 <__addsf3+0x1e>
    2bac:	cb c0       	rjmp	.+406    	; 0x2d44 <__fp_nan>
    2bae:	0e f4       	brtc	.+2      	; 0x2bb2 <__addsf3+0x1e>
    2bb0:	e0 95       	com	r30
    2bb2:	e7 fb       	bst	r30, 7
    2bb4:	c1 c0       	rjmp	.+386    	; 0x2d38 <__fp_inf>

00002bb6 <__addsf3x>:
    2bb6:	e9 2f       	mov	r30, r25
    2bb8:	e7 d0       	rcall	.+462    	; 0x2d88 <__fp_split3>
    2bba:	80 f3       	brcs	.-32     	; 0x2b9c <__addsf3+0x8>
    2bbc:	ba 17       	cp	r27, r26
    2bbe:	62 07       	cpc	r22, r18
    2bc0:	73 07       	cpc	r23, r19
    2bc2:	84 07       	cpc	r24, r20
    2bc4:	95 07       	cpc	r25, r21
    2bc6:	18 f0       	brcs	.+6      	; 0x2bce <__addsf3x+0x18>
    2bc8:	71 f4       	brne	.+28     	; 0x2be6 <__addsf3x+0x30>
    2bca:	9e f5       	brtc	.+102    	; 0x2c32 <__addsf3x+0x7c>
    2bcc:	ff c0       	rjmp	.+510    	; 0x2dcc <__fp_zero>
    2bce:	0e f4       	brtc	.+2      	; 0x2bd2 <__addsf3x+0x1c>
    2bd0:	e0 95       	com	r30
    2bd2:	0b 2e       	mov	r0, r27
    2bd4:	ba 2f       	mov	r27, r26
    2bd6:	a0 2d       	mov	r26, r0
    2bd8:	0b 01       	movw	r0, r22
    2bda:	b9 01       	movw	r22, r18
    2bdc:	90 01       	movw	r18, r0
    2bde:	0c 01       	movw	r0, r24
    2be0:	ca 01       	movw	r24, r20
    2be2:	a0 01       	movw	r20, r0
    2be4:	11 24       	eor	r1, r1
    2be6:	ff 27       	eor	r31, r31
    2be8:	59 1b       	sub	r21, r25
    2bea:	99 f0       	breq	.+38     	; 0x2c12 <__addsf3x+0x5c>
    2bec:	59 3f       	cpi	r21, 0xF9	; 249
    2bee:	50 f4       	brcc	.+20     	; 0x2c04 <__addsf3x+0x4e>
    2bf0:	50 3e       	cpi	r21, 0xE0	; 224
    2bf2:	68 f1       	brcs	.+90     	; 0x2c4e <__addsf3x+0x98>
    2bf4:	1a 16       	cp	r1, r26
    2bf6:	f0 40       	sbci	r31, 0x00	; 0
    2bf8:	a2 2f       	mov	r26, r18
    2bfa:	23 2f       	mov	r18, r19
    2bfc:	34 2f       	mov	r19, r20
    2bfe:	44 27       	eor	r20, r20
    2c00:	58 5f       	subi	r21, 0xF8	; 248
    2c02:	f3 cf       	rjmp	.-26     	; 0x2bea <__addsf3x+0x34>
    2c04:	46 95       	lsr	r20
    2c06:	37 95       	ror	r19
    2c08:	27 95       	ror	r18
    2c0a:	a7 95       	ror	r26
    2c0c:	f0 40       	sbci	r31, 0x00	; 0
    2c0e:	53 95       	inc	r21
    2c10:	c9 f7       	brne	.-14     	; 0x2c04 <__addsf3x+0x4e>
    2c12:	7e f4       	brtc	.+30     	; 0x2c32 <__addsf3x+0x7c>
    2c14:	1f 16       	cp	r1, r31
    2c16:	ba 0b       	sbc	r27, r26
    2c18:	62 0b       	sbc	r22, r18
    2c1a:	73 0b       	sbc	r23, r19
    2c1c:	84 0b       	sbc	r24, r20
    2c1e:	ba f0       	brmi	.+46     	; 0x2c4e <__addsf3x+0x98>
    2c20:	91 50       	subi	r25, 0x01	; 1
    2c22:	a1 f0       	breq	.+40     	; 0x2c4c <__addsf3x+0x96>
    2c24:	ff 0f       	add	r31, r31
    2c26:	bb 1f       	adc	r27, r27
    2c28:	66 1f       	adc	r22, r22
    2c2a:	77 1f       	adc	r23, r23
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	c2 f7       	brpl	.-16     	; 0x2c20 <__addsf3x+0x6a>
    2c30:	0e c0       	rjmp	.+28     	; 0x2c4e <__addsf3x+0x98>
    2c32:	ba 0f       	add	r27, r26
    2c34:	62 1f       	adc	r22, r18
    2c36:	73 1f       	adc	r23, r19
    2c38:	84 1f       	adc	r24, r20
    2c3a:	48 f4       	brcc	.+18     	; 0x2c4e <__addsf3x+0x98>
    2c3c:	87 95       	ror	r24
    2c3e:	77 95       	ror	r23
    2c40:	67 95       	ror	r22
    2c42:	b7 95       	ror	r27
    2c44:	f7 95       	ror	r31
    2c46:	9e 3f       	cpi	r25, 0xFE	; 254
    2c48:	08 f0       	brcs	.+2      	; 0x2c4c <__addsf3x+0x96>
    2c4a:	b3 cf       	rjmp	.-154    	; 0x2bb2 <__addsf3+0x1e>
    2c4c:	93 95       	inc	r25
    2c4e:	88 0f       	add	r24, r24
    2c50:	08 f0       	brcs	.+2      	; 0x2c54 <__addsf3x+0x9e>
    2c52:	99 27       	eor	r25, r25
    2c54:	ee 0f       	add	r30, r30
    2c56:	97 95       	ror	r25
    2c58:	87 95       	ror	r24
    2c5a:	08 95       	ret

00002c5c <__fixsfsi>:
    2c5c:	04 d0       	rcall	.+8      	; 0x2c66 <__fixunssfsi>
    2c5e:	68 94       	set
    2c60:	b1 11       	cpse	r27, r1
    2c62:	b5 c0       	rjmp	.+362    	; 0x2dce <__fp_szero>
    2c64:	08 95       	ret

00002c66 <__fixunssfsi>:
    2c66:	98 d0       	rcall	.+304    	; 0x2d98 <__fp_splitA>
    2c68:	88 f0       	brcs	.+34     	; 0x2c8c <__fixunssfsi+0x26>
    2c6a:	9f 57       	subi	r25, 0x7F	; 127
    2c6c:	90 f0       	brcs	.+36     	; 0x2c92 <__fixunssfsi+0x2c>
    2c6e:	b9 2f       	mov	r27, r25
    2c70:	99 27       	eor	r25, r25
    2c72:	b7 51       	subi	r27, 0x17	; 23
    2c74:	a0 f0       	brcs	.+40     	; 0x2c9e <__fixunssfsi+0x38>
    2c76:	d1 f0       	breq	.+52     	; 0x2cac <__fixunssfsi+0x46>
    2c78:	66 0f       	add	r22, r22
    2c7a:	77 1f       	adc	r23, r23
    2c7c:	88 1f       	adc	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	1a f0       	brmi	.+6      	; 0x2c88 <__fixunssfsi+0x22>
    2c82:	ba 95       	dec	r27
    2c84:	c9 f7       	brne	.-14     	; 0x2c78 <__fixunssfsi+0x12>
    2c86:	12 c0       	rjmp	.+36     	; 0x2cac <__fixunssfsi+0x46>
    2c88:	b1 30       	cpi	r27, 0x01	; 1
    2c8a:	81 f0       	breq	.+32     	; 0x2cac <__fixunssfsi+0x46>
    2c8c:	9f d0       	rcall	.+318    	; 0x2dcc <__fp_zero>
    2c8e:	b1 e0       	ldi	r27, 0x01	; 1
    2c90:	08 95       	ret
    2c92:	9c c0       	rjmp	.+312    	; 0x2dcc <__fp_zero>
    2c94:	67 2f       	mov	r22, r23
    2c96:	78 2f       	mov	r23, r24
    2c98:	88 27       	eor	r24, r24
    2c9a:	b8 5f       	subi	r27, 0xF8	; 248
    2c9c:	39 f0       	breq	.+14     	; 0x2cac <__fixunssfsi+0x46>
    2c9e:	b9 3f       	cpi	r27, 0xF9	; 249
    2ca0:	cc f3       	brlt	.-14     	; 0x2c94 <__fixunssfsi+0x2e>
    2ca2:	86 95       	lsr	r24
    2ca4:	77 95       	ror	r23
    2ca6:	67 95       	ror	r22
    2ca8:	b3 95       	inc	r27
    2caa:	d9 f7       	brne	.-10     	; 0x2ca2 <__fixunssfsi+0x3c>
    2cac:	3e f4       	brtc	.+14     	; 0x2cbc <__fixunssfsi+0x56>
    2cae:	90 95       	com	r25
    2cb0:	80 95       	com	r24
    2cb2:	70 95       	com	r23
    2cb4:	61 95       	neg	r22
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cba:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbc:	08 95       	ret

00002cbe <__floatunsisf>:
    2cbe:	e8 94       	clt
    2cc0:	09 c0       	rjmp	.+18     	; 0x2cd4 <__floatsisf+0x12>

00002cc2 <__floatsisf>:
    2cc2:	97 fb       	bst	r25, 7
    2cc4:	3e f4       	brtc	.+14     	; 0x2cd4 <__floatsisf+0x12>
    2cc6:	90 95       	com	r25
    2cc8:	80 95       	com	r24
    2cca:	70 95       	com	r23
    2ccc:	61 95       	neg	r22
    2cce:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd0:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd4:	99 23       	and	r25, r25
    2cd6:	a9 f0       	breq	.+42     	; 0x2d02 <__floatsisf+0x40>
    2cd8:	f9 2f       	mov	r31, r25
    2cda:	96 e9       	ldi	r25, 0x96	; 150
    2cdc:	bb 27       	eor	r27, r27
    2cde:	93 95       	inc	r25
    2ce0:	f6 95       	lsr	r31
    2ce2:	87 95       	ror	r24
    2ce4:	77 95       	ror	r23
    2ce6:	67 95       	ror	r22
    2ce8:	b7 95       	ror	r27
    2cea:	f1 11       	cpse	r31, r1
    2cec:	f8 cf       	rjmp	.-16     	; 0x2cde <__floatsisf+0x1c>
    2cee:	fa f4       	brpl	.+62     	; 0x2d2e <__floatsisf+0x6c>
    2cf0:	bb 0f       	add	r27, r27
    2cf2:	11 f4       	brne	.+4      	; 0x2cf8 <__floatsisf+0x36>
    2cf4:	60 ff       	sbrs	r22, 0
    2cf6:	1b c0       	rjmp	.+54     	; 0x2d2e <__floatsisf+0x6c>
    2cf8:	6f 5f       	subi	r22, 0xFF	; 255
    2cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfc:	8f 4f       	sbci	r24, 0xFF	; 255
    2cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2d00:	16 c0       	rjmp	.+44     	; 0x2d2e <__floatsisf+0x6c>
    2d02:	88 23       	and	r24, r24
    2d04:	11 f0       	breq	.+4      	; 0x2d0a <__floatsisf+0x48>
    2d06:	96 e9       	ldi	r25, 0x96	; 150
    2d08:	11 c0       	rjmp	.+34     	; 0x2d2c <__floatsisf+0x6a>
    2d0a:	77 23       	and	r23, r23
    2d0c:	21 f0       	breq	.+8      	; 0x2d16 <__floatsisf+0x54>
    2d0e:	9e e8       	ldi	r25, 0x8E	; 142
    2d10:	87 2f       	mov	r24, r23
    2d12:	76 2f       	mov	r23, r22
    2d14:	05 c0       	rjmp	.+10     	; 0x2d20 <__floatsisf+0x5e>
    2d16:	66 23       	and	r22, r22
    2d18:	71 f0       	breq	.+28     	; 0x2d36 <__floatsisf+0x74>
    2d1a:	96 e8       	ldi	r25, 0x86	; 134
    2d1c:	86 2f       	mov	r24, r22
    2d1e:	70 e0       	ldi	r23, 0x00	; 0
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	2a f0       	brmi	.+10     	; 0x2d2e <__floatsisf+0x6c>
    2d24:	9a 95       	dec	r25
    2d26:	66 0f       	add	r22, r22
    2d28:	77 1f       	adc	r23, r23
    2d2a:	88 1f       	adc	r24, r24
    2d2c:	da f7       	brpl	.-10     	; 0x2d24 <__floatsisf+0x62>
    2d2e:	88 0f       	add	r24, r24
    2d30:	96 95       	lsr	r25
    2d32:	87 95       	ror	r24
    2d34:	97 f9       	bld	r25, 7
    2d36:	08 95       	ret

00002d38 <__fp_inf>:
    2d38:	97 f9       	bld	r25, 7
    2d3a:	9f 67       	ori	r25, 0x7F	; 127
    2d3c:	80 e8       	ldi	r24, 0x80	; 128
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	08 95       	ret

00002d44 <__fp_nan>:
    2d44:	9f ef       	ldi	r25, 0xFF	; 255
    2d46:	80 ec       	ldi	r24, 0xC0	; 192
    2d48:	08 95       	ret

00002d4a <__fp_pscA>:
    2d4a:	00 24       	eor	r0, r0
    2d4c:	0a 94       	dec	r0
    2d4e:	16 16       	cp	r1, r22
    2d50:	17 06       	cpc	r1, r23
    2d52:	18 06       	cpc	r1, r24
    2d54:	09 06       	cpc	r0, r25
    2d56:	08 95       	ret

00002d58 <__fp_pscB>:
    2d58:	00 24       	eor	r0, r0
    2d5a:	0a 94       	dec	r0
    2d5c:	12 16       	cp	r1, r18
    2d5e:	13 06       	cpc	r1, r19
    2d60:	14 06       	cpc	r1, r20
    2d62:	05 06       	cpc	r0, r21
    2d64:	08 95       	ret

00002d66 <__fp_round>:
    2d66:	09 2e       	mov	r0, r25
    2d68:	03 94       	inc	r0
    2d6a:	00 0c       	add	r0, r0
    2d6c:	11 f4       	brne	.+4      	; 0x2d72 <__fp_round+0xc>
    2d6e:	88 23       	and	r24, r24
    2d70:	52 f0       	brmi	.+20     	; 0x2d86 <__fp_round+0x20>
    2d72:	bb 0f       	add	r27, r27
    2d74:	40 f4       	brcc	.+16     	; 0x2d86 <__fp_round+0x20>
    2d76:	bf 2b       	or	r27, r31
    2d78:	11 f4       	brne	.+4      	; 0x2d7e <__fp_round+0x18>
    2d7a:	60 ff       	sbrs	r22, 0
    2d7c:	04 c0       	rjmp	.+8      	; 0x2d86 <__fp_round+0x20>
    2d7e:	6f 5f       	subi	r22, 0xFF	; 255
    2d80:	7f 4f       	sbci	r23, 0xFF	; 255
    2d82:	8f 4f       	sbci	r24, 0xFF	; 255
    2d84:	9f 4f       	sbci	r25, 0xFF	; 255
    2d86:	08 95       	ret

00002d88 <__fp_split3>:
    2d88:	57 fd       	sbrc	r21, 7
    2d8a:	90 58       	subi	r25, 0x80	; 128
    2d8c:	44 0f       	add	r20, r20
    2d8e:	55 1f       	adc	r21, r21
    2d90:	59 f0       	breq	.+22     	; 0x2da8 <__fp_splitA+0x10>
    2d92:	5f 3f       	cpi	r21, 0xFF	; 255
    2d94:	71 f0       	breq	.+28     	; 0x2db2 <__fp_splitA+0x1a>
    2d96:	47 95       	ror	r20

00002d98 <__fp_splitA>:
    2d98:	88 0f       	add	r24, r24
    2d9a:	97 fb       	bst	r25, 7
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	61 f0       	breq	.+24     	; 0x2db8 <__fp_splitA+0x20>
    2da0:	9f 3f       	cpi	r25, 0xFF	; 255
    2da2:	79 f0       	breq	.+30     	; 0x2dc2 <__fp_splitA+0x2a>
    2da4:	87 95       	ror	r24
    2da6:	08 95       	ret
    2da8:	12 16       	cp	r1, r18
    2daa:	13 06       	cpc	r1, r19
    2dac:	14 06       	cpc	r1, r20
    2dae:	55 1f       	adc	r21, r21
    2db0:	f2 cf       	rjmp	.-28     	; 0x2d96 <__fp_split3+0xe>
    2db2:	46 95       	lsr	r20
    2db4:	f1 df       	rcall	.-30     	; 0x2d98 <__fp_splitA>
    2db6:	08 c0       	rjmp	.+16     	; 0x2dc8 <__fp_splitA+0x30>
    2db8:	16 16       	cp	r1, r22
    2dba:	17 06       	cpc	r1, r23
    2dbc:	18 06       	cpc	r1, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	f1 cf       	rjmp	.-30     	; 0x2da4 <__fp_splitA+0xc>
    2dc2:	86 95       	lsr	r24
    2dc4:	71 05       	cpc	r23, r1
    2dc6:	61 05       	cpc	r22, r1
    2dc8:	08 94       	sec
    2dca:	08 95       	ret

00002dcc <__fp_zero>:
    2dcc:	e8 94       	clt

00002dce <__fp_szero>:
    2dce:	bb 27       	eor	r27, r27
    2dd0:	66 27       	eor	r22, r22
    2dd2:	77 27       	eor	r23, r23
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	97 f9       	bld	r25, 7
    2dd8:	08 95       	ret

00002dda <__mulsf3>:
    2dda:	0b d0       	rcall	.+22     	; 0x2df2 <__mulsf3x>
    2ddc:	c4 cf       	rjmp	.-120    	; 0x2d66 <__fp_round>
    2dde:	b5 df       	rcall	.-150    	; 0x2d4a <__fp_pscA>
    2de0:	28 f0       	brcs	.+10     	; 0x2dec <__mulsf3+0x12>
    2de2:	ba df       	rcall	.-140    	; 0x2d58 <__fp_pscB>
    2de4:	18 f0       	brcs	.+6      	; 0x2dec <__mulsf3+0x12>
    2de6:	95 23       	and	r25, r21
    2de8:	09 f0       	breq	.+2      	; 0x2dec <__mulsf3+0x12>
    2dea:	a6 cf       	rjmp	.-180    	; 0x2d38 <__fp_inf>
    2dec:	ab cf       	rjmp	.-170    	; 0x2d44 <__fp_nan>
    2dee:	11 24       	eor	r1, r1
    2df0:	ee cf       	rjmp	.-36     	; 0x2dce <__fp_szero>

00002df2 <__mulsf3x>:
    2df2:	ca df       	rcall	.-108    	; 0x2d88 <__fp_split3>
    2df4:	a0 f3       	brcs	.-24     	; 0x2dde <__mulsf3+0x4>

00002df6 <__mulsf3_pse>:
    2df6:	95 9f       	mul	r25, r21
    2df8:	d1 f3       	breq	.-12     	; 0x2dee <__mulsf3+0x14>
    2dfa:	95 0f       	add	r25, r21
    2dfc:	50 e0       	ldi	r21, 0x00	; 0
    2dfe:	55 1f       	adc	r21, r21
    2e00:	62 9f       	mul	r22, r18
    2e02:	f0 01       	movw	r30, r0
    2e04:	72 9f       	mul	r23, r18
    2e06:	bb 27       	eor	r27, r27
    2e08:	f0 0d       	add	r31, r0
    2e0a:	b1 1d       	adc	r27, r1
    2e0c:	63 9f       	mul	r22, r19
    2e0e:	aa 27       	eor	r26, r26
    2e10:	f0 0d       	add	r31, r0
    2e12:	b1 1d       	adc	r27, r1
    2e14:	aa 1f       	adc	r26, r26
    2e16:	64 9f       	mul	r22, r20
    2e18:	66 27       	eor	r22, r22
    2e1a:	b0 0d       	add	r27, r0
    2e1c:	a1 1d       	adc	r26, r1
    2e1e:	66 1f       	adc	r22, r22
    2e20:	82 9f       	mul	r24, r18
    2e22:	22 27       	eor	r18, r18
    2e24:	b0 0d       	add	r27, r0
    2e26:	a1 1d       	adc	r26, r1
    2e28:	62 1f       	adc	r22, r18
    2e2a:	73 9f       	mul	r23, r19
    2e2c:	b0 0d       	add	r27, r0
    2e2e:	a1 1d       	adc	r26, r1
    2e30:	62 1f       	adc	r22, r18
    2e32:	83 9f       	mul	r24, r19
    2e34:	a0 0d       	add	r26, r0
    2e36:	61 1d       	adc	r22, r1
    2e38:	22 1f       	adc	r18, r18
    2e3a:	74 9f       	mul	r23, r20
    2e3c:	33 27       	eor	r19, r19
    2e3e:	a0 0d       	add	r26, r0
    2e40:	61 1d       	adc	r22, r1
    2e42:	23 1f       	adc	r18, r19
    2e44:	84 9f       	mul	r24, r20
    2e46:	60 0d       	add	r22, r0
    2e48:	21 1d       	adc	r18, r1
    2e4a:	82 2f       	mov	r24, r18
    2e4c:	76 2f       	mov	r23, r22
    2e4e:	6a 2f       	mov	r22, r26
    2e50:	11 24       	eor	r1, r1
    2e52:	9f 57       	subi	r25, 0x7F	; 127
    2e54:	50 40       	sbci	r21, 0x00	; 0
    2e56:	8a f0       	brmi	.+34     	; 0x2e7a <__mulsf3_pse+0x84>
    2e58:	e1 f0       	breq	.+56     	; 0x2e92 <__mulsf3_pse+0x9c>
    2e5a:	88 23       	and	r24, r24
    2e5c:	4a f0       	brmi	.+18     	; 0x2e70 <__mulsf3_pse+0x7a>
    2e5e:	ee 0f       	add	r30, r30
    2e60:	ff 1f       	adc	r31, r31
    2e62:	bb 1f       	adc	r27, r27
    2e64:	66 1f       	adc	r22, r22
    2e66:	77 1f       	adc	r23, r23
    2e68:	88 1f       	adc	r24, r24
    2e6a:	91 50       	subi	r25, 0x01	; 1
    2e6c:	50 40       	sbci	r21, 0x00	; 0
    2e6e:	a9 f7       	brne	.-22     	; 0x2e5a <__mulsf3_pse+0x64>
    2e70:	9e 3f       	cpi	r25, 0xFE	; 254
    2e72:	51 05       	cpc	r21, r1
    2e74:	70 f0       	brcs	.+28     	; 0x2e92 <__mulsf3_pse+0x9c>
    2e76:	60 cf       	rjmp	.-320    	; 0x2d38 <__fp_inf>
    2e78:	aa cf       	rjmp	.-172    	; 0x2dce <__fp_szero>
    2e7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e7c:	ec f3       	brlt	.-6      	; 0x2e78 <__mulsf3_pse+0x82>
    2e7e:	98 3e       	cpi	r25, 0xE8	; 232
    2e80:	dc f3       	brlt	.-10     	; 0x2e78 <__mulsf3_pse+0x82>
    2e82:	86 95       	lsr	r24
    2e84:	77 95       	ror	r23
    2e86:	67 95       	ror	r22
    2e88:	b7 95       	ror	r27
    2e8a:	f7 95       	ror	r31
    2e8c:	e7 95       	ror	r30
    2e8e:	9f 5f       	subi	r25, 0xFF	; 255
    2e90:	c1 f7       	brne	.-16     	; 0x2e82 <__mulsf3_pse+0x8c>
    2e92:	fe 2b       	or	r31, r30
    2e94:	88 0f       	add	r24, r24
    2e96:	91 1d       	adc	r25, r1
    2e98:	96 95       	lsr	r25
    2e9a:	87 95       	ror	r24
    2e9c:	97 f9       	bld	r25, 7
    2e9e:	08 95       	ret

00002ea0 <__udivmodsi4>:
    2ea0:	a1 e2       	ldi	r26, 0x21	; 33
    2ea2:	1a 2e       	mov	r1, r26
    2ea4:	aa 1b       	sub	r26, r26
    2ea6:	bb 1b       	sub	r27, r27
    2ea8:	fd 01       	movw	r30, r26
    2eaa:	0d c0       	rjmp	.+26     	; 0x2ec6 <__udivmodsi4_ep>

00002eac <__udivmodsi4_loop>:
    2eac:	aa 1f       	adc	r26, r26
    2eae:	bb 1f       	adc	r27, r27
    2eb0:	ee 1f       	adc	r30, r30
    2eb2:	ff 1f       	adc	r31, r31
    2eb4:	a2 17       	cp	r26, r18
    2eb6:	b3 07       	cpc	r27, r19
    2eb8:	e4 07       	cpc	r30, r20
    2eba:	f5 07       	cpc	r31, r21
    2ebc:	20 f0       	brcs	.+8      	; 0x2ec6 <__udivmodsi4_ep>
    2ebe:	a2 1b       	sub	r26, r18
    2ec0:	b3 0b       	sbc	r27, r19
    2ec2:	e4 0b       	sbc	r30, r20
    2ec4:	f5 0b       	sbc	r31, r21

00002ec6 <__udivmodsi4_ep>:
    2ec6:	66 1f       	adc	r22, r22
    2ec8:	77 1f       	adc	r23, r23
    2eca:	88 1f       	adc	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	1a 94       	dec	r1
    2ed0:	69 f7       	brne	.-38     	; 0x2eac <__udivmodsi4_loop>
    2ed2:	60 95       	com	r22
    2ed4:	70 95       	com	r23
    2ed6:	80 95       	com	r24
    2ed8:	90 95       	com	r25
    2eda:	9b 01       	movw	r18, r22
    2edc:	ac 01       	movw	r20, r24
    2ede:	bd 01       	movw	r22, r26
    2ee0:	cf 01       	movw	r24, r30
    2ee2:	08 95       	ret

00002ee4 <snprintf>:
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0e 89       	ldd	r16, Y+22	; 0x16
    2ef8:	1f 89       	ldd	r17, Y+23	; 0x17
    2efa:	88 8d       	ldd	r24, Y+24	; 0x18
    2efc:	99 8d       	ldd	r25, Y+25	; 0x19
    2efe:	26 e0       	ldi	r18, 0x06	; 6
    2f00:	2c 83       	std	Y+4, r18	; 0x04
    2f02:	09 83       	std	Y+1, r16	; 0x01
    2f04:	1a 83       	std	Y+2, r17	; 0x02
    2f06:	97 ff       	sbrs	r25, 7
    2f08:	02 c0       	rjmp	.+4      	; 0x2f0e <snprintf+0x2a>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e8       	ldi	r25, 0x80	; 128
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	8d 83       	std	Y+5, r24	; 0x05
    2f12:	9e 83       	std	Y+6, r25	; 0x06
    2f14:	ae 01       	movw	r20, r28
    2f16:	44 5e       	subi	r20, 0xE4	; 228
    2f18:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2f1c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2f1e:	ce 01       	movw	r24, r28
    2f20:	01 96       	adiw	r24, 0x01	; 1
    2f22:	16 d0       	rcall	.+44     	; 0x2f50 <vfprintf>
    2f24:	4d 81       	ldd	r20, Y+5	; 0x05
    2f26:	5e 81       	ldd	r21, Y+6	; 0x06
    2f28:	57 fd       	sbrc	r21, 7
    2f2a:	0a c0       	rjmp	.+20     	; 0x2f40 <snprintf+0x5c>
    2f2c:	2f 81       	ldd	r18, Y+7	; 0x07
    2f2e:	38 85       	ldd	r19, Y+8	; 0x08
    2f30:	42 17       	cp	r20, r18
    2f32:	53 07       	cpc	r21, r19
    2f34:	0c f4       	brge	.+2      	; 0x2f38 <snprintf+0x54>
    2f36:	9a 01       	movw	r18, r20
    2f38:	f8 01       	movw	r30, r16
    2f3a:	e2 0f       	add	r30, r18
    2f3c:	f3 1f       	adc	r31, r19
    2f3e:	10 82       	st	Z, r1
    2f40:	2e 96       	adiw	r28, 0x0e	; 14
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	1f 91       	pop	r17
    2f4c:	0f 91       	pop	r16
    2f4e:	08 95       	ret

00002f50 <vfprintf>:
    2f50:	2f 92       	push	r2
    2f52:	3f 92       	push	r3
    2f54:	4f 92       	push	r4
    2f56:	5f 92       	push	r5
    2f58:	6f 92       	push	r6
    2f5a:	7f 92       	push	r7
    2f5c:	8f 92       	push	r8
    2f5e:	9f 92       	push	r9
    2f60:	af 92       	push	r10
    2f62:	bf 92       	push	r11
    2f64:	cf 92       	push	r12
    2f66:	df 92       	push	r13
    2f68:	ef 92       	push	r14
    2f6a:	ff 92       	push	r15
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	2b 97       	sbiw	r28, 0x0b	; 11
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	6c 01       	movw	r12, r24
    2f80:	7b 01       	movw	r14, r22
    2f82:	8a 01       	movw	r16, r20
    2f84:	fc 01       	movw	r30, r24
    2f86:	16 82       	std	Z+6, r1	; 0x06
    2f88:	17 82       	std	Z+7, r1	; 0x07
    2f8a:	83 81       	ldd	r24, Z+3	; 0x03
    2f8c:	81 ff       	sbrs	r24, 1
    2f8e:	bf c1       	rjmp	.+894    	; 0x330e <vfprintf+0x3be>
    2f90:	ce 01       	movw	r24, r28
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	3c 01       	movw	r6, r24
    2f96:	f6 01       	movw	r30, r12
    2f98:	93 81       	ldd	r25, Z+3	; 0x03
    2f9a:	f7 01       	movw	r30, r14
    2f9c:	93 fd       	sbrc	r25, 3
    2f9e:	85 91       	lpm	r24, Z+
    2fa0:	93 ff       	sbrs	r25, 3
    2fa2:	81 91       	ld	r24, Z+
    2fa4:	7f 01       	movw	r14, r30
    2fa6:	88 23       	and	r24, r24
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <vfprintf+0x5c>
    2faa:	ad c1       	rjmp	.+858    	; 0x3306 <vfprintf+0x3b6>
    2fac:	85 32       	cpi	r24, 0x25	; 37
    2fae:	39 f4       	brne	.+14     	; 0x2fbe <vfprintf+0x6e>
    2fb0:	93 fd       	sbrc	r25, 3
    2fb2:	85 91       	lpm	r24, Z+
    2fb4:	93 ff       	sbrs	r25, 3
    2fb6:	81 91       	ld	r24, Z+
    2fb8:	7f 01       	movw	r14, r30
    2fba:	85 32       	cpi	r24, 0x25	; 37
    2fbc:	21 f4       	brne	.+8      	; 0x2fc6 <vfprintf+0x76>
    2fbe:	b6 01       	movw	r22, r12
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	d3 d1       	rcall	.+934    	; 0x336a <fputc>
    2fc4:	e8 cf       	rjmp	.-48     	; 0x2f96 <vfprintf+0x46>
    2fc6:	91 2c       	mov	r9, r1
    2fc8:	21 2c       	mov	r2, r1
    2fca:	31 2c       	mov	r3, r1
    2fcc:	ff e1       	ldi	r31, 0x1F	; 31
    2fce:	f3 15       	cp	r31, r3
    2fd0:	d8 f0       	brcs	.+54     	; 0x3008 <vfprintf+0xb8>
    2fd2:	8b 32       	cpi	r24, 0x2B	; 43
    2fd4:	79 f0       	breq	.+30     	; 0x2ff4 <vfprintf+0xa4>
    2fd6:	38 f4       	brcc	.+14     	; 0x2fe6 <vfprintf+0x96>
    2fd8:	80 32       	cpi	r24, 0x20	; 32
    2fda:	79 f0       	breq	.+30     	; 0x2ffa <vfprintf+0xaa>
    2fdc:	83 32       	cpi	r24, 0x23	; 35
    2fde:	a1 f4       	brne	.+40     	; 0x3008 <vfprintf+0xb8>
    2fe0:	23 2d       	mov	r18, r3
    2fe2:	20 61       	ori	r18, 0x10	; 16
    2fe4:	1d c0       	rjmp	.+58     	; 0x3020 <vfprintf+0xd0>
    2fe6:	8d 32       	cpi	r24, 0x2D	; 45
    2fe8:	61 f0       	breq	.+24     	; 0x3002 <vfprintf+0xb2>
    2fea:	80 33       	cpi	r24, 0x30	; 48
    2fec:	69 f4       	brne	.+26     	; 0x3008 <vfprintf+0xb8>
    2fee:	23 2d       	mov	r18, r3
    2ff0:	21 60       	ori	r18, 0x01	; 1
    2ff2:	16 c0       	rjmp	.+44     	; 0x3020 <vfprintf+0xd0>
    2ff4:	83 2d       	mov	r24, r3
    2ff6:	82 60       	ori	r24, 0x02	; 2
    2ff8:	38 2e       	mov	r3, r24
    2ffa:	e3 2d       	mov	r30, r3
    2ffc:	e4 60       	ori	r30, 0x04	; 4
    2ffe:	3e 2e       	mov	r3, r30
    3000:	2a c0       	rjmp	.+84     	; 0x3056 <vfprintf+0x106>
    3002:	f3 2d       	mov	r31, r3
    3004:	f8 60       	ori	r31, 0x08	; 8
    3006:	1d c0       	rjmp	.+58     	; 0x3042 <vfprintf+0xf2>
    3008:	37 fc       	sbrc	r3, 7
    300a:	2d c0       	rjmp	.+90     	; 0x3066 <vfprintf+0x116>
    300c:	20 ed       	ldi	r18, 0xD0	; 208
    300e:	28 0f       	add	r18, r24
    3010:	2a 30       	cpi	r18, 0x0A	; 10
    3012:	40 f0       	brcs	.+16     	; 0x3024 <vfprintf+0xd4>
    3014:	8e 32       	cpi	r24, 0x2E	; 46
    3016:	b9 f4       	brne	.+46     	; 0x3046 <vfprintf+0xf6>
    3018:	36 fc       	sbrc	r3, 6
    301a:	75 c1       	rjmp	.+746    	; 0x3306 <vfprintf+0x3b6>
    301c:	23 2d       	mov	r18, r3
    301e:	20 64       	ori	r18, 0x40	; 64
    3020:	32 2e       	mov	r3, r18
    3022:	19 c0       	rjmp	.+50     	; 0x3056 <vfprintf+0x106>
    3024:	36 fe       	sbrs	r3, 6
    3026:	06 c0       	rjmp	.+12     	; 0x3034 <vfprintf+0xe4>
    3028:	8a e0       	ldi	r24, 0x0A	; 10
    302a:	98 9e       	mul	r9, r24
    302c:	20 0d       	add	r18, r0
    302e:	11 24       	eor	r1, r1
    3030:	92 2e       	mov	r9, r18
    3032:	11 c0       	rjmp	.+34     	; 0x3056 <vfprintf+0x106>
    3034:	ea e0       	ldi	r30, 0x0A	; 10
    3036:	2e 9e       	mul	r2, r30
    3038:	20 0d       	add	r18, r0
    303a:	11 24       	eor	r1, r1
    303c:	22 2e       	mov	r2, r18
    303e:	f3 2d       	mov	r31, r3
    3040:	f0 62       	ori	r31, 0x20	; 32
    3042:	3f 2e       	mov	r3, r31
    3044:	08 c0       	rjmp	.+16     	; 0x3056 <vfprintf+0x106>
    3046:	8c 36       	cpi	r24, 0x6C	; 108
    3048:	21 f4       	brne	.+8      	; 0x3052 <vfprintf+0x102>
    304a:	83 2d       	mov	r24, r3
    304c:	80 68       	ori	r24, 0x80	; 128
    304e:	38 2e       	mov	r3, r24
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <vfprintf+0x106>
    3052:	88 36       	cpi	r24, 0x68	; 104
    3054:	41 f4       	brne	.+16     	; 0x3066 <vfprintf+0x116>
    3056:	f7 01       	movw	r30, r14
    3058:	93 fd       	sbrc	r25, 3
    305a:	85 91       	lpm	r24, Z+
    305c:	93 ff       	sbrs	r25, 3
    305e:	81 91       	ld	r24, Z+
    3060:	7f 01       	movw	r14, r30
    3062:	81 11       	cpse	r24, r1
    3064:	b3 cf       	rjmp	.-154    	; 0x2fcc <vfprintf+0x7c>
    3066:	98 2f       	mov	r25, r24
    3068:	9f 7d       	andi	r25, 0xDF	; 223
    306a:	95 54       	subi	r25, 0x45	; 69
    306c:	93 30       	cpi	r25, 0x03	; 3
    306e:	28 f4       	brcc	.+10     	; 0x307a <vfprintf+0x12a>
    3070:	0c 5f       	subi	r16, 0xFC	; 252
    3072:	1f 4f       	sbci	r17, 0xFF	; 255
    3074:	9f e3       	ldi	r25, 0x3F	; 63
    3076:	99 83       	std	Y+1, r25	; 0x01
    3078:	0d c0       	rjmp	.+26     	; 0x3094 <vfprintf+0x144>
    307a:	83 36       	cpi	r24, 0x63	; 99
    307c:	31 f0       	breq	.+12     	; 0x308a <vfprintf+0x13a>
    307e:	83 37       	cpi	r24, 0x73	; 115
    3080:	71 f0       	breq	.+28     	; 0x309e <vfprintf+0x14e>
    3082:	83 35       	cpi	r24, 0x53	; 83
    3084:	09 f0       	breq	.+2      	; 0x3088 <vfprintf+0x138>
    3086:	55 c0       	rjmp	.+170    	; 0x3132 <vfprintf+0x1e2>
    3088:	20 c0       	rjmp	.+64     	; 0x30ca <vfprintf+0x17a>
    308a:	f8 01       	movw	r30, r16
    308c:	80 81       	ld	r24, Z
    308e:	89 83       	std	Y+1, r24	; 0x01
    3090:	0e 5f       	subi	r16, 0xFE	; 254
    3092:	1f 4f       	sbci	r17, 0xFF	; 255
    3094:	88 24       	eor	r8, r8
    3096:	83 94       	inc	r8
    3098:	91 2c       	mov	r9, r1
    309a:	53 01       	movw	r10, r6
    309c:	12 c0       	rjmp	.+36     	; 0x30c2 <vfprintf+0x172>
    309e:	28 01       	movw	r4, r16
    30a0:	f2 e0       	ldi	r31, 0x02	; 2
    30a2:	4f 0e       	add	r4, r31
    30a4:	51 1c       	adc	r5, r1
    30a6:	f8 01       	movw	r30, r16
    30a8:	a0 80       	ld	r10, Z
    30aa:	b1 80       	ldd	r11, Z+1	; 0x01
    30ac:	36 fe       	sbrs	r3, 6
    30ae:	03 c0       	rjmp	.+6      	; 0x30b6 <vfprintf+0x166>
    30b0:	69 2d       	mov	r22, r9
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <vfprintf+0x16a>
    30b6:	6f ef       	ldi	r22, 0xFF	; 255
    30b8:	7f ef       	ldi	r23, 0xFF	; 255
    30ba:	c5 01       	movw	r24, r10
    30bc:	4b d1       	rcall	.+662    	; 0x3354 <strnlen>
    30be:	4c 01       	movw	r8, r24
    30c0:	82 01       	movw	r16, r4
    30c2:	f3 2d       	mov	r31, r3
    30c4:	ff 77       	andi	r31, 0x7F	; 127
    30c6:	3f 2e       	mov	r3, r31
    30c8:	15 c0       	rjmp	.+42     	; 0x30f4 <vfprintf+0x1a4>
    30ca:	28 01       	movw	r4, r16
    30cc:	22 e0       	ldi	r18, 0x02	; 2
    30ce:	42 0e       	add	r4, r18
    30d0:	51 1c       	adc	r5, r1
    30d2:	f8 01       	movw	r30, r16
    30d4:	a0 80       	ld	r10, Z
    30d6:	b1 80       	ldd	r11, Z+1	; 0x01
    30d8:	36 fe       	sbrs	r3, 6
    30da:	03 c0       	rjmp	.+6      	; 0x30e2 <vfprintf+0x192>
    30dc:	69 2d       	mov	r22, r9
    30de:	70 e0       	ldi	r23, 0x00	; 0
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <vfprintf+0x196>
    30e2:	6f ef       	ldi	r22, 0xFF	; 255
    30e4:	7f ef       	ldi	r23, 0xFF	; 255
    30e6:	c5 01       	movw	r24, r10
    30e8:	2a d1       	rcall	.+596    	; 0x333e <strnlen_P>
    30ea:	4c 01       	movw	r8, r24
    30ec:	f3 2d       	mov	r31, r3
    30ee:	f0 68       	ori	r31, 0x80	; 128
    30f0:	3f 2e       	mov	r3, r31
    30f2:	82 01       	movw	r16, r4
    30f4:	33 fc       	sbrc	r3, 3
    30f6:	19 c0       	rjmp	.+50     	; 0x312a <vfprintf+0x1da>
    30f8:	82 2d       	mov	r24, r2
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	88 16       	cp	r8, r24
    30fe:	99 06       	cpc	r9, r25
    3100:	a0 f4       	brcc	.+40     	; 0x312a <vfprintf+0x1da>
    3102:	b6 01       	movw	r22, r12
    3104:	80 e2       	ldi	r24, 0x20	; 32
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	30 d1       	rcall	.+608    	; 0x336a <fputc>
    310a:	2a 94       	dec	r2
    310c:	f5 cf       	rjmp	.-22     	; 0x30f8 <vfprintf+0x1a8>
    310e:	f5 01       	movw	r30, r10
    3110:	37 fc       	sbrc	r3, 7
    3112:	85 91       	lpm	r24, Z+
    3114:	37 fe       	sbrs	r3, 7
    3116:	81 91       	ld	r24, Z+
    3118:	5f 01       	movw	r10, r30
    311a:	b6 01       	movw	r22, r12
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	25 d1       	rcall	.+586    	; 0x336a <fputc>
    3120:	21 10       	cpse	r2, r1
    3122:	2a 94       	dec	r2
    3124:	21 e0       	ldi	r18, 0x01	; 1
    3126:	82 1a       	sub	r8, r18
    3128:	91 08       	sbc	r9, r1
    312a:	81 14       	cp	r8, r1
    312c:	91 04       	cpc	r9, r1
    312e:	79 f7       	brne	.-34     	; 0x310e <vfprintf+0x1be>
    3130:	e1 c0       	rjmp	.+450    	; 0x32f4 <vfprintf+0x3a4>
    3132:	84 36       	cpi	r24, 0x64	; 100
    3134:	11 f0       	breq	.+4      	; 0x313a <vfprintf+0x1ea>
    3136:	89 36       	cpi	r24, 0x69	; 105
    3138:	39 f5       	brne	.+78     	; 0x3188 <vfprintf+0x238>
    313a:	f8 01       	movw	r30, r16
    313c:	37 fe       	sbrs	r3, 7
    313e:	07 c0       	rjmp	.+14     	; 0x314e <vfprintf+0x1fe>
    3140:	60 81       	ld	r22, Z
    3142:	71 81       	ldd	r23, Z+1	; 0x01
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	93 81       	ldd	r25, Z+3	; 0x03
    3148:	0c 5f       	subi	r16, 0xFC	; 252
    314a:	1f 4f       	sbci	r17, 0xFF	; 255
    314c:	08 c0       	rjmp	.+16     	; 0x315e <vfprintf+0x20e>
    314e:	60 81       	ld	r22, Z
    3150:	71 81       	ldd	r23, Z+1	; 0x01
    3152:	07 2e       	mov	r0, r23
    3154:	00 0c       	add	r0, r0
    3156:	88 0b       	sbc	r24, r24
    3158:	99 0b       	sbc	r25, r25
    315a:	0e 5f       	subi	r16, 0xFE	; 254
    315c:	1f 4f       	sbci	r17, 0xFF	; 255
    315e:	f3 2d       	mov	r31, r3
    3160:	ff 76       	andi	r31, 0x6F	; 111
    3162:	3f 2e       	mov	r3, r31
    3164:	97 ff       	sbrs	r25, 7
    3166:	09 c0       	rjmp	.+18     	; 0x317a <vfprintf+0x22a>
    3168:	90 95       	com	r25
    316a:	80 95       	com	r24
    316c:	70 95       	com	r23
    316e:	61 95       	neg	r22
    3170:	7f 4f       	sbci	r23, 0xFF	; 255
    3172:	8f 4f       	sbci	r24, 0xFF	; 255
    3174:	9f 4f       	sbci	r25, 0xFF	; 255
    3176:	f0 68       	ori	r31, 0x80	; 128
    3178:	3f 2e       	mov	r3, r31
    317a:	2a e0       	ldi	r18, 0x0A	; 10
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	a3 01       	movw	r20, r6
    3180:	30 d1       	rcall	.+608    	; 0x33e2 <__ultoa_invert>
    3182:	88 2e       	mov	r8, r24
    3184:	86 18       	sub	r8, r6
    3186:	44 c0       	rjmp	.+136    	; 0x3210 <vfprintf+0x2c0>
    3188:	85 37       	cpi	r24, 0x75	; 117
    318a:	31 f4       	brne	.+12     	; 0x3198 <vfprintf+0x248>
    318c:	23 2d       	mov	r18, r3
    318e:	2f 7e       	andi	r18, 0xEF	; 239
    3190:	b2 2e       	mov	r11, r18
    3192:	2a e0       	ldi	r18, 0x0A	; 10
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	25 c0       	rjmp	.+74     	; 0x31e2 <vfprintf+0x292>
    3198:	93 2d       	mov	r25, r3
    319a:	99 7f       	andi	r25, 0xF9	; 249
    319c:	b9 2e       	mov	r11, r25
    319e:	8f 36       	cpi	r24, 0x6F	; 111
    31a0:	c1 f0       	breq	.+48     	; 0x31d2 <vfprintf+0x282>
    31a2:	18 f4       	brcc	.+6      	; 0x31aa <vfprintf+0x25a>
    31a4:	88 35       	cpi	r24, 0x58	; 88
    31a6:	79 f0       	breq	.+30     	; 0x31c6 <vfprintf+0x276>
    31a8:	ae c0       	rjmp	.+348    	; 0x3306 <vfprintf+0x3b6>
    31aa:	80 37       	cpi	r24, 0x70	; 112
    31ac:	19 f0       	breq	.+6      	; 0x31b4 <vfprintf+0x264>
    31ae:	88 37       	cpi	r24, 0x78	; 120
    31b0:	21 f0       	breq	.+8      	; 0x31ba <vfprintf+0x26a>
    31b2:	a9 c0       	rjmp	.+338    	; 0x3306 <vfprintf+0x3b6>
    31b4:	e9 2f       	mov	r30, r25
    31b6:	e0 61       	ori	r30, 0x10	; 16
    31b8:	be 2e       	mov	r11, r30
    31ba:	b4 fe       	sbrs	r11, 4
    31bc:	0d c0       	rjmp	.+26     	; 0x31d8 <vfprintf+0x288>
    31be:	fb 2d       	mov	r31, r11
    31c0:	f4 60       	ori	r31, 0x04	; 4
    31c2:	bf 2e       	mov	r11, r31
    31c4:	09 c0       	rjmp	.+18     	; 0x31d8 <vfprintf+0x288>
    31c6:	34 fe       	sbrs	r3, 4
    31c8:	0a c0       	rjmp	.+20     	; 0x31de <vfprintf+0x28e>
    31ca:	29 2f       	mov	r18, r25
    31cc:	26 60       	ori	r18, 0x06	; 6
    31ce:	b2 2e       	mov	r11, r18
    31d0:	06 c0       	rjmp	.+12     	; 0x31de <vfprintf+0x28e>
    31d2:	28 e0       	ldi	r18, 0x08	; 8
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	05 c0       	rjmp	.+10     	; 0x31e2 <vfprintf+0x292>
    31d8:	20 e1       	ldi	r18, 0x10	; 16
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <vfprintf+0x292>
    31de:	20 e1       	ldi	r18, 0x10	; 16
    31e0:	32 e0       	ldi	r19, 0x02	; 2
    31e2:	f8 01       	movw	r30, r16
    31e4:	b7 fe       	sbrs	r11, 7
    31e6:	07 c0       	rjmp	.+14     	; 0x31f6 <vfprintf+0x2a6>
    31e8:	60 81       	ld	r22, Z
    31ea:	71 81       	ldd	r23, Z+1	; 0x01
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	93 81       	ldd	r25, Z+3	; 0x03
    31f0:	0c 5f       	subi	r16, 0xFC	; 252
    31f2:	1f 4f       	sbci	r17, 0xFF	; 255
    31f4:	06 c0       	rjmp	.+12     	; 0x3202 <vfprintf+0x2b2>
    31f6:	60 81       	ld	r22, Z
    31f8:	71 81       	ldd	r23, Z+1	; 0x01
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	0e 5f       	subi	r16, 0xFE	; 254
    3200:	1f 4f       	sbci	r17, 0xFF	; 255
    3202:	a3 01       	movw	r20, r6
    3204:	ee d0       	rcall	.+476    	; 0x33e2 <__ultoa_invert>
    3206:	88 2e       	mov	r8, r24
    3208:	86 18       	sub	r8, r6
    320a:	fb 2d       	mov	r31, r11
    320c:	ff 77       	andi	r31, 0x7F	; 127
    320e:	3f 2e       	mov	r3, r31
    3210:	36 fe       	sbrs	r3, 6
    3212:	0d c0       	rjmp	.+26     	; 0x322e <vfprintf+0x2de>
    3214:	23 2d       	mov	r18, r3
    3216:	2e 7f       	andi	r18, 0xFE	; 254
    3218:	a2 2e       	mov	r10, r18
    321a:	89 14       	cp	r8, r9
    321c:	58 f4       	brcc	.+22     	; 0x3234 <vfprintf+0x2e4>
    321e:	34 fe       	sbrs	r3, 4
    3220:	0b c0       	rjmp	.+22     	; 0x3238 <vfprintf+0x2e8>
    3222:	32 fc       	sbrc	r3, 2
    3224:	09 c0       	rjmp	.+18     	; 0x3238 <vfprintf+0x2e8>
    3226:	83 2d       	mov	r24, r3
    3228:	8e 7e       	andi	r24, 0xEE	; 238
    322a:	a8 2e       	mov	r10, r24
    322c:	05 c0       	rjmp	.+10     	; 0x3238 <vfprintf+0x2e8>
    322e:	b8 2c       	mov	r11, r8
    3230:	a3 2c       	mov	r10, r3
    3232:	03 c0       	rjmp	.+6      	; 0x323a <vfprintf+0x2ea>
    3234:	b8 2c       	mov	r11, r8
    3236:	01 c0       	rjmp	.+2      	; 0x323a <vfprintf+0x2ea>
    3238:	b9 2c       	mov	r11, r9
    323a:	a4 fe       	sbrs	r10, 4
    323c:	0f c0       	rjmp	.+30     	; 0x325c <vfprintf+0x30c>
    323e:	fe 01       	movw	r30, r28
    3240:	e8 0d       	add	r30, r8
    3242:	f1 1d       	adc	r31, r1
    3244:	80 81       	ld	r24, Z
    3246:	80 33       	cpi	r24, 0x30	; 48
    3248:	21 f4       	brne	.+8      	; 0x3252 <vfprintf+0x302>
    324a:	9a 2d       	mov	r25, r10
    324c:	99 7e       	andi	r25, 0xE9	; 233
    324e:	a9 2e       	mov	r10, r25
    3250:	09 c0       	rjmp	.+18     	; 0x3264 <vfprintf+0x314>
    3252:	a2 fe       	sbrs	r10, 2
    3254:	06 c0       	rjmp	.+12     	; 0x3262 <vfprintf+0x312>
    3256:	b3 94       	inc	r11
    3258:	b3 94       	inc	r11
    325a:	04 c0       	rjmp	.+8      	; 0x3264 <vfprintf+0x314>
    325c:	8a 2d       	mov	r24, r10
    325e:	86 78       	andi	r24, 0x86	; 134
    3260:	09 f0       	breq	.+2      	; 0x3264 <vfprintf+0x314>
    3262:	b3 94       	inc	r11
    3264:	a3 fc       	sbrc	r10, 3
    3266:	10 c0       	rjmp	.+32     	; 0x3288 <vfprintf+0x338>
    3268:	a0 fe       	sbrs	r10, 0
    326a:	06 c0       	rjmp	.+12     	; 0x3278 <vfprintf+0x328>
    326c:	b2 14       	cp	r11, r2
    326e:	80 f4       	brcc	.+32     	; 0x3290 <vfprintf+0x340>
    3270:	28 0c       	add	r2, r8
    3272:	92 2c       	mov	r9, r2
    3274:	9b 18       	sub	r9, r11
    3276:	0d c0       	rjmp	.+26     	; 0x3292 <vfprintf+0x342>
    3278:	b2 14       	cp	r11, r2
    327a:	58 f4       	brcc	.+22     	; 0x3292 <vfprintf+0x342>
    327c:	b6 01       	movw	r22, r12
    327e:	80 e2       	ldi	r24, 0x20	; 32
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	73 d0       	rcall	.+230    	; 0x336a <fputc>
    3284:	b3 94       	inc	r11
    3286:	f8 cf       	rjmp	.-16     	; 0x3278 <vfprintf+0x328>
    3288:	b2 14       	cp	r11, r2
    328a:	18 f4       	brcc	.+6      	; 0x3292 <vfprintf+0x342>
    328c:	2b 18       	sub	r2, r11
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <vfprintf+0x344>
    3290:	98 2c       	mov	r9, r8
    3292:	21 2c       	mov	r2, r1
    3294:	a4 fe       	sbrs	r10, 4
    3296:	0f c0       	rjmp	.+30     	; 0x32b6 <vfprintf+0x366>
    3298:	b6 01       	movw	r22, r12
    329a:	80 e3       	ldi	r24, 0x30	; 48
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	65 d0       	rcall	.+202    	; 0x336a <fputc>
    32a0:	a2 fe       	sbrs	r10, 2
    32a2:	16 c0       	rjmp	.+44     	; 0x32d0 <vfprintf+0x380>
    32a4:	a1 fc       	sbrc	r10, 1
    32a6:	03 c0       	rjmp	.+6      	; 0x32ae <vfprintf+0x35e>
    32a8:	88 e7       	ldi	r24, 0x78	; 120
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <vfprintf+0x362>
    32ae:	88 e5       	ldi	r24, 0x58	; 88
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	b6 01       	movw	r22, r12
    32b4:	0c c0       	rjmp	.+24     	; 0x32ce <vfprintf+0x37e>
    32b6:	8a 2d       	mov	r24, r10
    32b8:	86 78       	andi	r24, 0x86	; 134
    32ba:	51 f0       	breq	.+20     	; 0x32d0 <vfprintf+0x380>
    32bc:	a1 fe       	sbrs	r10, 1
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <vfprintf+0x374>
    32c0:	8b e2       	ldi	r24, 0x2B	; 43
    32c2:	01 c0       	rjmp	.+2      	; 0x32c6 <vfprintf+0x376>
    32c4:	80 e2       	ldi	r24, 0x20	; 32
    32c6:	a7 fc       	sbrc	r10, 7
    32c8:	8d e2       	ldi	r24, 0x2D	; 45
    32ca:	b6 01       	movw	r22, r12
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	4d d0       	rcall	.+154    	; 0x336a <fputc>
    32d0:	89 14       	cp	r8, r9
    32d2:	30 f4       	brcc	.+12     	; 0x32e0 <vfprintf+0x390>
    32d4:	b6 01       	movw	r22, r12
    32d6:	80 e3       	ldi	r24, 0x30	; 48
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	47 d0       	rcall	.+142    	; 0x336a <fputc>
    32dc:	9a 94       	dec	r9
    32de:	f8 cf       	rjmp	.-16     	; 0x32d0 <vfprintf+0x380>
    32e0:	8a 94       	dec	r8
    32e2:	f3 01       	movw	r30, r6
    32e4:	e8 0d       	add	r30, r8
    32e6:	f1 1d       	adc	r31, r1
    32e8:	80 81       	ld	r24, Z
    32ea:	b6 01       	movw	r22, r12
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	3d d0       	rcall	.+122    	; 0x336a <fputc>
    32f0:	81 10       	cpse	r8, r1
    32f2:	f6 cf       	rjmp	.-20     	; 0x32e0 <vfprintf+0x390>
    32f4:	22 20       	and	r2, r2
    32f6:	09 f4       	brne	.+2      	; 0x32fa <vfprintf+0x3aa>
    32f8:	4e ce       	rjmp	.-868    	; 0x2f96 <vfprintf+0x46>
    32fa:	b6 01       	movw	r22, r12
    32fc:	80 e2       	ldi	r24, 0x20	; 32
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	34 d0       	rcall	.+104    	; 0x336a <fputc>
    3302:	2a 94       	dec	r2
    3304:	f7 cf       	rjmp	.-18     	; 0x32f4 <vfprintf+0x3a4>
    3306:	f6 01       	movw	r30, r12
    3308:	86 81       	ldd	r24, Z+6	; 0x06
    330a:	97 81       	ldd	r25, Z+7	; 0x07
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <vfprintf+0x3c2>
    330e:	8f ef       	ldi	r24, 0xFF	; 255
    3310:	9f ef       	ldi	r25, 0xFF	; 255
    3312:	2b 96       	adiw	r28, 0x0b	; 11
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	1f 91       	pop	r17
    331e:	0f 91       	pop	r16
    3320:	ff 90       	pop	r15
    3322:	ef 90       	pop	r14
    3324:	df 90       	pop	r13
    3326:	cf 90       	pop	r12
    3328:	bf 90       	pop	r11
    332a:	af 90       	pop	r10
    332c:	9f 90       	pop	r9
    332e:	8f 90       	pop	r8
    3330:	7f 90       	pop	r7
    3332:	6f 90       	pop	r6
    3334:	5f 90       	pop	r5
    3336:	4f 90       	pop	r4
    3338:	3f 90       	pop	r3
    333a:	2f 90       	pop	r2
    333c:	08 95       	ret

0000333e <strnlen_P>:
    333e:	fc 01       	movw	r30, r24
    3340:	05 90       	lpm	r0, Z+
    3342:	61 50       	subi	r22, 0x01	; 1
    3344:	70 40       	sbci	r23, 0x00	; 0
    3346:	01 10       	cpse	r0, r1
    3348:	d8 f7       	brcc	.-10     	; 0x3340 <strnlen_P+0x2>
    334a:	80 95       	com	r24
    334c:	90 95       	com	r25
    334e:	8e 0f       	add	r24, r30
    3350:	9f 1f       	adc	r25, r31
    3352:	08 95       	ret

00003354 <strnlen>:
    3354:	fc 01       	movw	r30, r24
    3356:	61 50       	subi	r22, 0x01	; 1
    3358:	70 40       	sbci	r23, 0x00	; 0
    335a:	01 90       	ld	r0, Z+
    335c:	01 10       	cpse	r0, r1
    335e:	d8 f7       	brcc	.-10     	; 0x3356 <strnlen+0x2>
    3360:	80 95       	com	r24
    3362:	90 95       	com	r25
    3364:	8e 0f       	add	r24, r30
    3366:	9f 1f       	adc	r25, r31
    3368:	08 95       	ret

0000336a <fputc>:
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	fb 01       	movw	r30, r22
    3374:	23 81       	ldd	r18, Z+3	; 0x03
    3376:	21 fd       	sbrc	r18, 1
    3378:	03 c0       	rjmp	.+6      	; 0x3380 <fputc+0x16>
    337a:	8f ef       	ldi	r24, 0xFF	; 255
    337c:	9f ef       	ldi	r25, 0xFF	; 255
    337e:	2c c0       	rjmp	.+88     	; 0x33d8 <fputc+0x6e>
    3380:	22 ff       	sbrs	r18, 2
    3382:	16 c0       	rjmp	.+44     	; 0x33b0 <fputc+0x46>
    3384:	46 81       	ldd	r20, Z+6	; 0x06
    3386:	57 81       	ldd	r21, Z+7	; 0x07
    3388:	24 81       	ldd	r18, Z+4	; 0x04
    338a:	35 81       	ldd	r19, Z+5	; 0x05
    338c:	42 17       	cp	r20, r18
    338e:	53 07       	cpc	r21, r19
    3390:	44 f4       	brge	.+16     	; 0x33a2 <fputc+0x38>
    3392:	a0 81       	ld	r26, Z
    3394:	b1 81       	ldd	r27, Z+1	; 0x01
    3396:	9d 01       	movw	r18, r26
    3398:	2f 5f       	subi	r18, 0xFF	; 255
    339a:	3f 4f       	sbci	r19, 0xFF	; 255
    339c:	20 83       	st	Z, r18
    339e:	31 83       	std	Z+1, r19	; 0x01
    33a0:	8c 93       	st	X, r24
    33a2:	26 81       	ldd	r18, Z+6	; 0x06
    33a4:	37 81       	ldd	r19, Z+7	; 0x07
    33a6:	2f 5f       	subi	r18, 0xFF	; 255
    33a8:	3f 4f       	sbci	r19, 0xFF	; 255
    33aa:	26 83       	std	Z+6, r18	; 0x06
    33ac:	37 83       	std	Z+7, r19	; 0x07
    33ae:	14 c0       	rjmp	.+40     	; 0x33d8 <fputc+0x6e>
    33b0:	8b 01       	movw	r16, r22
    33b2:	ec 01       	movw	r28, r24
    33b4:	fb 01       	movw	r30, r22
    33b6:	00 84       	ldd	r0, Z+8	; 0x08
    33b8:	f1 85       	ldd	r31, Z+9	; 0x09
    33ba:	e0 2d       	mov	r30, r0
    33bc:	19 95       	eicall
    33be:	89 2b       	or	r24, r25
    33c0:	e1 f6       	brne	.-72     	; 0x337a <fputc+0x10>
    33c2:	d8 01       	movw	r26, r16
    33c4:	16 96       	adiw	r26, 0x06	; 6
    33c6:	8d 91       	ld	r24, X+
    33c8:	9c 91       	ld	r25, X
    33ca:	17 97       	sbiw	r26, 0x07	; 7
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	16 96       	adiw	r26, 0x06	; 6
    33d0:	8d 93       	st	X+, r24
    33d2:	9c 93       	st	X, r25
    33d4:	17 97       	sbiw	r26, 0x07	; 7
    33d6:	ce 01       	movw	r24, r28
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	1f 91       	pop	r17
    33de:	0f 91       	pop	r16
    33e0:	08 95       	ret

000033e2 <__ultoa_invert>:
    33e2:	fa 01       	movw	r30, r20
    33e4:	aa 27       	eor	r26, r26
    33e6:	28 30       	cpi	r18, 0x08	; 8
    33e8:	51 f1       	breq	.+84     	; 0x343e <__ultoa_invert+0x5c>
    33ea:	20 31       	cpi	r18, 0x10	; 16
    33ec:	81 f1       	breq	.+96     	; 0x344e <__ultoa_invert+0x6c>
    33ee:	e8 94       	clt
    33f0:	6f 93       	push	r22
    33f2:	6e 7f       	andi	r22, 0xFE	; 254
    33f4:	6e 5f       	subi	r22, 0xFE	; 254
    33f6:	7f 4f       	sbci	r23, 0xFF	; 255
    33f8:	8f 4f       	sbci	r24, 0xFF	; 255
    33fa:	9f 4f       	sbci	r25, 0xFF	; 255
    33fc:	af 4f       	sbci	r26, 0xFF	; 255
    33fe:	b1 e0       	ldi	r27, 0x01	; 1
    3400:	3e d0       	rcall	.+124    	; 0x347e <__ultoa_invert+0x9c>
    3402:	b4 e0       	ldi	r27, 0x04	; 4
    3404:	3c d0       	rcall	.+120    	; 0x347e <__ultoa_invert+0x9c>
    3406:	67 0f       	add	r22, r23
    3408:	78 1f       	adc	r23, r24
    340a:	89 1f       	adc	r24, r25
    340c:	9a 1f       	adc	r25, r26
    340e:	a1 1d       	adc	r26, r1
    3410:	68 0f       	add	r22, r24
    3412:	79 1f       	adc	r23, r25
    3414:	8a 1f       	adc	r24, r26
    3416:	91 1d       	adc	r25, r1
    3418:	a1 1d       	adc	r26, r1
    341a:	6a 0f       	add	r22, r26
    341c:	71 1d       	adc	r23, r1
    341e:	81 1d       	adc	r24, r1
    3420:	91 1d       	adc	r25, r1
    3422:	a1 1d       	adc	r26, r1
    3424:	20 d0       	rcall	.+64     	; 0x3466 <__ultoa_invert+0x84>
    3426:	09 f4       	brne	.+2      	; 0x342a <__ultoa_invert+0x48>
    3428:	68 94       	set
    342a:	3f 91       	pop	r19
    342c:	2a e0       	ldi	r18, 0x0A	; 10
    342e:	26 9f       	mul	r18, r22
    3430:	11 24       	eor	r1, r1
    3432:	30 19       	sub	r19, r0
    3434:	30 5d       	subi	r19, 0xD0	; 208
    3436:	31 93       	st	Z+, r19
    3438:	de f6       	brtc	.-74     	; 0x33f0 <__ultoa_invert+0xe>
    343a:	cf 01       	movw	r24, r30
    343c:	08 95       	ret
    343e:	46 2f       	mov	r20, r22
    3440:	47 70       	andi	r20, 0x07	; 7
    3442:	40 5d       	subi	r20, 0xD0	; 208
    3444:	41 93       	st	Z+, r20
    3446:	b3 e0       	ldi	r27, 0x03	; 3
    3448:	0f d0       	rcall	.+30     	; 0x3468 <__ultoa_invert+0x86>
    344a:	c9 f7       	brne	.-14     	; 0x343e <__ultoa_invert+0x5c>
    344c:	f6 cf       	rjmp	.-20     	; 0x343a <__ultoa_invert+0x58>
    344e:	46 2f       	mov	r20, r22
    3450:	4f 70       	andi	r20, 0x0F	; 15
    3452:	40 5d       	subi	r20, 0xD0	; 208
    3454:	4a 33       	cpi	r20, 0x3A	; 58
    3456:	18 f0       	brcs	.+6      	; 0x345e <__ultoa_invert+0x7c>
    3458:	49 5d       	subi	r20, 0xD9	; 217
    345a:	31 fd       	sbrc	r19, 1
    345c:	40 52       	subi	r20, 0x20	; 32
    345e:	41 93       	st	Z+, r20
    3460:	02 d0       	rcall	.+4      	; 0x3466 <__ultoa_invert+0x84>
    3462:	a9 f7       	brne	.-22     	; 0x344e <__ultoa_invert+0x6c>
    3464:	ea cf       	rjmp	.-44     	; 0x343a <__ultoa_invert+0x58>
    3466:	b4 e0       	ldi	r27, 0x04	; 4
    3468:	a6 95       	lsr	r26
    346a:	97 95       	ror	r25
    346c:	87 95       	ror	r24
    346e:	77 95       	ror	r23
    3470:	67 95       	ror	r22
    3472:	ba 95       	dec	r27
    3474:	c9 f7       	brne	.-14     	; 0x3468 <__ultoa_invert+0x86>
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	61 05       	cpc	r22, r1
    347a:	71 05       	cpc	r23, r1
    347c:	08 95       	ret
    347e:	9b 01       	movw	r18, r22
    3480:	ac 01       	movw	r20, r24
    3482:	0a 2e       	mov	r0, r26
    3484:	06 94       	lsr	r0
    3486:	57 95       	ror	r21
    3488:	47 95       	ror	r20
    348a:	37 95       	ror	r19
    348c:	27 95       	ror	r18
    348e:	ba 95       	dec	r27
    3490:	c9 f7       	brne	.-14     	; 0x3484 <__ultoa_invert+0xa2>
    3492:	62 0f       	add	r22, r18
    3494:	73 1f       	adc	r23, r19
    3496:	84 1f       	adc	r24, r20
    3498:	95 1f       	adc	r25, r21
    349a:	a0 1d       	adc	r26, r0
    349c:	08 95       	ret

0000349e <_exit>:
    349e:	f8 94       	cli

000034a0 <__stop_program>:
    34a0:	ff cf       	rjmp	.-2      	; 0x34a0 <__stop_program>
